
008Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08009284  08009284  00019284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009718  08009718  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009718  08009718  00019718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009720  08009720  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009724  08009724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00012f14  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fa0  20012fa0  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c83  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000390c  00000000  00000000  00037d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001310  00000000  00000000  0003cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025567  00000000  00000000  0003dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001970e  00000000  00000000  0006334f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc563  00000000  00000000  0007ca5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158fc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e30  00000000  00000000  00159010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800926c 	.word	0x0800926c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800926c 	.word	0x0800926c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e00e      	b.n	80005ce <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <led_effect_stop+0x3c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2103      	movs	r1, #3
 80005c4:	f006 fdb2 	bl	800712c <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dded      	ble.n	80005b0 <led_effect_stop+0xc>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000130 	.word	0x20000130

080005e4 <led_effect>:

void led_effect(int n )
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005ec:	f7ff ffda 	bl	80005a4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <led_effect+0x34>)
 80005f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005fa:	f005 fced 	bl	8005fd8 <xTaskGetTickCount>
 80005fe:	4602      	mov	r2, r0
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4620      	mov	r0, r4
 800060c:	f006 fd8e 	bl	800712c <xTimerGenericCommand>

}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000130 	.word	0x20000130

0800061c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <turn_off_all_leds+0x38>)
 8000628:	f001 ff72 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <turn_off_all_leds+0x38>)
 8000634:	f001 ff6c 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <turn_off_all_leds+0x38>)
 8000640:	f001 ff66 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <turn_off_all_leds+0x38>)
 800064c:	f001 ff60 	bl	8002510 <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <turn_on_all_leds+0x38>)
 8000664:	f001 ff54 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <turn_on_all_leds+0x38>)
 8000670:	f001 ff4e 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <turn_on_all_leds+0x38>)
 800067c:	f001 ff48 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_on_all_leds+0x38>)
 8000688:	f001 ff42 	bl	8002510 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <turn_on_odd_leds+0x38>)
 80006a0:	f001 ff36 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <turn_on_odd_leds+0x38>)
 80006ac:	f001 ff30 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <turn_on_odd_leds+0x38>)
 80006b8:	f001 ff2a 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <turn_on_odd_leds+0x38>)
 80006c4:	f001 ff24 	bl	8002510 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <turn_on_even_leds+0x38>)
 80006dc:	f001 ff18 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <turn_on_even_leds+0x38>)
 80006e8:	f001 ff12 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <turn_on_even_leds+0x38>)
 80006f4:	f001 ff0c 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <turn_on_even_leds+0x38>)
 8000700:	f001 ff06 	bl	8002510 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <LED_control>:

void LED_control( int value )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e014      	b.n	8000744 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800071a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b299      	uxth	r1, r3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	fa42 f303 	asr.w	r3, r2, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <LED_control+0x48>)
 800073a:	f001 fee9 	bl	8002510 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b03      	cmp	r3, #3
 8000748:	dde7      	ble.n	800071a <LED_control+0xe>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020c00 	.word	0x40020c00

08000758 <LED_effect1>:


void LED_effect1(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LED_effect1+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <LED_effect1+0x28>)
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED_effect1+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <LED_effect1+0x1e>
 8000770:	f7ff ff54 	bl	800061c <turn_off_all_leds>
}
 8000774:	e001      	b.n	800077a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000776:	f7ff ff6f 	bl	8000658 <turn_on_all_leds>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <LED_effect2>:


void LED_effect2(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <LED_effect2+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <LED_effect2+0x28>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LED_effect2+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <LED_effect2+0x1e>
 800079c:	f7ff ff98 	bl	80006d0 <turn_on_even_leds>
}
 80007a0:	e001      	b.n	80007a6 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007a2:	f7ff ff77 	bl	8000694 <turn_on_odd_leds>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000004 	.word	0x20000004

080007b0 <LED_effect3>:

void LED_effect3(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <LED_effect3+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <LED_effect3+0x2c>)
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	425a      	negs	r2, r3
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	f002 0203 	and.w	r2, r2, #3
 80007c8:	bf58      	it	pl
 80007ca:	4253      	negpl	r3, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff9a 	bl	800070c <LED_control>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000a8 	.word	0x200000a8

080007e0 <LED_effect4>:


void LED_effect4(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <LED_effect4+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LED_effect4+0x2c>)
 80007ec:	600a      	str	r2, [r1, #0]
 80007ee:	425a      	negs	r2, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	2208      	movs	r2, #8
 80007fe:	fa42 f303 	asr.w	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff82 	bl	800070c <LED_control>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000ac 	.word	0x200000ac

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f001 fb29 	bl	8001e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f911 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9e1 	bl	8000be4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000822:	f000 f98f 	bl	8000b44 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f9b3 	bl	8000b90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x1cc>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2302      	movs	r3, #2
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	496a      	ldr	r1, [pc, #424]	; (80009e0 <main+0x1d0>)
 8000838:	486a      	ldr	r0, [pc, #424]	; (80009e4 <main+0x1d4>)
 800083a:	f005 f907 	bl	8005a4c <xTaskCreate>
 800083e:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00a      	beq.n	800085c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <main+0x1d8>)
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	22fa      	movs	r2, #250	; 0xfa
 8000868:	4960      	ldr	r1, [pc, #384]	; (80009ec <main+0x1dc>)
 800086a:	4861      	ldr	r0, [pc, #388]	; (80009f0 <main+0x1e0>)
 800086c:	f005 f8ee 	bl	8005a4c <xTaskCreate>
 8000870:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00a      	beq.n	800088e <main+0x7e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <main+0x1e4>)
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	22fa      	movs	r2, #250	; 0xfa
 800089a:	4957      	ldr	r1, [pc, #348]	; (80009f8 <main+0x1e8>)
 800089c:	4857      	ldr	r0, [pc, #348]	; (80009fc <main+0x1ec>)
 800089e:	f005 f8d5 	bl	8005a4c <xTaskCreate>
 80008a2:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00a      	beq.n	80008c0 <main+0xb0>
        __asm volatile
 80008aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ae:	f383 8811 	msr	BASEPRI, r3
 80008b2:	f3bf 8f6f 	isb	sy
 80008b6:	f3bf 8f4f 	dsb	sy
 80008ba:	617b      	str	r3, [r7, #20]
    }
 80008bc:	bf00      	nop
 80008be:	e7fe      	b.n	80008be <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x1f0>)
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	2302      	movs	r3, #2
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	22fa      	movs	r2, #250	; 0xfa
 80008cc:	494d      	ldr	r1, [pc, #308]	; (8000a04 <main+0x1f4>)
 80008ce:	484e      	ldr	r0, [pc, #312]	; (8000a08 <main+0x1f8>)
 80008d0:	f005 f8bc 	bl	8005a4c <xTaskCreate>
 80008d4:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d00a      	beq.n	80008f2 <main+0xe2>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	613b      	str	r3, [r7, #16]
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008f2:	4b46      	ldr	r3, [pc, #280]	; (8000a0c <main+0x1fc>)
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	4944      	ldr	r1, [pc, #272]	; (8000a10 <main+0x200>)
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <main+0x204>)
 8000902:	f005 f8a3 	bl	8005a4c <xTaskCreate>
 8000906:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d00a      	beq.n	8000924 <main+0x114>
        __asm volatile
 800090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000912:	f383 8811 	msr	BASEPRI, r3
 8000916:	f3bf 8f6f 	isb	sy
 800091a:	f3bf 8f4f 	dsb	sy
 800091e:	60fb      	str	r3, [r7, #12]
    }
 8000920:	bf00      	nop
 8000922:	e7fe      	b.n	8000922 <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	200a      	movs	r0, #10
 800092a:	f004 fb1f 	bl	8004f6c <xQueueGenericCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <main+0x208>)
 8000932:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <main+0x208>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <main+0x142>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	60bb      	str	r3, [r7, #8]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	200a      	movs	r0, #10
 8000958:	f004 fb08 	bl	8004f6c <xQueueGenericCreate>
 800095c:	4603      	mov	r3, r0
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <main+0x20c>)
 8000960:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <main+0x20c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10a      	bne.n	8000980 <main+0x170>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	607b      	str	r3, [r7, #4]
    }
 800097c:	bf00      	nop
 800097e:	e7fe      	b.n	800097e <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
 8000984:	e013      	b.n	80009ae <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0x210>)
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000998:	4822      	ldr	r0, [pc, #136]	; (8000a24 <main+0x214>)
 800099a:	f006 fb6d 	bl	8007078 <xTimerCreate>
 800099e:	4602      	mov	r2, r0
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <main+0x218>)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3301      	adds	r3, #1
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	dde8      	ble.n	8000986 <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <main+0x21c>)
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c0:	481b      	ldr	r0, [pc, #108]	; (8000a30 <main+0x220>)
 80009c2:	f006 fb59 	bl	8007078 <xTimerCreate>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <main+0x224>)
 80009ca:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	491a      	ldr	r1, [pc, #104]	; (8000a38 <main+0x228>)
 80009d0:	481a      	ldr	r0, [pc, #104]	; (8000a3c <main+0x22c>)
 80009d2:	f003 f9ee 	bl	8003db2 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009d6:	f005 f9a3 	bl	8005d20 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x1ca>
 80009dc:	20000118 	.word	0x20000118
 80009e0:	08009284 	.word	0x08009284
 80009e4:	080015f5 	.word	0x080015f5
 80009e8:	20000114 	.word	0x20000114
 80009ec:	08009290 	.word	0x08009290
 80009f0:	08001cfd 	.word	0x08001cfd
 80009f4:	2000011c 	.word	0x2000011c
 80009f8:	0800929c 	.word	0x0800929c
 80009fc:	08001cbd 	.word	0x08001cbd
 8000a00:	20000120 	.word	0x20000120
 8000a04:	080092a8 	.word	0x080092a8
 8000a08:	080016dd 	.word	0x080016dd
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	080092b4 	.word	0x080092b4
 8000a14:	08001851 	.word	0x08001851
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	2000012c 	.word	0x2000012c
 8000a20:	08000eb5 	.word	0x08000eb5
 8000a24:	080092c0 	.word	0x080092c0
 8000a28:	20000130 	.word	0x20000130
 8000a2c:	08000ea1 	.word	0x08000ea1
 8000a30:	080092cc 	.word	0x080092cc
 8000a34:	20000140 	.word	0x20000140
 8000a38:	20000144 	.word	0x20000144
 8000a3c:	200000d0 	.word	0x200000d0

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b098      	sub	sp, #96	; 0x60
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 faa8 	bl	8007fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <SystemClock_Config+0x100>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <SystemClock_Config+0x100>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <SystemClock_Config+0x100>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ac6:	2332      	movs	r3, #50	; 0x32
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd34 	bl	8002544 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ae2:	f000 fa75 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 ff95 	bl	8002a34 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b10:	f000 fa5e 	bl	8000fd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 f9d8 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b2e:	f000 fa4f 	bl	8000fd0 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3760      	adds	r7, #96	; 0x60
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <MX_RTC_Init+0x48>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b56:	227f      	movs	r2, #127	; 0x7f
 8000b58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b74:	f002 fa92 	bl	800309c <HAL_RTC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b7e:	f000 fa27 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000b0 	.word	0x200000b0
 8000b8c:	40002800 	.word	0x40002800

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_USART2_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f003 f814 	bl	8003bf4 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f9fd 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4ba2      	ldr	r3, [pc, #648]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4aa1      	ldr	r2, [pc, #644]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b9f      	ldr	r3, [pc, #636]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b9b      	ldr	r3, [pc, #620]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a9a      	ldr	r2, [pc, #616]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b98      	ldr	r3, [pc, #608]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b94      	ldr	r3, [pc, #592]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a93      	ldr	r2, [pc, #588]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b8d      	ldr	r3, [pc, #564]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a8c      	ldr	r2, [pc, #560]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a85      	ldr	r2, [pc, #532]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a7e      	ldr	r2, [pc, #504]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4879      	ldr	r0, [pc, #484]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000ca8:	f001 fc32 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4877      	ldr	r0, [pc, #476]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000cb2:	f001 fc2d 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cbc:	4875      	ldr	r0, [pc, #468]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000cbe:	f001 fc27 	bl	8002510 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	486c      	ldr	r0, [pc, #432]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000cda:	f001 fa7d 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4866      	ldr	r0, [pc, #408]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000cf6:	f001 fa6f 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	485e      	ldr	r0, [pc, #376]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000d16:	f001 fa5f 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485a      	ldr	r0, [pc, #360]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d30:	f001 fa52 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d44:	2306      	movs	r3, #6
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4852      	ldr	r0, [pc, #328]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d50:	f001 fa42 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d54:	23e0      	movs	r3, #224	; 0xe0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d64:	2305      	movs	r3, #5
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	484a      	ldr	r0, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d70:	f001 fa32 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d74:	2304      	movs	r3, #4
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4845      	ldr	r0, [pc, #276]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000d88:	f001 fa26 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	483c      	ldr	r0, [pc, #240]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000daa:	f001 fa15 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dae:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000db2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4833      	ldr	r0, [pc, #204]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000dc8:	f001 fa06 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dcc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dde:	2306      	movs	r3, #6
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4829      	ldr	r0, [pc, #164]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000dea:	f001 f9f5 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e04:	f001 f9e8 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e26:	f001 f9d7 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000e3e:	f001 f9cb 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e54:	2304      	movs	r3, #4
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000e60:	f001 f9ba 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000e7a:	f001 f9ad 	bl	80021d8 <HAL_GPIO_Init>

}
 8000e7e:	bf00      	nop
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000ea8:	f000 f898 	bl	8000fdc <show_time_date_itm>

}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f006 fbfe 	bl	80076be <pvTimerGetTimerID>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d816      	bhi.n	8000efc <led_effect_callback+0x48>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <led_effect_callback+0x20>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000eeb 	.word	0x08000eeb
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000ef7 	.word	0x08000ef7
	 {
	 case 1 :
		 LED_effect1();
 8000ee4:	f7ff fc38 	bl	8000758 <LED_effect1>
		 break;
 8000ee8:	e008      	b.n	8000efc <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000eea:	f7ff fc4b 	bl	8000784 <LED_effect2>
		 break;
 8000eee:	e005      	b.n	8000efc <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ef0:	f7ff fc5e 	bl	80007b0 <LED_effect3>
		 break;
 8000ef4:	e002      	b.n	8000efc <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000ef6:	f7ff fc73 	bl	80007e0 <LED_effect4>
	 }


}
 8000efa:	e7ff      	b.n	8000efc <led_effect_callback+0x48>
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e002      	b.n	8000f18 <HAL_UART_RxCpltCallback+0x14>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f1e:	d3f8      	bcc.n	8000f12 <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fce8 	bl	80058fa <xQueueIsQueueFullFromISR>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d107      	bne.n	8000f40 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	4919      	ldr	r1, [pc, #100]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f3a:	f004 f987 	bl	800524c <xQueueGenericSendFromISR>
 8000f3e:	e013      	b.n	8000f68 <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d10e      	bne.n	8000f68 <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f107 010b 	add.w	r1, r7, #11
 8000f52:	2200      	movs	r2, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fb0b 	bl	8005570 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2200      	movs	r2, #0
 8000f62:	490f      	ldr	r1, [pc, #60]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f64:	f004 f972 	bl	800524c <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	d10a      	bne.n	8000f88 <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_UART_RxCpltCallback+0xa0>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	f005 fe6a 	bl	8006c5c <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <HAL_UART_RxCpltCallback+0xa4>)
 8000f8e:	f002 ff10 	bl	8003db2 <HAL_UART_Receive_IT>


}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	20000144 	.word	0x20000144
 8000fa4:	20000114 	.word	0x20000114
 8000fa8:	200000d0 	.word	0x200000d0

08000fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fbe:	f000 ff77 	bl	8001eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40001000 	.word	0x40001000

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 ffda 	bl	8007fa4 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2214      	movs	r2, #20
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 ffd4 	bl	8007fa4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <show_time_date_itm+0x7c>)
 8001004:	f002 f95a 	bl	80032bc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <show_time_date_itm+0x7c>)
 8001012:	f002 fa35 	bl	8003480 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <show_time_date_itm+0x44>
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <show_time_date_itm+0x80>)
 800101e:	e000      	b.n	8001022 <show_time_date_itm+0x46>
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <show_time_date_itm+0x84>)
 8001022:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	461a      	mov	r2, r3
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	4618      	mov	r0, r3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <show_time_date_itm+0x88>)
 8001038:	f006 ffbc 	bl	8007fb4 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 800103c:	7e7b      	ldrb	r3, [r7, #25]
 800103e:	4619      	mov	r1, r3
 8001040:	7ebb      	ldrb	r3, [r7, #26]
 8001042:	461a      	mov	r2, r3
 8001044:	7efb      	ldrb	r3, [r7, #27]
 8001046:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <show_time_date_itm+0x8c>)
 800104c:	f006 ffb2 	bl	8007fb4 <iprintf>

 }
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000b0 	.word	0x200000b0
 800105c:	080092e0 	.word	0x080092e0
 8001060:	080092e4 	.word	0x080092e4
 8001064:	080092e8 	.word	0x080092e8
 8001068:	080092fc 	.word	0x080092fc

0800106c <show_time_date>:

void show_time_date(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2204      	movs	r2, #4
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f006 ff92 	bl	8007fa4 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2214      	movs	r2, #20
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f006 ff8c 	bl	8007fa4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4821      	ldr	r0, [pc, #132]	; (8001118 <show_time_date+0xac>)
 8001094:	f002 f912 	bl	80032bc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	481d      	ldr	r0, [pc, #116]	; (8001118 <show_time_date+0xac>)
 80010a2:	f002 f9ed 	bl	8003480 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <show_time_date+0x44>
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <show_time_date+0xb0>)
 80010ae:	e000      	b.n	80010b2 <show_time_date+0x46>
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <show_time_date+0xb4>)
 80010b2:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	461a      	mov	r2, r3
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	9101      	str	r1, [sp, #4]
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <show_time_date+0xb8>)
 80010cc:	4916      	ldr	r1, [pc, #88]	; (8001128 <show_time_date+0xbc>)
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <show_time_date+0xc0>)
 80010d0:	f006 ff88 	bl	8007fe4 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <show_time_date+0xc4>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010de:	4915      	ldr	r1, [pc, #84]	; (8001134 <show_time_date+0xc8>)
 80010e0:	f003 ffb6 	bl	8005050 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010e4:	7e7b      	ldrb	r3, [r7, #25]
 80010e6:	461a      	mov	r2, r3
 80010e8:	7ebb      	ldrb	r3, [r7, #26]
 80010ea:	4619      	mov	r1, r3
 80010ec:	7efb      	ldrb	r3, [r7, #27]
 80010ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	460b      	mov	r3, r1
 80010f6:	4910      	ldr	r1, [pc, #64]	; (8001138 <show_time_date+0xcc>)
 80010f8:	4810      	ldr	r0, [pc, #64]	; (800113c <show_time_date+0xd0>)
 80010fa:	f006 ff73 	bl	8007fe4 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <show_time_date+0xc4>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <show_time_date+0xd4>)
 800110a:	f003 ffa1 	bl	8005050 <xQueueGenericSend>
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b0 	.word	0x200000b0
 800111c:	080092e0 	.word	0x080092e0
 8001120:	080092e4 	.word	0x080092e4
 8001124:	0800930c 	.word	0x0800930c
 8001128:	08009320 	.word	0x08009320
 800112c:	20000148 	.word	0x20000148
 8001130:	2000012c 	.word	0x2000012c
 8001134:	20000008 	.word	0x20000008
 8001138:	080092fc 	.word	0x080092fc
 800113c:	20000170 	.word	0x20000170
 8001140:	2000000c 	.word	0x2000000c

08001144 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <rtc_configure_time+0x2c>)
 8001164:	f002 f810 	bl	8003188 <HAL_RTC_SetTime>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000b0 	.word	0x200000b0

08001174 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <rtc_configure_date+0x1c>)
 8001182:	f002 f8f9 	bl	8003378 <HAL_RTC_SetDate>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000b0 	.word	0x200000b0

08001194 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	if(time){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00d      	beq.n	80011c0 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	d807      	bhi.n	80011bc <validate_rtc_information+0x28>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	2b3b      	cmp	r3, #59	; 0x3b
 80011b2:	d803      	bhi.n	80011bc <validate_rtc_information+0x28>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	789b      	ldrb	r3, [r3, #2]
 80011b8:	2b3b      	cmp	r3, #59	; 0x3b
 80011ba:	d901      	bls.n	80011c0 <validate_rtc_information+0x2c>
			return 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	e015      	b.n	80011ec <validate_rtc_information+0x58>
	}

	if(date){
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d011      	beq.n	80011ea <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	2b1f      	cmp	r3, #31
 80011cc:	d80b      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d807      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	78db      	ldrb	r3, [r3, #3]
 80011da:	2b63      	cmp	r3, #99	; 0x63
 80011dc:	d803      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d901      	bls.n	80011ea <validate_rtc_information+0x56>
			return 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <validate_rtc_information+0x58>
	}

	return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_RTC_MspInit+0x4c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d111      	bne.n	800128c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800126c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001270:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fe2e 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001282:	f7ff fea5 	bl	8000fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_RTC_MspInit+0x50>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40002800 	.word	0x40002800
 8001298:	42470e3c 	.word	0x42470e3c

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_UART_MspInit+0x94>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d133      	bne.n	8001326 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001306:	2307      	movs	r3, #7
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_UART_MspInit+0x9c>)
 8001312:	f000 ff61 	bl	80021d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2106      	movs	r1, #6
 800131a:	2026      	movs	r0, #38	; 0x26
 800131c:	f000 fea0 	bl	8002060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001320:	2026      	movs	r0, #38	; 0x26
 8001322:	f000 feb9 	bl	8002098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40004400 	.word	0x40004400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4b33      	ldr	r3, [pc, #204]	; (8001420 <HAL_InitTick+0xe4>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a32      	ldr	r2, [pc, #200]	; (8001420 <HAL_InitTick+0xe4>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_InitTick+0xe4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001368:	f107 0210 	add.w	r2, r7, #16
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fd7e 	bl	8002e74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001382:	f001 fd4f 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8001386:	6378      	str	r0, [r7, #52]	; 0x34
 8001388:	e004      	b.n	8001394 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800138a:	f001 fd4b 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 800138e:	4603      	mov	r3, r0
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <HAL_InitTick+0xe8>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9b      	lsrs	r3, r3, #18
 800139e:	3b01      	subs	r3, #1
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_InitTick+0xec>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <HAL_InitTick+0xf0>)
 80013a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_InitTick+0xec>)
 80013aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_InitTick+0xec>)
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_InitTick+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_InitTick+0xec>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_InitTick+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <HAL_InitTick+0xec>)
 80013ca:	f002 f965 	bl	8003698 <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d11b      	bne.n	8001414 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013dc:	4812      	ldr	r0, [pc, #72]	; (8001428 <HAL_InitTick+0xec>)
 80013de:	f002 f9b5 	bl	800374c <HAL_TIM_Base_Start_IT>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d111      	bne.n	8001414 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f0:	2036      	movs	r0, #54	; 0x36
 80013f2:	f000 fe51 	bl	8002098 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d808      	bhi.n	800140e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	2036      	movs	r0, #54	; 0x36
 8001402:	f000 fe2d 	bl	8002060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_InitTick+0xf4>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e002      	b.n	8001414 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001418:	4618      	mov	r0, r3
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	431bde83 	.word	0x431bde83
 8001428:	20000198 	.word	0x20000198
 800142c:	40001000 	.word	0x40001000
 8001430:	20000018 	.word	0x20000018

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <USART2_IRQHandler+0x10>)
 8001466:	f002 fcd5 	bl	8003e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000d0 	.word	0x200000d0

08001474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM6_DAC_IRQHandler+0x10>)
 800147a:	f002 f9d7 	bl	800382c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000198 	.word	0x20000198

08001488 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e00a      	b.n	80014b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800149a:	f3af 8000 	nop.w
 800149e:	4601      	mov	r1, r0
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	60ba      	str	r2, [r7, #8]
 80014a6:	b2ca      	uxtb	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf0      	blt.n	800149a <_read+0x12>
  }

  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e009      	b.n	80014e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf1      	blt.n	80014d4 <_write+0x12>
  }
  return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_close>:

int _close(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001522:	605a      	str	r2, [r3, #4]
  return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_isatty>:

int _isatty(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f006 fcce 	bl	8007f34 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20020000 	.word	0x20020000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	200001e0 	.word	0x200001e0
 80015cc:	20012fa0 	.word	0x20012fa0

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <menu_task+0xd0>)
 80015fe:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <menu_task+0xd4>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f107 0108 	add.w	r1, r7, #8
 8001608:	2300      	movs	r3, #0
 800160a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800160e:	f003 fd1f 	bl	8005050 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2000      	movs	r0, #0
 8001622:	f005 f979 	bl	8006918 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d133      	bne.n	800169a <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3b30      	subs	r3, #48	; 0x30
 8001638:	613b      	str	r3, [r7, #16]
			switch(option)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d035      	beq.n	80016ac <menu_task+0xb8>
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	2b02      	cmp	r3, #2
 8001644:	dc20      	bgt.n	8001688 <menu_task+0x94>
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <menu_task+0x60>
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d00d      	beq.n	800166e <menu_task+0x7a>
 8001652:	e019      	b.n	8001688 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <menu_task+0xd8>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <menu_task+0xdc>)
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	f005 f9d6 	bl	8006a18 <xTaskGenericNotify>
					break;
 800166c:	e01f      	b.n	80016ae <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <menu_task+0xd8>)
 8001670:	2202      	movs	r2, #2
 8001672:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <menu_task+0xe0>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	f005 f9c9 	bl	8006a18 <xTaskGenericNotify>
					break;
 8001686:	e012      	b.n	80016ae <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <menu_task+0xd4>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001692:	4911      	ldr	r1, [pc, #68]	; (80016d8 <menu_task+0xe4>)
 8001694:	f003 fcdc 	bl	8005050 <xQueueGenericSend>
					continue;
 8001698:	e012      	b.n	80016c0 <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <menu_task+0xd4>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <menu_task+0xe4>)
 80016a6:	f003 fcd3 	bl	8005050 <xQueueGenericSend>
			continue;
 80016aa:	e009      	b.n	80016c0 <menu_task+0xcc>
					break;
 80016ac:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2000      	movs	r0, #0
 80016bc:	f005 f92c 	bl	8006918 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80016c0:	e79e      	b.n	8001600 <menu_task+0xc>
 80016c2:	bf00      	nop
 80016c4:	08009350 	.word	0x08009350
 80016c8:	2000012c 	.word	0x2000012c
 80016cc:	20000145 	.word	0x20000145
 80016d0:	20000120 	.word	0x20000120
 80016d4:	20000124 	.word	0x20000124
 80016d8:	20000014 	.word	0x20000014

080016dc <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80016e4:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <led_task+0x104>)
 80016e6:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2300      	movs	r3, #0
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2000      	movs	r0, #0
 80016f6:	f005 f90f 	bl	8006918 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <led_task+0x108>)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	f107 010c 	add.w	r1, r7, #12
 8001702:	2300      	movs	r3, #0
 8001704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001708:	f003 fca2 	bl	8005050 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2000      	movs	r0, #0
 800171c:	f005 f8fc 	bl	8006918 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d843      	bhi.n	80017b4 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	492e      	ldr	r1, [pc, #184]	; (80017e8 <led_task+0x10c>)
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fd4d 	bl	80001d0 <strcmp>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <led_task+0x66>
				led_effect_stop();
 800173c:	f7fe ff32 	bl	80005a4 <led_effect_stop>
 8001740:	e040      	b.n	80017c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	4929      	ldr	r1, [pc, #164]	; (80017ec <led_task+0x110>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd42 	bl	80001d0 <strcmp>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <led_task+0x7e>
				led_effect(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f7fe ff46 	bl	80005e4 <led_effect>
 8001758:	e034      	b.n	80017c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4924      	ldr	r1, [pc, #144]	; (80017f0 <led_task+0x114>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd36 	bl	80001d0 <strcmp>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d103      	bne.n	8001772 <led_task+0x96>
				led_effect(2);
 800176a:	2002      	movs	r0, #2
 800176c:	f7fe ff3a 	bl	80005e4 <led_effect>
 8001770:	e028      	b.n	80017c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	491f      	ldr	r1, [pc, #124]	; (80017f4 <led_task+0x118>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd2a 	bl	80001d0 <strcmp>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <led_task+0xae>
				led_effect(3);
 8001782:	2003      	movs	r0, #3
 8001784:	f7fe ff2e 	bl	80005e4 <led_effect>
 8001788:	e01c      	b.n	80017c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	491a      	ldr	r1, [pc, #104]	; (80017f8 <led_task+0x11c>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fd1e 	bl	80001d0 <strcmp>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <led_task+0xc6>
				led_effect(4);
 800179a:	2004      	movs	r0, #4
 800179c:	f7fe ff22 	bl	80005e4 <led_effect>
 80017a0:	e010      	b.n	80017c4 <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <led_task+0x108>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ac:	4913      	ldr	r1, [pc, #76]	; (80017fc <led_task+0x120>)
 80017ae:	f003 fc4f 	bl	8005050 <xQueueGenericSend>
 80017b2:	e007      	b.n	80017c4 <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <led_task+0x108>)
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017be:	490f      	ldr	r1, [pc, #60]	; (80017fc <led_task+0x120>)
 80017c0:	f003 fc46 	bl	8005050 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <led_task+0x124>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <led_task+0x128>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	f005 f91e 	bl	8006a18 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80017dc:	e784      	b.n	80016e8 <led_task+0xc>
 80017de:	bf00      	nop
 80017e0:	080093f8 	.word	0x080093f8
 80017e4:	2000012c 	.word	0x2000012c
 80017e8:	08009470 	.word	0x08009470
 80017ec:	08009478 	.word	0x08009478
 80017f0:	0800947c 	.word	0x0800947c
 80017f4:	08009480 	.word	0x08009480
 80017f8:	08009484 	.word	0x08009484
 80017fc:	20000014 	.word	0x20000014
 8001800:	20000145 	.word	0x20000145
 8001804:	20000118 	.word	0x20000118

08001808 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	dd0f      	ble.n	8001838 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3b30      	subs	r3, #48	; 0x30
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e003      	b.n	8001840 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	3b30      	subs	r3, #48	; 0x30
 800183e:	60fb      	str	r3, [r7, #12]

	return value;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	b2db      	uxtb	r3, r3

}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <rtc_task>:

void rtc_task(void *param)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b09b      	sub	sp, #108	; 0x6c
 8001854:	af02      	add	r7, sp, #8
 8001856:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001858:	4bb2      	ldr	r3, [pc, #712]	; (8001b24 <rtc_task+0x2d4>)
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 800185c:	4bb2      	ldr	r3, [pc, #712]	; (8001b28 <rtc_task+0x2d8>)
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001860:	4bb2      	ldr	r3, [pc, #712]	; (8001b2c <rtc_task+0x2dc>)
 8001862:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001864:	4bb2      	ldr	r3, [pc, #712]	; (8001b30 <rtc_task+0x2e0>)
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001868:	4bb2      	ldr	r3, [pc, #712]	; (8001b34 <rtc_task+0x2e4>)
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 800186c:	4bb2      	ldr	r3, [pc, #712]	; (8001b38 <rtc_task+0x2e8>)
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001870:	4bb2      	ldr	r3, [pc, #712]	; (8001b3c <rtc_task+0x2ec>)
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001874:	4bb2      	ldr	r3, [pc, #712]	; (8001b40 <rtc_task+0x2f0>)
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001878:	4bb2      	ldr	r3, [pc, #712]	; (8001b44 <rtc_task+0x2f4>)
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 800187c:	4bb2      	ldr	r3, [pc, #712]	; (8001b48 <rtc_task+0x2f8>)
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001880:	4bb2      	ldr	r3, [pc, #712]	; (8001b4c <rtc_task+0x2fc>)
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2300      	movs	r3, #0
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2000      	movs	r0, #0
 8001892:	f005 f841 	bl	8006918 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8001896:	4bae      	ldr	r3, [pc, #696]	; (8001b50 <rtc_task+0x300>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800189e:	2300      	movs	r3, #0
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a4:	f003 fbd4 	bl	8005050 <xQueueGenericSend>
		show_time_date();
 80018a8:	f7ff fbe0 	bl	800106c <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80018ac:	4ba8      	ldr	r3, [pc, #672]	; (8001b50 <rtc_task+0x300>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80018b4:	2300      	movs	r3, #0
 80018b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ba:	f003 fbc9 	bl	8005050 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 80018be:	bf00      	nop
 80018c0:	e1e1      	b.n	8001c86 <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ca:	9200      	str	r2, [sp, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f005 f821 	bl	8006918 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 80018da:	4b9e      	ldr	r3, [pc, #632]	; (8001b54 <rtc_task+0x304>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3b02      	subs	r3, #2
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	f200 81d0 	bhi.w	8001c86 <rtc_task+0x436>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <rtc_task+0x9c>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	080019af 	.word	0x080019af
 80018f4:	08001a9d 	.word	0x08001a9d
 80018f8:	08001c03 	.word	0x08001c03
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 80018fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d148      	bne.n	8001996 <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 8001904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3b30      	subs	r3, #48	; 0x30
 800190a:	653b      	str	r3, [r7, #80]	; 0x50
 800190c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800190e:	2b03      	cmp	r3, #3
 8001910:	d835      	bhi.n	800197e <rtc_task+0x12e>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <rtc_task+0xc8>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001929 	.word	0x08001929
 800191c:	08001943 	.word	0x08001943
 8001920:	0800195d 	.word	0x0800195d
 8001924:	08001977 	.word	0x08001977
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001928:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <rtc_task+0x304>)
 800192a:	2203      	movs	r2, #3
 800192c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 800192e:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <rtc_task+0x300>)
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001936:	2300      	movs	r3, #0
 8001938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800193c:	f003 fb88 	bl	8005050 <xQueueGenericSend>
							break;
 8001940:	e034      	b.n	80019ac <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 8001942:	4b84      	ldr	r3, [pc, #528]	; (8001b54 <rtc_task+0x304>)
 8001944:	2204      	movs	r2, #4
 8001946:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001948:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <rtc_task+0x300>)
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001950:	2300      	movs	r3, #0
 8001952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001956:	f003 fb7b 	bl	8005050 <xQueueGenericSend>
							break;
 800195a:	e027      	b.n	80019ac <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 800195c:	4b7d      	ldr	r3, [pc, #500]	; (8001b54 <rtc_task+0x304>)
 800195e:	2205      	movs	r2, #5
 8001960:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 8001962:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <rtc_task+0x300>)
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800196a:	2300      	movs	r3, #0
 800196c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001970:	f003 fb6e 	bl	8005050 <xQueueGenericSend>
							break;
 8001974:	e01a      	b.n	80019ac <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 8001976:	4b77      	ldr	r3, [pc, #476]	; (8001b54 <rtc_task+0x304>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
							break;
 800197c:	e016      	b.n	80019ac <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 800197e:	4b75      	ldr	r3, [pc, #468]	; (8001b54 <rtc_task+0x304>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001984:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <rtc_task+0x300>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800198e:	4972      	ldr	r1, [pc, #456]	; (8001b58 <rtc_task+0x308>)
 8001990:	f003 fb5e 	bl	8005050 <xQueueGenericSend>
 8001994:	e177      	b.n	8001c86 <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 8001996:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <rtc_task+0x304>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800199c:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <rtc_task+0x300>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a6:	496c      	ldr	r1, [pc, #432]	; (8001b58 <rtc_task+0x308>)
 80019a8:	f003 fb52 	bl	8005050 <xQueueGenericSend>
					}
					break;}
 80019ac:	e16b      	b.n	8001c86 <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 80019ae:	4b6b      	ldr	r3, [pc, #428]	; (8001b5c <rtc_task+0x30c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d03b      	beq.n	8001a2e <rtc_task+0x1de>
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	f300 8165 	bgt.w	8001c86 <rtc_task+0x436>
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <rtc_task+0x176>
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d01a      	beq.n	80019fa <rtc_task+0x1aa>
 80019c4:	e15f      	b.n	8001c86 <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 80019c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f7ff ff1a 	bl	8001808 <getnumber>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 80019da:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80019de:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 80019e0:	4b5e      	ldr	r3, [pc, #376]	; (8001b5c <rtc_task+0x30c>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 80019e6:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <rtc_task+0x300>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019ee:	2300      	movs	r3, #0
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f4:	f003 fb2c 	bl	8005050 <xQueueGenericSend>
								break;}
 80019f8:	e04f      	b.n	8001a9a <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 80019fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f7ff ff00 	bl	8001808 <getnumber>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 8001a0e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001a12:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <rtc_task+0x30c>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <rtc_task+0x300>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001a22:	2300      	movs	r3, #0
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a28:	f003 fb12 	bl	8005050 <xQueueGenericSend>
								break;}
 8001a2c:	e035      	b.n	8001a9a <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 8001a2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f7ff fee6 	bl	8001808 <getnumber>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001a42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a46:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fba0 	bl	8001194 <validate_rtc_information>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d110      	bne.n	8001a7c <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fb70 	bl	8001144 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <rtc_task+0x300>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a72:	f003 faed 	bl	8005050 <xQueueGenericSend>
									show_time_date();
 8001a76:	f7ff faf9 	bl	800106c <show_time_date>
 8001a7a:	e007      	b.n	8001a8c <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <rtc_task+0x300>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	2300      	movs	r3, #0
 8001a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a86:	4934      	ldr	r1, [pc, #208]	; (8001b58 <rtc_task+0x308>)
 8001a88:	f003 fae2 	bl	8005050 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <rtc_task+0x304>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <rtc_task+0x30c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
								break;}
 8001a98:	bf00      	nop
						}

					break;}
 8001a9a:	e0f4      	b.n	8001c86 <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <rtc_task+0x30c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	f200 80f0 	bhi.w	8001c86 <rtc_task+0x436>
 8001aa6:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <rtc_task+0x25c>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001abd 	.word	0x08001abd
 8001ab0:	08001af1 	.word	0x08001af1
 8001ab4:	08001b95 	.word	0x08001b95
 8001ab8:	08001b61 	.word	0x08001b61
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f7ff fe9f 	bl	8001808 <getnumber>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001ad0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001ad4:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <rtc_task+0x30c>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001adc:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <rtc_task+0x300>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aea:	f003 fab1 	bl	8005050 <xQueueGenericSend>
								break;}
 8001aee:	e087      	b.n	8001c00 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f7ff fe85 	bl	8001808 <getnumber>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001b04:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001b08:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <rtc_task+0x30c>)
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <rtc_task+0x300>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b1e:	f003 fa97 	bl	8005050 <xQueueGenericSend>
								break;}
 8001b22:	e06d      	b.n	8001c00 <rtc_task+0x3b0>
 8001b24:	08009488 	.word	0x08009488
 8001b28:	080094d4 	.word	0x080094d4
 8001b2c:	08009578 	.word	0x08009578
 8001b30:	0800958c 	.word	0x0800958c
 8001b34:	080095a4 	.word	0x080095a4
 8001b38:	080095bc 	.word	0x080095bc
 8001b3c:	080095d0 	.word	0x080095d0
 8001b40:	080095e4 	.word	0x080095e4
 8001b44:	080095fc 	.word	0x080095fc
 8001b48:	08009610 	.word	0x08009610
 8001b4c:	0800962c 	.word	0x0800962c
 8001b50:	2000012c 	.word	0x2000012c
 8001b54:	20000145 	.word	0x20000145
 8001b58:	20000014 	.word	0x20000014
 8001b5c:	200001e4 	.word	0x200001e4
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7ff fe4d 	bl	8001808 <getnumber>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001b74:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b78:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001b7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ca4 <rtc_task+0x454>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001b80:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <rtc_task+0x458>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b8e:	f003 fa5f 	bl	8005050 <xQueueGenericSend>
								break;}
 8001b92:	e035      	b.n	8001c00 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff fe33 	bl	8001808 <getnumber>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001ba8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001bac:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff faed 	bl	8001194 <validate_rtc_information>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d110      	bne.n	8001be2 <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fad5 	bl	8001174 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <rtc_task+0x458>)
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd8:	f003 fa3a 	bl	8005050 <xQueueGenericSend>
									show_time_date();
 8001bdc:	f7ff fa46 	bl	800106c <show_time_date>
 8001be0:	e007      	b.n	8001bf2 <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <rtc_task+0x458>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bec:	492f      	ldr	r1, [pc, #188]	; (8001cac <rtc_task+0x45c>)
 8001bee:	f003 fa2f 	bl	8005050 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <rtc_task+0x460>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <rtc_task+0x454>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
								break;}
 8001bfe:	bf00      	nop
						}


					break;}
 8001c00:	e041      	b.n	8001c86 <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d131      	bne.n	8001c6e <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b79      	cmp	r3, #121	; 0x79
 8001c10:	d115      	bne.n	8001c3e <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001c12:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <rtc_task+0x464>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f005 fd28 	bl	800766c <xTimerIsTimerActive>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d12d      	bne.n	8001c7e <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <rtc_task+0x464>)
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	f004 f9d7 	bl	8005fd8 <xTaskGetTickCount>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	2101      	movs	r1, #1
 8001c36:	4620      	mov	r0, r4
 8001c38:	f005 fa78 	bl	800712c <xTimerGenericCommand>
 8001c3c:	e01f      	b.n	8001c7e <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b6e      	cmp	r3, #110	; 0x6e
 8001c44:	d10a      	bne.n	8001c5c <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <rtc_task+0x464>)
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2300      	movs	r3, #0
 8001c52:	2200      	movs	r2, #0
 8001c54:	2103      	movs	r1, #3
 8001c56:	f005 fa69 	bl	800712c <xTimerGenericCommand>
 8001c5a:	e010      	b.n	8001c7e <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <rtc_task+0x458>)
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c66:	4911      	ldr	r1, [pc, #68]	; (8001cac <rtc_task+0x45c>)
 8001c68:	f003 f9f2 	bl	8005050 <xQueueGenericSend>
 8001c6c:	e007      	b.n	8001c7e <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <rtc_task+0x458>)
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c78:	490c      	ldr	r1, [pc, #48]	; (8001cac <rtc_task+0x45c>)
 8001c7a:	f003 f9e9 	bl	8005050 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <rtc_task+0x460>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
					break;}
 8001c84:	bf00      	nop
		while(curr_state != sMainMenu){
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <rtc_task+0x460>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f47f ae19 	bne.w	80018c2 <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <rtc_task+0x468>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f004 febb 	bl	8006a18 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001ca2:	e5ef      	b.n	8001884 <rtc_task+0x34>
 8001ca4:	200001e4 	.word	0x200001e4
 8001ca8:	2000012c 	.word	0x2000012c
 8001cac:	20000014 	.word	0x20000014
 8001cb0:	20000145 	.word	0x20000145
 8001cb4:	20000140 	.word	0x20000140
 8001cb8:	20000118 	.word	0x20000118

08001cbc <print_task>:
}



void print_task(void *param)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <print_task+0x38>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f107 010c 	add.w	r1, r7, #12
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fb6d 	bl	80053b0 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001cd6:	68fc      	ldr	r4, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fa82 	bl	80001e4 <strlen>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <print_task+0x3c>)
 8001cec:	f001 ffcf 	bl	8003c8e <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001cf0:	e7e8      	b.n	8001cc4 <print_task+0x8>
 8001cf2:	bf00      	nop
 8001cf4:	2000012c 	.word	0x2000012c
 8001cf8:	200000d0 	.word	0x200000d0

08001cfc <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2000      	movs	r0, #0
 8001d12:	f004 fe01 	bl	8006918 <xTaskGenericNotifyWait>
 8001d16:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d1f2      	bne.n	8001d04 <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f802 	bl	8001d2c <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001d28:	e7ec      	b.n	8001d04 <cmd_handler_task+0x8>
	...

08001d2c <process_command>:

}


void process_command(command_t *cmd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f835 	bl	8001da4 <extract_command>

	switch(curr_state)
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <process_command+0x68>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	dc24      	bgt.n	8001d8c <process_command+0x60>
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	da18      	bge.n	8001d78 <process_command+0x4c>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <process_command+0x24>
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d00a      	beq.n	8001d64 <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001d4e:	e01d      	b.n	8001d8c <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <process_command+0x6c>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	f004 fe5b 	bl	8006a18 <xTaskGenericNotify>
		break;
 8001d62:	e013      	b.n	8001d8c <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <process_command+0x70>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2303      	movs	r3, #3
 8001d70:	2100      	movs	r1, #0
 8001d72:	f004 fe51 	bl	8006a18 <xTaskGenericNotify>
		break;
 8001d76:	e009      	b.n	8001d8c <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <process_command+0x74>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2303      	movs	r3, #3
 8001d84:	2100      	movs	r1, #0
 8001d86:	f004 fe47 	bl	8006a18 <xTaskGenericNotify>
		break;
 8001d8a:	bf00      	nop
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000145 	.word	0x20000145
 8001d98:	20000118 	.word	0x20000118
 8001d9c:	20000120 	.word	0x20000120
 8001da0:	20000124 	.word	0x20000124

08001da4 <extract_command>:


int extract_command(command_t *cmd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <extract_command+0x70>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fc74 	bl	800569e <uxQueueMessagesWaiting>
 8001db6:	4603      	mov	r3, r0
 8001db8:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <extract_command+0x22>
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc4:	e022      	b.n	8001e0c <extract_command+0x68>
	uint8_t i =0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <extract_command+0x70>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f107 010f 	add.w	r1, r7, #15
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 faeb 	bl	80053b0 <xQueueReceive>
 8001dda:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d106      	bne.n	8001df0 <extract_command+0x4c>
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	75fa      	strb	r2, [r7, #23]
 8001de8:	461a      	mov	r2, r3
 8001dea:	7bf9      	ldrb	r1, [r7, #15]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b0a      	cmp	r3, #10
 8001df4:	d1e9      	bne.n	8001dca <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60da      	str	r2, [r3, #12]

	return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000128 	.word	0x20000128

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1e:	490e      	ldr	r1, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e34:	4c0b      	ldr	r4, [pc, #44]	; (8001e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e42:	f7ff fbc5 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f006 f87b 	bl	8007f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7fe fce1 	bl	8000810 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001e5c:	08009728 	.word	0x08009728
  ldr r2, =_sbss
 8001e60:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001e64:	20012fa0 	.word	0x20012fa0

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_Init+0x40>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_Init+0x40>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_Init+0x40>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f8d8 	bl	800204a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fa4e 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff f9aa 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000001c 	.word	0x2000001c
 8001ed4:	200001e8 	.word	0x200001e8

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	200001e8 	.word	0x200001e8

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <__NVIC_EnableIRQ+0x38>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
         );
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff4c 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002072:	f7ff ff61 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 8002076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	6978      	ldr	r0, [r7, #20]
 800207e:	f7ff ffb1 	bl	8001fe4 <NVIC_EncodePriority>
 8002082:	4602      	mov	r2, r0
 8002084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff80 	bl	8001f90 <__NVIC_SetPriority>
}
 8002090:	bf00      	nop
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff54 	bl	8001f54 <__NVIC_EnableIRQ>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020c2:	f7ff ff09 	bl	8001ed8 <HAL_GetTick>
 80020c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d008      	beq.n	80020e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e052      	b.n	800218c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0216 	bic.w	r2, r2, #22
 80020f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002104:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <HAL_DMA_Abort+0x62>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0208 	bic.w	r2, r2, #8
 8002124:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002136:	e013      	b.n	8002160 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002138:	f7ff fece 	bl	8001ed8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b05      	cmp	r3, #5
 8002144:	d90c      	bls.n	8002160 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e015      	b.n	800218c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1e4      	bne.n	8002138 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	223f      	movs	r2, #63	; 0x3f
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d004      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00c      	b.n	80021cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2205      	movs	r2, #5
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e16b      	b.n	80024cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 815a 	bne.w	80024c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d005      	beq.n	800222a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	2b02      	cmp	r3, #2
 8002228:	d130      	bne.n	800228c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b03      	cmp	r3, #3
 8002296:	d017      	beq.n	80022c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80b4 	beq.w	80024c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b60      	ldr	r3, [pc, #384]	; (80024e4 <HAL_GPIO_Init+0x30c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a5f      	ldr	r2, [pc, #380]	; (80024e4 <HAL_GPIO_Init+0x30c>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <HAL_GPIO_Init+0x30c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237a:	4a5b      	ldr	r2, [pc, #364]	; (80024e8 <HAL_GPIO_Init+0x310>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <HAL_GPIO_Init+0x314>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02b      	beq.n	80023fe <HAL_GPIO_Init+0x226>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a51      	ldr	r2, [pc, #324]	; (80024f0 <HAL_GPIO_Init+0x318>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x222>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a50      	ldr	r2, [pc, #320]	; (80024f4 <HAL_GPIO_Init+0x31c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x21e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_GPIO_Init+0x320>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x21a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4e      	ldr	r2, [pc, #312]	; (80024fc <HAL_GPIO_Init+0x324>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x216>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4d      	ldr	r2, [pc, #308]	; (8002500 <HAL_GPIO_Init+0x328>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x212>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_GPIO_Init+0x32c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x20e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_GPIO_Init+0x330>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x20a>
 80023de:	2307      	movs	r3, #7
 80023e0:	e00e      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023e2:	2308      	movs	r3, #8
 80023e4:	e00c      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023e6:	2306      	movs	r3, #6
 80023e8:	e00a      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023ea:	2305      	movs	r3, #5
 80023ec:	e008      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023ee:	2304      	movs	r3, #4
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e004      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x228>
 80023fe:	2300      	movs	r3, #0
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4093      	lsls	r3, r2
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002410:	4935      	ldr	r1, [pc, #212]	; (80024e8 <HAL_GPIO_Init+0x310>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_GPIO_Init+0x334>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002442:	4a32      	ldr	r2, [pc, #200]	; (800250c <HAL_GPIO_Init+0x334>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_GPIO_Init+0x334>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_GPIO_Init+0x334>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_GPIO_Init+0x334>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_GPIO_Init+0x334>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_GPIO_Init+0x334>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_GPIO_Init+0x334>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3301      	adds	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	f67f ae90 	bls.w	80021f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020c00 	.word	0x40020c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40021400 	.word	0x40021400
 8002504:	40021800 	.word	0x40021800
 8002508:	40021c00 	.word	0x40021c00
 800250c:	40013c00 	.word	0x40013c00

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800252c:	e003      	b.n	8002536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	041a      	lsls	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e267      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d075      	beq.n	800264e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002562:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d00c      	beq.n	8002588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256e:	4b85      	ldr	r3, [pc, #532]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	2b08      	cmp	r3, #8
 8002578:	d112      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257a:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002586:	d10b      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	4b7e      	ldr	r3, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05b      	beq.n	800264c <HAL_RCC_OscConfig+0x108>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d157      	bne.n	800264c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e242      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a8:	d106      	bne.n	80025b8 <HAL_RCC_OscConfig+0x74>
 80025aa:	4b76      	ldr	r3, [pc, #472]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a75      	ldr	r2, [pc, #468]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e01d      	b.n	80025f4 <HAL_RCC_OscConfig+0xb0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x98>
 80025c2:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6f      	ldr	r2, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6c      	ldr	r2, [pc, #432]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_OscConfig+0xb0>
 80025dc:	4b69      	ldr	r3, [pc, #420]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a68      	ldr	r2, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fc6c 	bl	8001ed8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7ff fc68 	bl	8001ed8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e207      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0xc0>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff fc58 	bl	8001ed8 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff fc54 	bl	8001ed8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1f3      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0xe8>
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d063      	beq.n	8002722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	2b08      	cmp	r3, #8
 8002670:	d11c      	bne.n	80026ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x152>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e1c7      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	e03a      	b.n	8002722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b4:	4b34      	ldr	r3, [pc, #208]	; (8002788 <HAL_RCC_OscConfig+0x244>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff fc0d 	bl	8001ed8 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c2:	f7ff fc09 	bl	8001ed8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1a8      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4925      	ldr	r1, [pc, #148]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
 80026f4:	e015      	b.n	8002722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCC_OscConfig+0x244>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7ff fbec 	bl	8001ed8 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002704:	f7ff fbe8 	bl	8001ed8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e187      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d036      	beq.n	800279c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_RCC_OscConfig+0x248>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7ff fbcc 	bl	8001ed8 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff fbc8 	bl	8001ed8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e167      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x200>
 8002762:	e01b      	b.n	800279c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x248>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff fbb5 	bl	8001ed8 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	e00e      	b.n	8002790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002772:	f7ff fbb1 	bl	8001ed8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d907      	bls.n	8002790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e150      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
 8002784:	40023800 	.word	0x40023800
 8002788:	42470000 	.word	0x42470000
 800278c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ea      	bne.n	8002772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8097 	beq.w	80028d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10f      	bne.n	80027da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a7c      	ldr	r2, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b7a      	ldr	r3, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b77      	ldr	r3, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e6:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7ff fb71 	bl	8001ed8 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7ff fb6d 	bl	8001ed8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e10c      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x2ea>
 8002820:	4b64      	ldr	r3, [pc, #400]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a63      	ldr	r2, [pc, #396]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
 800282c:	e01c      	b.n	8002868 <HAL_RCC_OscConfig+0x324>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b05      	cmp	r3, #5
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x30c>
 8002836:	4b5f      	ldr	r3, [pc, #380]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a5e      	ldr	r2, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a5b      	ldr	r2, [pc, #364]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0x324>
 8002850:	4b58      	ldr	r3, [pc, #352]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a57      	ldr	r2, [pc, #348]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
 800285c:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a54      	ldr	r2, [pc, #336]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d015      	beq.n	800289c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7ff fb32 	bl	8001ed8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7ff fb2e 	bl	8001ed8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0cb      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0ee      	beq.n	8002878 <HAL_RCC_OscConfig+0x334>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7ff fb1c 	bl	8001ed8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7ff fb18 	bl	8001ed8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0b5      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ee      	bne.n	80028a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a1 	beq.w	8002a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028e2:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d05c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d141      	bne.n	800297a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCC_OscConfig+0x478>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff faec 	bl	8001ed8 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7ff fae8 	bl	8001ed8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e087      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	019b      	lsls	r3, r3, #6
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	491b      	ldr	r1, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x478>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7ff fac1 	bl	8001ed8 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff fabd 	bl	8001ed8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e05c      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x416>
 8002978:	e054      	b.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x478>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff faaa 	bl	8001ed8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7ff faa6 	bl	8001ed8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e045      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x444>
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e038      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x4ec>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d028      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d121      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d11a      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d111      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0cc      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d90c      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0b8      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	494d      	ldr	r1, [pc, #308]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d044      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d119      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b02:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e067      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4934      	ldr	r1, [pc, #208]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b24:	f7ff f9d8 	bl	8001ed8 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7ff f9d4 	bl	8001ed8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e04f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 020c 	and.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1eb      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d20c      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e032      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4916      	ldr	r1, [pc, #88]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bba:	f000 f821 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	490a      	ldr	r1, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fbae 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023c00 	.word	0x40023c00
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	08009668 	.word	0x08009668
 8002bf8:	20000010 	.word	0x20000010
 8002bfc:	20000018 	.word	0x20000018

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c04:	b094      	sub	sp, #80	; 0x50
 8002c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c10:	2300      	movs	r3, #0
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c18:	4b79      	ldr	r3, [pc, #484]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d00d      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x40>
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	f200 80e1 	bhi.w	8002dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c32:	e0db      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b73      	ldr	r3, [pc, #460]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c38:	e0db      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c3a:	4b73      	ldr	r3, [pc, #460]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c3e:	e0d8      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c40:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4a:	4b6d      	ldr	r3, [pc, #436]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d063      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c56:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	099b      	lsrs	r3, r3, #6
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c72:	4622      	mov	r2, r4
 8002c74:	462b      	mov	r3, r5
 8002c76:	f04f 0000 	mov.w	r0, #0
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	0159      	lsls	r1, r3, #5
 8002c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c84:	0150      	lsls	r0, r2, #5
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	1a51      	subs	r1, r2, r1
 8002c8e:	6139      	str	r1, [r7, #16]
 8002c90:	4629      	mov	r1, r5
 8002c92:	eb63 0301 	sbc.w	r3, r3, r1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	018b      	lsls	r3, r1, #6
 8002ca8:	4651      	mov	r1, sl
 8002caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cae:	4651      	mov	r1, sl
 8002cb0:	018a      	lsls	r2, r1, #6
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb8:	4659      	mov	r1, fp
 8002cba:	eb63 0901 	sbc.w	r9, r3, r1
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd2:	4690      	mov	r8, r2
 8002cd4:	4699      	mov	r9, r3
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	eb18 0303 	adds.w	r3, r8, r3
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	462b      	mov	r3, r5
 8002ce0:	eb49 0303 	adc.w	r3, r9, r3
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	024b      	lsls	r3, r1, #9
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	024a      	lsls	r2, r1, #9
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d06:	2200      	movs	r2, #0
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d10:	f7fd fac6 	bl	80002a0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d1c:	e058      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	4611      	mov	r1, r2
 8002d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d38:	4642      	mov	r2, r8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	f04f 0000 	mov.w	r0, #0
 8002d40:	f04f 0100 	mov.w	r1, #0
 8002d44:	0159      	lsls	r1, r3, #5
 8002d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4a:	0150      	lsls	r0, r2, #5
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4641      	mov	r1, r8
 8002d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d56:	4649      	mov	r1, r9
 8002d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d70:	ebb2 040a 	subs.w	r4, r2, sl
 8002d74:	eb63 050b 	sbc.w	r5, r3, fp
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	00eb      	lsls	r3, r5, #3
 8002d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d86:	00e2      	lsls	r2, r4, #3
 8002d88:	4614      	mov	r4, r2
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	18e3      	adds	r3, r4, r3
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	464b      	mov	r3, r9
 8002d94:	eb45 0303 	adc.w	r3, r5, r3
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002da6:	4629      	mov	r1, r5
 8002da8:	028b      	lsls	r3, r1, #10
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db0:	4621      	mov	r1, r4
 8002db2:	028a      	lsls	r2, r1, #10
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	61fa      	str	r2, [r7, #28]
 8002dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc4:	f7fd fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3750      	adds	r7, #80	; 0x50
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	00f42400 	.word	0x00f42400
 8002e08:	007a1200 	.word	0x007a1200

08002e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000010 	.word	0x20000010

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08009678 	.word	0x08009678

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff ffdc 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0b5b      	lsrs	r3, r3, #13
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08009678 	.word	0x08009678

08002e74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	220f      	movs	r2, #15
 8002e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_RCC_GetClockConfig+0x60>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0207 	and.w	r2, r3, #7
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d035      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f00:	4b62      	ldr	r3, [pc, #392]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f06:	f7fe ffe7 	bl	8001ed8 <HAL_GetTick>
 8002f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f0e:	f7fe ffe3 	bl	8001ed8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0b0      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f20:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	019a      	lsls	r2, r3, #6
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	071b      	lsls	r3, r3, #28
 8002f38:	4955      	ldr	r1, [pc, #340]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f40:	4b52      	ldr	r3, [pc, #328]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f46:	f7fe ffc7 	bl	8001ed8 <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f4e:	f7fe ffc3 	bl	8001ed8 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e090      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f60:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8083 	beq.w	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a43      	ldr	r2, [pc, #268]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa2:	f7fe ff99 	bl	8001ed8 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe ff95 	bl	8001ed8 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e062      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02f      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d028      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff0:	4b29      	ldr	r3, [pc, #164]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ffc:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d114      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe ff63 	bl	8001ed8 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe ff5f 	bl	8001ed8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e02a      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ee      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003044:	d10d      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
 8003060:	e005      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003068:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800306c:	6093      	str	r3, [r2, #8]
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307a:	4905      	ldr	r1, [pc, #20]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800307c:	4313      	orrs	r3, r2
 800307e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	42470068 	.word	0x42470068
 8003090:	40023800 	.word	0x40023800
 8003094:	40007000 	.word	0x40007000
 8003098:	42470e40 	.word	0x42470e40

0800309c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e066      	b.n	8003180 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7f5b      	ldrb	r3, [r3, #29]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f8c0 	bl	8001248 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	22ca      	movs	r2, #202	; 0xca
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2253      	movs	r2, #83	; 0x53
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa45 	bl	800356e <RTC_EnterInitMode>
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d12c      	bne.n	8003148 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003100:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68d2      	ldr	r2, [r2, #12]
 8003128:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6919      	ldr	r1, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	041a      	lsls	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa4c 	bl	80035dc <RTC_ExitInitMode>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d113      	bne.n	8003176 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	22ff      	movs	r2, #255	; 0xff
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	7f1b      	ldrb	r3, [r3, #28]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_RTC_SetTime+0x1c>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e087      	b.n	80032b4 <HAL_RTC_SetTime+0x12c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2202      	movs	r2, #2
 80031ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d126      	bne.n	8003204 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2200      	movs	r2, #0
 80031c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa29 	bl	8003626 <RTC_ByteToBcd2>
 80031d4:	4603      	mov	r3, r0
 80031d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa22 	bl	8003626 <RTC_ByteToBcd2>
 80031e2:	4603      	mov	r3, r0
 80031e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	789b      	ldrb	r3, [r3, #2]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa1a 	bl	8003626 <RTC_ByteToBcd2>
 80031f2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	e018      	b.n	8003236 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2200      	movs	r2, #0
 8003216:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003224:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800322a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	78db      	ldrb	r3, [r3, #3]
 8003230:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	22ca      	movs	r2, #202	; 0xca
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2253      	movs	r2, #83	; 0x53
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f991 	bl	800356e <RTC_EnterInitMode>
 800324c:	4603      	mov	r3, r0
 800324e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d120      	bne.n	8003298 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003260:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003264:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003274:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9a4 	bl	80035dc <RTC_ExitInitMode>
 8003294:	4603      	mov	r3, r0
 8003296:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	771a      	strb	r2, [r3, #28]

  return status;
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}

080032bc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	0d9b      	lsrs	r3, r3, #22
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11a      	bne.n	800336e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f98f 	bl	8003660 <RTC_Bcd2ToByte>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f986 	bl	8003660 <RTC_Bcd2ToByte>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	789b      	ldrb	r3, [r3, #2]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f97d 	bl	8003660 <RTC_Bcd2ToByte>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	7f1b      	ldrb	r3, [r3, #28]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_RTC_SetDate+0x1c>
 8003390:	2302      	movs	r3, #2
 8003392:	e071      	b.n	8003478 <HAL_RTC_SetDate+0x100>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2202      	movs	r2, #2
 800339e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10e      	bne.n	80033c4 <HAL_RTC_SetDate+0x4c>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	f023 0310 	bic.w	r3, r3, #16
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	330a      	adds	r3, #10
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11c      	bne.n	8003404 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	78db      	ldrb	r3, [r3, #3]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f929 	bl	8003626 <RTC_ByteToBcd2>
 80033d4:	4603      	mov	r3, r0
 80033d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f922 	bl	8003626 <RTC_ByteToBcd2>
 80033e2:	4603      	mov	r3, r0
 80033e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	789b      	ldrb	r3, [r3, #2]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f91a 	bl	8003626 <RTC_ByteToBcd2>
 80033f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e00e      	b.n	8003422 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	78db      	ldrb	r3, [r3, #3]
 8003408:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003410:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003416:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	22ca      	movs	r2, #202	; 0xca
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2253      	movs	r2, #83	; 0x53
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f89b 	bl	800356e <RTC_EnterInitMode>
 8003438:	4603      	mov	r3, r0
 800343a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10c      	bne.n	800345c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800344c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003450:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8c2 	bl	80035dc <RTC_ExitInitMode>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	22ff      	movs	r2, #255	; 0xff
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	771a      	strb	r2, [r3, #28]

  return status;
 8003476:	7cfb      	ldrb	r3, [r7, #19]
}
 8003478:	4618      	mov	r0, r3
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}

08003480 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800349a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800349e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	0c1b      	lsrs	r3, r3, #16
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	0b5b      	lsrs	r3, r3, #13
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11a      	bne.n	8003514 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	78db      	ldrb	r3, [r3, #3]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f8bc 	bl	8003660 <RTC_Bcd2ToByte>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f8b3 	bl	8003660 <RTC_Bcd2ToByte>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	789b      	ldrb	r3, [r3, #2]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f8aa 	bl	8003660 <RTC_Bcd2ToByte>
 800350c:	4603      	mov	r3, r0
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003538:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800353a:	f7fe fccd 	bl	8001ed8 <HAL_GetTick>
 800353e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003540:	e009      	b.n	8003556 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003542:	f7fe fcc9 	bl	8001ed8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003550:	d901      	bls.n	8003556 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e007      	b.n	8003566 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ee      	beq.n	8003542 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d122      	bne.n	80035d2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800359a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800359c:	f7fe fc9c 	bl	8001ed8 <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035a2:	e00c      	b.n	80035be <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035a4:	f7fe fc98 	bl	8001ed8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b2:	d904      	bls.n	80035be <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2204      	movs	r2, #4
 80035b8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <RTC_EnterInitMode+0x64>
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d1e8      	bne.n	80035a4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ff89 	bl	800351e <HAL_RTC_WaitForSynchro>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003634:	e005      	b.n	8003642 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	3301      	adds	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	3b0a      	subs	r3, #10
 8003640:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	2b09      	cmp	r3, #9
 8003646:	d8f6      	bhi.n	8003636 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	b2da      	uxtb	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4313      	orrs	r3, r2
 8003652:	b2db      	uxtb	r3, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	4413      	add	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	b2da      	uxtb	r2, r3
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	4413      	add	r3, r2
 800368a:	b2db      	uxtb	r3, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e041      	b.n	800372e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f839 	bl	8003736 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 f9d8 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d001      	beq.n	8003764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e04e      	b.n	8003802 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a23      	ldr	r2, [pc, #140]	; (8003810 <HAL_TIM_Base_Start_IT+0xc4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d022      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d01d      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x80>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <HAL_TIM_Base_Start_IT+0xc8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d018      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x80>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_TIM_Base_Start_IT+0xcc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x80>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <HAL_TIM_Base_Start_IT+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x80>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_TIM_Base_Start_IT+0xd4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x80>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a19      	ldr	r2, [pc, #100]	; (8003824 <HAL_TIM_Base_Start_IT+0xd8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x80>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d111      	bne.n	80037f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d010      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	e007      	b.n	8003800 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	40000c00 	.word	0x40000c00
 8003820:	40010400 	.word	0x40010400
 8003824:	40014000 	.word	0x40014000
 8003828:	40001800 	.word	0x40001800

0800382c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0202 	mvn.w	r2, #2
 8003858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8ee 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8e0 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8f1 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0204 	mvn.w	r2, #4
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8c4 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8b6 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8c7 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0208 	mvn.w	r2, #8
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2204      	movs	r2, #4
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f89a 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f88c 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f89d 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b10      	cmp	r3, #16
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b10      	cmp	r3, #16
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0210 	mvn.w	r2, #16
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2208      	movs	r2, #8
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f870 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f862 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f873 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0201 	mvn.w	r2, #1
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fafe 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f902 	bl	8003be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f838 	bl	8003a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0220 	mvn.w	r2, #32
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8cc 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00f      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d027      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d023      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_Base_SetConfig+0x128>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <TIM_Base_SetConfig+0x12c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <TIM_Base_SetConfig+0x130>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <TIM_Base_SetConfig+0x134>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <TIM_Base_SetConfig+0x138>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <TIM_Base_SetConfig+0x13c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0xf8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	615a      	str	r2, [r3, #20]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40001800 	.word	0x40001800
 8003bc4:	40001c00 	.word	0x40001c00
 8003bc8:	40002000 	.word	0x40002000

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e03f      	b.n	8003c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fb3e 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fddf 	bl	80047fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b08a      	sub	sp, #40	; 0x28
 8003c92:	af02      	add	r7, sp, #8
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d17c      	bne.n	8003da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_UART_Transmit+0x2c>
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e075      	b.n	8003daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit+0x3e>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e06e      	b.n	8003daa <HAL_UART_Transmit+0x11c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2221      	movs	r2, #33	; 0x21
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce2:	f7fe f8f9 	bl	8001ed8 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d108      	bne.n	8003d10 <HAL_UART_Transmit+0x82>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e003      	b.n	8003d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d20:	e02a      	b.n	8003d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb1f 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e036      	b.n	8003daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	3302      	adds	r3, #2
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	e007      	b.n	8003d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	3301      	adds	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1cf      	bne.n	8003d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2140      	movs	r1, #64	; 0x40
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 faef 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e006      	b.n	8003daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d11d      	bne.n	8003e08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Receive_IT+0x26>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e016      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Receive_IT+0x38>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e00f      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fb24 	bl	800444c <UART_Start_Receive_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b0ba      	sub	sp, #232	; 0xe8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_UART_IRQHandler+0x66>
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fc07 	bl	8004686 <UART_Receive_IT>
      return;
 8003e78:	e256      	b.n	8004328 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80de 	beq.w	8004040 <HAL_UART_IRQHandler+0x22c>
 8003e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80d1 	beq.w	8004040 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xae>
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xd2>
 8003ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f043 0202 	orr.w	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_UART_IRQHandler+0xf6>
 8003ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0204 	orr.w	r2, r3, #4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d011      	beq.n	8003f3a <HAL_UART_IRQHandler+0x126>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0208 	orr.w	r2, r3, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 81ed 	beq.w	800431e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_UART_IRQHandler+0x14e>
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fb92 	bl	8004686 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <HAL_UART_IRQHandler+0x17a>
 8003f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d04f      	beq.n	800402e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa9a 	bl	80044c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	d141      	bne.n	8004026 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1d9      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d013      	beq.n	800401e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	4a7d      	ldr	r2, [pc, #500]	; (80041f0 <HAL_UART_IRQHandler+0x3dc>)
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe f8c6 	bl	8002194 <HAL_DMA_Abort_IT>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004018:	4610      	mov	r0, r2
 800401a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	e00e      	b.n	800403c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f990 	bl	8004344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004024:	e00a      	b.n	800403c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f98c 	bl	8004344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402c:	e006      	b.n	800403c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f988 	bl	8004344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800403a:	e170      	b.n	800431e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	bf00      	nop
    return;
 800403e:	e16e      	b.n	800431e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 814a 	bne.w	80042de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8143 	beq.w	80042de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 813c 	beq.w	80042de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	f040 80b4 	bne.w	80041f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004098:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8140 	beq.w	8004322 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040aa:	429a      	cmp	r2, r3
 80040ac:	f080 8139 	bcs.w	8004322 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c2:	f000 8088 	beq.w	80041d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800410a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1d9      	bne.n	80040c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004136:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800413a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800413e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e1      	bne.n	8004112 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800415e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004172:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004174:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004178:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e3      	bne.n	800414e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a6:	f023 0310 	bic.w	r3, r3, #16
 80041aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e3      	bne.n	8004194 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fd ff6f 	bl	80020b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041de:	b29b      	uxth	r3, r3
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8b6 	bl	8004358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ec:	e099      	b.n	8004322 <HAL_UART_IRQHandler+0x50e>
 80041ee:	bf00      	nop
 80041f0:	0800458f 	.word	0x0800458f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 808b 	beq.w	8004326 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8086 	beq.w	8004326 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800422a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800423e:	647a      	str	r2, [r7, #68]	; 0x44
 8004240:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800424c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e3      	bne.n	800421a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3314      	adds	r3, #20
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	623b      	str	r3, [r7, #32]
   return(result);
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3314      	adds	r3, #20
 8004272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004276:	633a      	str	r2, [r7, #48]	; 0x30
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800427c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e3      	bne.n	8004252 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0310 	bic.w	r3, r3, #16
 80042ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042bc:	61fa      	str	r2, [r7, #28]
 80042be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	69b9      	ldr	r1, [r7, #24]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e3      	bne.n	8004298 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f83e 	bl	8004358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042dc:	e023      	b.n	8004326 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_UART_IRQHandler+0x4ea>
 80042ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f95d 	bl	80045b6 <UART_Transmit_IT>
    return;
 80042fc:	e014      	b.n	8004328 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00e      	beq.n	8004328 <HAL_UART_IRQHandler+0x514>
 800430a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f99d 	bl	8004656 <UART_EndTransmit_IT>
    return;
 800431c:	e004      	b.n	8004328 <HAL_UART_IRQHandler+0x514>
    return;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_UART_IRQHandler+0x514>
      return;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_UART_IRQHandler+0x514>
      return;
 8004326:	bf00      	nop
  }
}
 8004328:	37e8      	adds	r7, #232	; 0xe8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop

08004330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b090      	sub	sp, #64	; 0x40
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e050      	b.n	8004424 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004388:	d04c      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800438a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004390:	f7fd fda2 	bl	8001ed8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800439c:	429a      	cmp	r2, r3
 800439e:	d241      	bcs.n	8004424 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043c0:	637a      	str	r2, [r7, #52]	; 0x34
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	613b      	str	r3, [r7, #16]
   return(result);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f4:	623a      	str	r2, [r7, #32]
 80043f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	69f9      	ldr	r1, [r7, #28]
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	61bb      	str	r3, [r7, #24]
   return(result);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e00f      	b.n	8004444 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	429a      	cmp	r2, r3
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	429a      	cmp	r2, r3
 8004440:	d09f      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3740      	adds	r7, #64	; 0x40
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2222      	movs	r2, #34	; 0x22
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004498:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0220 	orr.w	r2, r2, #32
 80044b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b095      	sub	sp, #84	; 0x54
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044f0:	643a      	str	r2, [r7, #64]	; 0x40
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	61fb      	str	r3, [r7, #28]
   return(result);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	64bb      	str	r3, [r7, #72]	; 0x48
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004524:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	2b01      	cmp	r3, #1
 800453e:	d119      	bne.n	8004574 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 0310 	bic.w	r3, r3, #16
 8004556:	647b      	str	r3, [r7, #68]	; 0x44
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004560:	61ba      	str	r2, [r7, #24]
 8004562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6979      	ldr	r1, [r7, #20]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	613b      	str	r3, [r7, #16]
   return(result);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e5      	bne.n	8004540 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004582:	bf00      	nop
 8004584:	3754      	adds	r7, #84	; 0x54
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff fecb 	bl	8004344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b21      	cmp	r3, #33	; 0x21
 80045c8:	d13e      	bne.n	8004648 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d114      	bne.n	80045fe <UART_Transmit_IT+0x48>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d110      	bne.n	80045fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]
 80045fc:	e008      	b.n	8004610 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	1c59      	adds	r1, r3, #1
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6211      	str	r1, [r2, #32]
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29b      	uxth	r3, r3
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4619      	mov	r1, r3
 800461e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10f      	bne.n	8004644 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004632:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004642:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe5a 	bl	8004330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b08c      	sub	sp, #48	; 0x30
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b22      	cmp	r3, #34	; 0x22
 8004698:	f040 80ab 	bne.w	80047f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d117      	bne.n	80046d6 <UART_Receive_IT+0x50>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d113      	bne.n	80046d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	1c9a      	adds	r2, r3, #2
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
 80046d4:	e026      	b.n	8004724 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e8:	d007      	beq.n	80046fa <UART_Receive_IT+0x74>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <UART_Receive_IT+0x82>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	e008      	b.n	800471a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004714:	b2da      	uxtb	r2, r3
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29b      	uxth	r3, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4619      	mov	r1, r3
 8004732:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004734:	2b00      	cmp	r3, #0
 8004736:	d15a      	bne.n	80047ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0220 	bic.w	r2, r2, #32
 8004746:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004756:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	2b01      	cmp	r3, #1
 8004776:	d135      	bne.n	80047e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	613b      	str	r3, [r7, #16]
   return(result);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f023 0310 	bic.w	r3, r3, #16
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	623a      	str	r2, [r7, #32]
 80047a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	69f9      	ldr	r1, [r7, #28]
 80047a4:	6a3a      	ldr	r2, [r7, #32]
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e5      	bne.n	800477e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d10a      	bne.n	80047d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fdbb 	bl	8004358 <HAL_UARTEx_RxEventCallback>
 80047e2:	e002      	b.n	80047ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc fb8d 	bl	8000f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	e002      	b.n	80047f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3730      	adds	r7, #48	; 0x30
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b0c0      	sub	sp, #256	; 0x100
 8004802:	af00      	add	r7, sp, #0
 8004804:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	68d9      	ldr	r1, [r3, #12]
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	ea40 0301 	orr.w	r3, r0, r1
 8004824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004854:	f021 010c 	bic.w	r1, r1, #12
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004862:	430b      	orrs	r3, r1
 8004864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	6999      	ldr	r1, [r3, #24]
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	ea40 0301 	orr.w	r3, r0, r1
 8004882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b8f      	ldr	r3, [pc, #572]	; (8004ac8 <UART_SetConfig+0x2cc>)
 800488c:	429a      	cmp	r2, r3
 800488e:	d005      	beq.n	800489c <UART_SetConfig+0xa0>
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b8d      	ldr	r3, [pc, #564]	; (8004acc <UART_SetConfig+0x2d0>)
 8004898:	429a      	cmp	r2, r3
 800489a:	d104      	bne.n	80048a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fe fad6 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 80048a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048a4:	e003      	b.n	80048ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048a6:	f7fe fabd 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 80048aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	f040 810c 	bne.w	8004ad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048ce:	4622      	mov	r2, r4
 80048d0:	462b      	mov	r3, r5
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80048d6:	415b      	adcs	r3, r3
 80048d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048de:	4621      	mov	r1, r4
 80048e0:	eb12 0801 	adds.w	r8, r2, r1
 80048e4:	4629      	mov	r1, r5
 80048e6:	eb43 0901 	adc.w	r9, r3, r1
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fe:	4690      	mov	r8, r2
 8004900:	4699      	mov	r9, r3
 8004902:	4623      	mov	r3, r4
 8004904:	eb18 0303 	adds.w	r3, r8, r3
 8004908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800490c:	462b      	mov	r3, r5
 800490e:	eb49 0303 	adc.w	r3, r9, r3
 8004912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004922:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800492a:	460b      	mov	r3, r1
 800492c:	18db      	adds	r3, r3, r3
 800492e:	653b      	str	r3, [r7, #80]	; 0x50
 8004930:	4613      	mov	r3, r2
 8004932:	eb42 0303 	adc.w	r3, r2, r3
 8004936:	657b      	str	r3, [r7, #84]	; 0x54
 8004938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800493c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004940:	f7fb fcae 	bl	80002a0 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <UART_SetConfig+0x2d4>)
 800494a:	fba3 2302 	umull	r2, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	011c      	lsls	r4, r3, #4
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800495c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	64b9      	str	r1, [r7, #72]	; 0x48
 800496c:	415b      	adcs	r3, r3
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004974:	4641      	mov	r1, r8
 8004976:	eb12 0a01 	adds.w	sl, r2, r1
 800497a:	4649      	mov	r1, r9
 800497c:	eb43 0b01 	adc.w	fp, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800498c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004994:	4692      	mov	sl, r2
 8004996:	469b      	mov	fp, r3
 8004998:	4643      	mov	r3, r8
 800499a:	eb1a 0303 	adds.w	r3, sl, r3
 800499e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049a2:	464b      	mov	r3, r9
 80049a4:	eb4b 0303 	adc.w	r3, fp, r3
 80049a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049c0:	460b      	mov	r3, r1
 80049c2:	18db      	adds	r3, r3, r3
 80049c4:	643b      	str	r3, [r7, #64]	; 0x40
 80049c6:	4613      	mov	r3, r2
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	647b      	str	r3, [r7, #68]	; 0x44
 80049ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049d6:	f7fb fc63 	bl	80002a0 <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <UART_SetConfig+0x2d4>)
 80049e2:	fba3 2301 	umull	r2, r3, r3, r1
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2264      	movs	r2, #100	; 0x64
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	1acb      	subs	r3, r1, r3
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049f6:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <UART_SetConfig+0x2d4>)
 80049f8:	fba3 2302 	umull	r2, r3, r3, r2
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a04:	441c      	add	r4, r3
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	1891      	adds	r1, r2, r2
 8004a1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a20:	415b      	adcs	r3, r3
 8004a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a28:	4641      	mov	r1, r8
 8004a2a:	1851      	adds	r1, r2, r1
 8004a2c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a2e:	4649      	mov	r1, r9
 8004a30:	414b      	adcs	r3, r1
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a40:	4659      	mov	r1, fp
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	00ca      	lsls	r2, r1, #3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	4642      	mov	r2, r8
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	460a      	mov	r2, r1
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a92:	f7fb fc05 	bl	80002a0 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <UART_SetConfig+0x2d4>)
 8004a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	2164      	movs	r1, #100	; 0x64
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	3332      	adds	r3, #50	; 0x32
 8004aae:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <UART_SetConfig+0x2d4>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f003 0207 	and.w	r2, r3, #7
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4422      	add	r2, r4
 8004ac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac4:	e105      	b.n	8004cd2 <UART_SetConfig+0x4d6>
 8004ac6:	bf00      	nop
 8004ac8:	40011000 	.word	0x40011000
 8004acc:	40011400 	.word	0x40011400
 8004ad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ade:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	464b      	mov	r3, r9
 8004aea:	1891      	adds	r1, r2, r2
 8004aec:	6239      	str	r1, [r7, #32]
 8004aee:	415b      	adcs	r3, r3
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
 8004af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004af6:	4641      	mov	r1, r8
 8004af8:	1854      	adds	r4, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb43 0501 	adc.w	r5, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	00eb      	lsls	r3, r5, #3
 8004b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b0e:	00e2      	lsls	r2, r4, #3
 8004b10:	4614      	mov	r4, r2
 8004b12:	461d      	mov	r5, r3
 8004b14:	4643      	mov	r3, r8
 8004b16:	18e3      	adds	r3, r4, r3
 8004b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	eb45 0303 	adc.w	r3, r5, r3
 8004b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b42:	4629      	mov	r1, r5
 8004b44:	008b      	lsls	r3, r1, #2
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	008a      	lsls	r2, r1, #2
 8004b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b54:	f7fb fba4 	bl	80002a0 <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4b60      	ldr	r3, [pc, #384]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	011c      	lsls	r4, r3, #4
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	61b9      	str	r1, [r7, #24]
 8004b80:	415b      	adcs	r3, r3
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6139      	str	r1, [r7, #16]
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004be0:	4649      	mov	r1, r9
 8004be2:	008b      	lsls	r3, r1, #2
 8004be4:	4641      	mov	r1, r8
 8004be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bea:	4641      	mov	r1, r8
 8004bec:	008a      	lsls	r2, r1, #2
 8004bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bf2:	f7fb fb55 	bl	80002a0 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a34      	ldr	r2, [pc, #208]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c1a:	441c      	add	r4, r3
 8004c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c20:	2200      	movs	r2, #0
 8004c22:	673b      	str	r3, [r7, #112]	; 0x70
 8004c24:	677a      	str	r2, [r7, #116]	; 0x74
 8004c26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	415b      	adcs	r3, r3
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	1851      	adds	r1, r2, r1
 8004c3e:	6039      	str	r1, [r7, #0]
 8004c40:	4649      	mov	r1, r9
 8004c42:	414b      	adcs	r3, r1
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c52:	4659      	mov	r1, fp
 8004c54:	00cb      	lsls	r3, r1, #3
 8004c56:	4651      	mov	r1, sl
 8004c58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	00ca      	lsls	r2, r1, #3
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	4603      	mov	r3, r0
 8004c66:	4642      	mov	r2, r8
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c80:	667a      	str	r2, [r7, #100]	; 0x64
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c8e:	4649      	mov	r1, r9
 8004c90:	008b      	lsls	r3, r1, #2
 8004c92:	4641      	mov	r1, r8
 8004c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c98:	4641      	mov	r1, r8
 8004c9a:	008a      	lsls	r2, r1, #2
 8004c9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ca0:	f7fb fafe 	bl	80002a0 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004caa:	fba3 1302 	umull	r1, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2164      	movs	r1, #100	; 0x64
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	3332      	adds	r3, #50	; 0x32
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <UART_SetConfig+0x4e4>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4422      	add	r2, r4
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cde:	bf00      	nop
 8004ce0:	51eb851f 	.word	0x51eb851f

08004ce4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0208 	add.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cfc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 0208 	add.w	r2, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f103 0208 	add.w	r2, r3, #8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9c:	d103      	bne.n	8004da6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e00c      	b.n	8004dc0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3308      	adds	r3, #8
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e002      	b.n	8004db4 <vListInsert+0x2e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d2f6      	bcs.n	8004dae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	601a      	str	r2, [r3, #0]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6892      	ldr	r2, [r2, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6852      	ldr	r2, [r2, #4]
 8004e18:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d103      	bne.n	8004e2c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	1e5a      	subs	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004e56:	2301      	movs	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericReset+0x2e>
        __asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60fb      	str	r3, [r7, #12]
    }
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05d      	beq.n	8004f3c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d059      	beq.n	8004f3c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	2100      	movs	r1, #0
 8004e92:	fba3 2302 	umull	r2, r3, r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d000      	beq.n	8004e9c <xQueueGenericReset+0x50>
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d14c      	bne.n	8004f3c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004ea2:	f002 fd59 	bl	8007958 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	6939      	ldr	r1, [r7, #16]
 8004eb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	441a      	add	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	6939      	ldr	r1, [r7, #16]
 8004ed6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	441a      	add	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	22ff      	movs	r2, #255	; 0xff
 8004eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d114      	bne.n	8004f22 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01a      	beq.n	8004f36 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	3310      	adds	r3, #16
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fa5f 	bl	80063c8 <xTaskRemoveFromEventList>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004f10:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <xQueueGenericReset+0x11c>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	e009      	b.n	8004f36 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3310      	adds	r3, #16
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fedc 	bl	8004ce4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	3324      	adds	r3, #36	; 0x24
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fed7 	bl	8004ce4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004f36:	f002 fd3f 	bl	80079b8 <vPortExitCritical>
 8004f3a:	e001      	b.n	8004f40 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <xQueueGenericReset+0x110>
        __asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60bb      	str	r3, [r7, #8]
    }
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004f5c:	697b      	ldr	r3, [r7, #20]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	; 0x28
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02e      	beq.n	8004fe2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004f84:	2100      	movs	r1, #0
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d000      	beq.n	8004f94 <xQueueGenericCreate+0x28>
 8004f92:	2101      	movs	r1, #1
 8004f94:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d123      	bne.n	8004fe2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004fa2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004fa6:	d81c      	bhi.n	8004fe2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	3350      	adds	r3, #80	; 0x50
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f002 fdf0 	bl	8007b9c <pvPortMalloc>
 8004fbc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01c      	beq.n	8004ffe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3350      	adds	r3, #80	; 0x50
 8004fcc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fce:	79fa      	ldrb	r2, [r7, #7]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f814 	bl	8005008 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004fe0:	e00d      	b.n	8004ffe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericCreate+0x92>
        __asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	613b      	str	r3, [r7, #16]
    }
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
    }
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e002      	b.n	800502a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005036:	2101      	movs	r1, #1
 8005038:	69b8      	ldr	r0, [r7, #24]
 800503a:	f7ff ff07 	bl	8004e4c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08e      	sub	sp, #56	; 0x38
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800505e:	2300      	movs	r3, #0
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <xQueueGenericSend+0x32>
        __asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <xQueueGenericSend+0x40>
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <xQueueGenericSend+0x44>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <xQueueGenericSend+0x46>
 8005094:	2300      	movs	r3, #0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <xQueueGenericSend+0x60>
        __asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d103      	bne.n	80050be <xQueueGenericSend+0x6e>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <xQueueGenericSend+0x72>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <xQueueGenericSend+0x74>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <xQueueGenericSend+0x8e>
        __asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	623b      	str	r3, [r7, #32]
    }
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050de:	f001 fb83 	bl	80067e8 <xTaskGetSchedulerState>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <xQueueGenericSend+0x9e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <xQueueGenericSend+0xa2>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <xQueueGenericSend+0xa4>
 80050f2:	2300      	movs	r3, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <xQueueGenericSend+0xbe>
        __asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	61fb      	str	r3, [r7, #28]
    }
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800510e:	f002 fc23 	bl	8007958 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <xQueueGenericSend+0xd4>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d129      	bne.n	8005178 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512a:	f000 fad6 	bl	80056da <prvCopyDataToQueue>
 800512e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f943 	bl	80063c8 <xTaskRemoveFromEventList>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005148:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <xQueueGenericSend+0x1f8>)
 800514a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	e00a      	b.n	8005170 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005160:	4b39      	ldr	r3, [pc, #228]	; (8005248 <xQueueGenericSend+0x1f8>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005170:	f002 fc22 	bl	80079b8 <vPortExitCritical>
                return pdPASS;
 8005174:	2301      	movs	r3, #1
 8005176:	e063      	b.n	8005240 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800517e:	f002 fc1b 	bl	80079b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005182:	2300      	movs	r3, #0
 8005184:	e05c      	b.n	8005240 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4618      	mov	r0, r3
 8005192:	f001 f9ef 	bl	8006574 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005196:	2301      	movs	r3, #1
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800519a:	f002 fc0d 	bl	80079b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800519e:	f000 fe11 	bl	8005dc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80051a2:	f002 fbd9 	bl	8007958 <vPortEnterCritical>
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b2:	d103      	bne.n	80051bc <xQueueGenericSend+0x16c>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c8:	d103      	bne.n	80051d2 <xQueueGenericSend+0x182>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d2:	f002 fbf1 	bl	80079b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d6:	1d3a      	adds	r2, r7, #4
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f9de 	bl	80065a0 <xTaskCheckForTimeOut>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d124      	bne.n	8005234 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ec:	f000 fb6d 	bl	80058ca <prvIsQueueFull>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d018      	beq.n	8005228 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	3310      	adds	r3, #16
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 f878 	bl	80062f4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005206:	f000 faf8 	bl	80057fa <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800520a:	f000 fde9 	bl	8005de0 <xTaskResumeAll>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	f47f af7c 	bne.w	800510e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005216:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <xQueueGenericSend+0x1f8>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	e772      	b.n	800510e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522a:	f000 fae6 	bl	80057fa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800522e:	f000 fdd7 	bl	8005de0 <xTaskResumeAll>
 8005232:	e76c      	b.n	800510e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 fae0 	bl	80057fa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800523a:	f000 fdd1 	bl	8005de0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800523e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005240:	4618      	mov	r0, r3
 8005242:	3738      	adds	r7, #56	; 0x38
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b092      	sub	sp, #72	; 0x48
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 800525e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <xQueueGenericSendFromISR+0x3c>
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <xQueueGenericSendFromISR+0x40>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <xQueueGenericSendFromISR+0x42>
 800528c:	2300      	movs	r3, #0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSendFromISR+0x6a>
 80052ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <xQueueGenericSendFromISR+0x6e>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericSendFromISR+0x70>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052d6:	f002 fc21 	bl	8007b1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80052da:	f3ef 8211 	mrs	r2, BASEPRI
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	623a      	str	r2, [r7, #32]
 80052f0:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80052f2:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <xQueueGenericSendFromISR+0xbc>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d146      	bne.n	8005396 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800530e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800531e:	f000 f9dc 	bl	80056da <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005322:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532a:	d112      	bne.n	8005352 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02d      	beq.n	8005390 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	4618      	mov	r0, r3
 800533a:	f001 f845 	bl	80063c8 <xTaskRemoveFromEventList>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d025      	beq.n	8005390 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d022      	beq.n	8005390 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e01e      	b.n	8005390 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005352:	f000 fe51 	bl	8005ff8 <uxTaskGetNumberOfTasks>
 8005356:	6338      	str	r0, [r7, #48]	; 0x30
 8005358:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800535c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535e:	429a      	cmp	r2, r3
 8005360:	d916      	bls.n	8005390 <xQueueGenericSendFromISR+0x144>
 8005362:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005366:	2b7f      	cmp	r3, #127	; 0x7f
 8005368:	d10a      	bne.n	8005380 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	61bb      	str	r3, [r7, #24]
    }
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <xQueueGenericSendFromISR+0x132>
 8005380:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005384:	3301      	adds	r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	b25a      	sxtb	r2, r3
 800538a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005390:	2301      	movs	r3, #1
 8005392:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8005394:	e001      	b.n	800539a <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005396:	2300      	movs	r3, #0
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80053a4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80053a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3748      	adds	r7, #72	; 0x48
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	; 0x30
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <xQueueReceive+0x30>
        __asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	623b      	str	r3, [r7, #32]
    }
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <xQueueReceive+0x3e>
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <xQueueReceive+0x42>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <xQueueReceive+0x44>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <xQueueReceive+0x5e>
        __asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	61fb      	str	r3, [r7, #28]
    }
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800540e:	f001 f9eb 	bl	80067e8 <xTaskGetSchedulerState>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <xQueueReceive+0x6e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <xQueueReceive+0x72>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueReceive+0x74>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueReceive+0x8e>
        __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	61bb      	str	r3, [r7, #24]
    }
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800543e:	f002 fa8b 	bl	8007958 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01f      	beq.n	800548e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005452:	f000 f9ac 	bl	80057ae <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	1e5a      	subs	r2, r3, #1
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00f      	beq.n	8005486 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	3310      	adds	r3, #16
 800546a:	4618      	mov	r0, r3
 800546c:	f000 ffac 	bl	80063c8 <xTaskRemoveFromEventList>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005476:	4b3d      	ldr	r3, [pc, #244]	; (800556c <xQueueReceive+0x1bc>)
 8005478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005486:	f002 fa97 	bl	80079b8 <vPortExitCritical>
                return pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	e069      	b.n	8005562 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005494:	f002 fa90 	bl	80079b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005498:	2300      	movs	r3, #0
 800549a:	e062      	b.n	8005562 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80054a2:	f107 0310 	add.w	r3, r7, #16
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 f864 	bl	8006574 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80054b0:	f002 fa82 	bl	80079b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80054b4:	f000 fc86 	bl	8005dc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80054b8:	f002 fa4e 	bl	8007958 <vPortEnterCritical>
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054c2:	b25b      	sxtb	r3, r3
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c8:	d103      	bne.n	80054d2 <xQueueReceive+0x122>
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d8:	b25b      	sxtb	r3, r3
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054de:	d103      	bne.n	80054e8 <xQueueReceive+0x138>
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e8:	f002 fa66 	bl	80079b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ec:	1d3a      	adds	r2, r7, #4
 80054ee:	f107 0310 	add.w	r3, r7, #16
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f853 	bl	80065a0 <xTaskCheckForTimeOut>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d123      	bne.n	8005548 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005502:	f000 f9cc 	bl	800589e <prvIsQueueEmpty>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d017      	beq.n	800553c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	3324      	adds	r3, #36	; 0x24
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 feed 	bl	80062f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800551a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551c:	f000 f96d 	bl	80057fa <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005520:	f000 fc5e 	bl	8005de0 <xTaskResumeAll>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d189      	bne.n	800543e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800552a:	4b10      	ldr	r3, [pc, #64]	; (800556c <xQueueReceive+0x1bc>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	e780      	b.n	800543e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800553c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553e:	f000 f95c 	bl	80057fa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005542:	f000 fc4d 	bl	8005de0 <xTaskResumeAll>
 8005546:	e77a      	b.n	800543e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800554a:	f000 f956 	bl	80057fa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800554e:	f000 fc47 	bl	8005de0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005554:	f000 f9a3 	bl	800589e <prvIsQueueEmpty>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	f43f af6f 	beq.w	800543e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005560:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005562:	4618      	mov	r0, r3
 8005564:	3730      	adds	r7, #48	; 0x30
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b090      	sub	sp, #64	; 0x40
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <xQueueReceiveFromISR+0x3a>
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <xQueueReceiveFromISR+0x3e>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <xQueueReceiveFromISR+0x40>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	623b      	str	r3, [r7, #32]
    }
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ca:	f002 faa7 	bl	8007b1c <vPortValidateInterruptPriority>
        __asm volatile
 80055ce:	f3ef 8211 	mrs	r2, BASEPRI
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	61fa      	str	r2, [r7, #28]
 80055e4:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80055e6:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d046      	beq.n	8005684 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005604:	f000 f8d3 	bl	80057ae <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	1e5a      	subs	r2, r3, #1
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005610:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005618:	d112      	bne.n	8005640 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02d      	beq.n	800567e <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	3310      	adds	r3, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fece 	bl	80063c8 <xTaskRemoveFromEventList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d025      	beq.n	800567e <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d022      	beq.n	800567e <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e01e      	b.n	800567e <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8005640:	f000 fcda 	bl	8005ff8 <uxTaskGetNumberOfTasks>
 8005644:	62b8      	str	r0, [r7, #40]	; 0x28
 8005646:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800564a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564c:	429a      	cmp	r2, r3
 800564e:	d916      	bls.n	800567e <xQueueReceiveFromISR+0x10e>
 8005650:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005654:	2b7f      	cmp	r3, #127	; 0x7f
 8005656:	d10a      	bne.n	800566e <xQueueReceiveFromISR+0xfe>
        __asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	617b      	str	r3, [r7, #20]
    }
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xQueueReceiveFromISR+0xfc>
 800566e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005672:	3301      	adds	r3, #1
 8005674:	b2db      	uxtb	r3, r3
 8005676:	b25a      	sxtb	r2, r3
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800567e:	2301      	movs	r3, #1
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005682:	e001      	b.n	8005688 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	613b      	str	r3, [r7, #16]
        __asm volatile
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f383 8811 	msr	BASEPRI, r3
    }
 8005692:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005696:	4618      	mov	r0, r3
 8005698:	3740      	adds	r7, #64	; 0x40
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60bb      	str	r3, [r7, #8]
    }
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80056c2:	f002 f949 	bl	8007958 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80056cc:	f002 f974 	bl	80079b8 <vPortExitCritical>

    return uxReturn;
 80056d0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10d      	bne.n	8005714 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d14d      	bne.n	800579c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f001 f88d 	bl	8006824 <xTaskPriorityDisinherit>
 800570a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]
 8005712:	e043      	b.n	800579c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6858      	ldr	r0, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	461a      	mov	r2, r3
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	f002 fc2f 	bl	8007f88 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	441a      	add	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d32b      	bcc.n	800579c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	605a      	str	r2, [r3, #4]
 800574c:	e026      	b.n	800579c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68d8      	ldr	r0, [r3, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	461a      	mov	r2, r3
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	f002 fc15 	bl	8007f88 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	425b      	negs	r3, r3
 8005768:	441a      	add	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d207      	bcs.n	800578a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	425b      	negs	r3, r3
 8005784:	441a      	add	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d105      	bne.n	800579c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3b01      	subs	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80057a4:	697b      	ldr	r3, [r7, #20]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d018      	beq.n	80057f2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d303      	bcc.n	80057e2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68d9      	ldr	r1, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	461a      	mov	r2, r3
 80057ec:	6838      	ldr	r0, [r7, #0]
 80057ee:	f002 fbcb 	bl	8007f88 <memcpy>
    }
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005802:	f002 f8a9 	bl	8007958 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800580c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800580e:	e011      	b.n	8005834 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d012      	beq.n	800583e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fdd3 	bl	80063c8 <xTaskRemoveFromEventList>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005828:	f000 ff20 	bl	800666c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	3b01      	subs	r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005838:	2b00      	cmp	r3, #0
 800583a:	dce9      	bgt.n	8005810 <prvUnlockQueue+0x16>
 800583c:	e000      	b.n	8005840 <prvUnlockQueue+0x46>
                    break;
 800583e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	22ff      	movs	r2, #255	; 0xff
 8005844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005848:	f002 f8b6 	bl	80079b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800584c:	f002 f884 	bl	8007958 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005856:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005858:	e011      	b.n	800587e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d012      	beq.n	8005888 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3310      	adds	r3, #16
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fdae 	bl	80063c8 <xTaskRemoveFromEventList>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005872:	f000 fefb 	bl	800666c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	3b01      	subs	r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800587e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005882:	2b00      	cmp	r3, #0
 8005884:	dce9      	bgt.n	800585a <prvUnlockQueue+0x60>
 8005886:	e000      	b.n	800588a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005888:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	22ff      	movs	r2, #255	; 0xff
 800588e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005892:	f002 f891 	bl	80079b8 <vPortExitCritical>
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80058a6:	f002 f857 	bl	8007958 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e001      	b.n	80058bc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80058bc:	f002 f87c 	bl	80079b8 <vPortExitCritical>

    return xReturn;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80058d2:	f002 f841 	bl	8007958 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	429a      	cmp	r2, r3
 80058e0:	d102      	bne.n	80058e8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e001      	b.n	80058ec <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80058ec:	f002 f864 	bl	80079b8 <vPortExitCritical>

    return xReturn;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80058fa:	b480      	push	{r7}
 80058fc:	b087      	sub	sp, #28
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60fb      	str	r3, [r7, #12]
    }
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	429a      	cmp	r2, r3
 800592c:	d102      	bne.n	8005934 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e001      	b.n	8005938 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005938:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800593a:	4618      	mov	r0, r3
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
    }
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d024      	beq.n	80059c2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e01e      	b.n	80059bc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <vQueueAddToRegistry+0x98>)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4413      	add	r3, r2
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d105      	bne.n	800599a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4a13      	ldr	r2, [pc, #76]	; (80059e0 <vQueueAddToRegistry+0x98>)
 8005994:	4413      	add	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
                    break;
 8005998:	e013      	b.n	80059c2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <vQueueAddToRegistry+0x6e>
 80059a0:	4a0f      	ldr	r2, [pc, #60]	; (80059e0 <vQueueAddToRegistry+0x98>)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <vQueueAddToRegistry+0x98>)
 80059b2:	4413      	add	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	3301      	adds	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b07      	cmp	r3, #7
 80059c0:	d9dd      	bls.n	800597e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	200001ec 	.word	0x200001ec

080059e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80059f4:	f001 ffb0 	bl	8007958 <vPortEnterCritical>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a04:	d103      	bne.n	8005a0e <vQueueWaitForMessageRestricted+0x2a>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a1a:	d103      	bne.n	8005a24 <vQueueWaitForMessageRestricted+0x40>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a24:	f001 ffc8 	bl	80079b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3324      	adds	r3, #36	; 0x24
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fc7f 	bl	800633c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f7ff fedb 	bl	80057fa <prvUnlockQueue>
    }
 8005a44:	bf00      	nop
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08c      	sub	sp, #48	; 0x30
 8005a50:	af04      	add	r7, sp, #16
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f002 f89b 	bl	8007b9c <pvPortMalloc>
 8005a66:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d013      	beq.n	8005a96 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a6e:	2058      	movs	r0, #88	; 0x58
 8005a70:	f002 f894 	bl	8007b9c <pvPortMalloc>
 8005a74:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005a7c:	2258      	movs	r2, #88	; 0x58
 8005a7e:	2100      	movs	r1, #0
 8005a80:	69f8      	ldr	r0, [r7, #28]
 8005a82:	f002 fa8f 	bl	8007fa4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a8c:	e005      	b.n	8005a9a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	f002 f93e 	bl	8007d10 <vPortFree>
 8005a94:	e001      	b.n	8005a9a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d013      	beq.n	8005ac8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9303      	str	r3, [sp, #12]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	9302      	str	r3, [sp, #8]
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f80e 	bl	8005ad8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005abc:	69f8      	ldr	r0, [r7, #28]
 8005abe:	f000 f899 	bl	8005bf4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e002      	b.n	8005ace <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005acc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005ace:	69bb      	ldr	r3, [r7, #24]
    }
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	461a      	mov	r2, r3
 8005af0:	21a5      	movs	r1, #165	; 0xa5
 8005af2:	f002 fa57 	bl	8007fa4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b00:	3b01      	subs	r3, #1
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	617b      	str	r3, [r7, #20]
    }
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01e      	beq.n	8005b74 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e012      	b.n	8005b62 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3334      	adds	r3, #52	; 0x34
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b09      	cmp	r3, #9
 8005b66:	d9e9      	bls.n	8005b3c <prvInitialiseNewTask+0x64>
 8005b68:	e000      	b.n	8005b6c <prvInitialiseNewTask+0x94>
            {
                break;
 8005b6a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d90a      	bls.n	8005b90 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	613b      	str	r3, [r7, #16]
    }
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d901      	bls.n	8005b9a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b96:	2304      	movs	r3, #4
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff f8ba 	bl	8004d24 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	3318      	adds	r3, #24
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff f8b5 	bl	8004d24 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	f1c3 0205 	rsb	r2, r3, #5
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	69b8      	ldr	r0, [r7, #24]
 8005bd6:	f001 fd93 	bl	8007700 <pxPortInitialiseStack>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bec:	bf00      	nop
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005bfc:	f001 feac 	bl	8007958 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005c00:	4b40      	ldr	r3, [pc, #256]	; (8005d04 <prvAddNewTaskToReadyList+0x110>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	4a3f      	ldr	r2, [pc, #252]	; (8005d04 <prvAddNewTaskToReadyList+0x110>)
 8005c08:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	; (8005d08 <prvAddNewTaskToReadyList+0x114>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005c12:	4a3d      	ldr	r2, [pc, #244]	; (8005d08 <prvAddNewTaskToReadyList+0x114>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c18:	4b3a      	ldr	r3, [pc, #232]	; (8005d04 <prvAddNewTaskToReadyList+0x110>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d110      	bne.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005c20:	f000 fd48 	bl	80066b4 <prvInitialiseTaskLists>
 8005c24:	e00d      	b.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005c26:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <prvAddNewTaskToReadyList+0x118>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c2e:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <prvAddNewTaskToReadyList+0x114>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d802      	bhi.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005c3c:	4a32      	ldr	r2, [pc, #200]	; (8005d08 <prvAddNewTaskToReadyList+0x114>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005c42:	4b33      	ldr	r3, [pc, #204]	; (8005d10 <prvAddNewTaskToReadyList+0x11c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a31      	ldr	r2, [pc, #196]	; (8005d10 <prvAddNewTaskToReadyList+0x11c>)
 8005c4a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c4c:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <prvAddNewTaskToReadyList+0x11c>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	4b2d      	ldr	r3, [pc, #180]	; (8005d14 <prvAddNewTaskToReadyList+0x120>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	4a2c      	ldr	r2, [pc, #176]	; (8005d14 <prvAddNewTaskToReadyList+0x120>)
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6a:	492b      	ldr	r1, [pc, #172]	; (8005d18 <prvAddNewTaskToReadyList+0x124>)
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	3304      	adds	r3, #4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	609a      	str	r2, [r3, #8]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	3204      	adds	r2, #4
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1d1a      	adds	r2, r3, #4
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <prvAddNewTaskToReadyList+0x124>)
 8005caa:	441a      	add	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4918      	ldr	r1, [pc, #96]	; (8005d18 <prvAddNewTaskToReadyList+0x124>)
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	4814      	ldr	r0, [pc, #80]	; (8005d18 <prvAddNewTaskToReadyList+0x124>)
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4403      	add	r3, r0
 8005cd0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005cd2:	f001 fe71 	bl	80079b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <prvAddNewTaskToReadyList+0x118>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvAddNewTaskToReadyList+0x114>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d207      	bcs.n	8005cfc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <prvAddNewTaskToReadyList+0x128>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000304 	.word	0x20000304
 8005d08:	2000022c 	.word	0x2000022c
 8005d0c:	20000310 	.word	0x20000310
 8005d10:	20000320 	.word	0x20000320
 8005d14:	2000030c 	.word	0x2000030c
 8005d18:	20000230 	.word	0x20000230
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <vTaskStartScheduler+0x88>)
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2282      	movs	r2, #130	; 0x82
 8005d32:	491e      	ldr	r1, [pc, #120]	; (8005dac <vTaskStartScheduler+0x8c>)
 8005d34:	481e      	ldr	r0, [pc, #120]	; (8005db0 <vTaskStartScheduler+0x90>)
 8005d36:	f7ff fe89 	bl	8005a4c <xTaskCreate>
 8005d3a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d102      	bne.n	8005d48 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005d42:	f001 f967 	bl	8007014 <xTimerCreateTimerTask>
 8005d46:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d116      	bne.n	8005d7c <vTaskStartScheduler+0x5c>
        __asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60bb      	str	r3, [r7, #8]
    }
 8005d60:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005d62:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <vTaskStartScheduler+0x94>)
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d68:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <vTaskStartScheduler+0x98>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <vTaskStartScheduler+0x9c>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005d76:	f001 fd4d 	bl	8007814 <xPortStartScheduler>
 8005d7a:	e00e      	b.n	8005d9a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d82:	d10a      	bne.n	8005d9a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	607b      	str	r3, [r7, #4]
    }
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <vTaskStartScheduler+0xa0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000328 	.word	0x20000328
 8005dac:	08009650 	.word	0x08009650
 8005db0:	08006685 	.word	0x08006685
 8005db4:	20000324 	.word	0x20000324
 8005db8:	20000310 	.word	0x20000310
 8005dbc:	20000308 	.word	0x20000308
 8005dc0:	20000020 	.word	0x20000020

08005dc4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <vTaskSuspendAll+0x18>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	4a03      	ldr	r2, [pc, #12]	; (8005ddc <vTaskSuspendAll+0x18>)
 8005dd0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005dd2:	bf00      	nop
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	2000032c 	.word	0x2000032c

08005de0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005dee:	4b71      	ldr	r3, [pc, #452]	; (8005fb4 <xTaskResumeAll+0x1d4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <xTaskResumeAll+0x2c>
        __asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	607b      	str	r3, [r7, #4]
    }
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005e0c:	f001 fda4 	bl	8007958 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005e10:	4b68      	ldr	r3, [pc, #416]	; (8005fb4 <xTaskResumeAll+0x1d4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	4a67      	ldr	r2, [pc, #412]	; (8005fb4 <xTaskResumeAll+0x1d4>)
 8005e18:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e1a:	4b66      	ldr	r3, [pc, #408]	; (8005fb4 <xTaskResumeAll+0x1d4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 80c0 	bne.w	8005fa4 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e24:	4b64      	ldr	r3, [pc, #400]	; (8005fb8 <xTaskResumeAll+0x1d8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80bb 	beq.w	8005fa4 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e2e:	e08a      	b.n	8005f46 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e30:	4b62      	ldr	r3, [pc, #392]	; (8005fbc <xTaskResumeAll+0x1dc>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	6a12      	ldr	r2, [r2, #32]
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	69d2      	ldr	r2, [r2, #28]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3318      	adds	r3, #24
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d103      	bne.n	8005e66 <xTaskResumeAll+0x86>
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	6a1a      	ldr	r2, [r3, #32]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	1e5a      	subs	r2, r3, #1
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	68d2      	ldr	r2, [r2, #12]
 8005e84:	609a      	str	r2, [r3, #8]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	6892      	ldr	r2, [r2, #8]
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	3304      	adds	r3, #4
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d103      	bne.n	8005ea4 <xTaskResumeAll+0xc4>
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	615a      	str	r2, [r3, #20]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1e5a      	subs	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	2201      	movs	r2, #1
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	4b40      	ldr	r3, [pc, #256]	; (8005fc0 <xTaskResumeAll+0x1e0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	4a3f      	ldr	r2, [pc, #252]	; (8005fc0 <xTaskResumeAll+0x1e0>)
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eca:	493e      	ldr	r1, [pc, #248]	; (8005fc4 <xTaskResumeAll+0x1e4>)
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	609a      	str	r2, [r3, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	3204      	adds	r2, #4
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	1d1a      	adds	r2, r3, #4
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4a2e      	ldr	r2, [pc, #184]	; (8005fc4 <xTaskResumeAll+0x1e4>)
 8005f0a:	441a      	add	r2, r3
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	615a      	str	r2, [r3, #20]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	492b      	ldr	r1, [pc, #172]	; (8005fc4 <xTaskResumeAll+0x1e4>)
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	1c59      	adds	r1, r3, #1
 8005f24:	4827      	ldr	r0, [pc, #156]	; (8005fc4 <xTaskResumeAll+0x1e4>)
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4403      	add	r3, r0
 8005f30:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <xTaskResumeAll+0x1e8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d302      	bcc.n	8005f46 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005f40:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <xTaskResumeAll+0x1ec>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f46:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <xTaskResumeAll+0x1dc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f47f af70 	bne.w	8005e30 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005f56:	f000 fc2b 	bl	80067b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <xTaskResumeAll+0x1f0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d010      	beq.n	8005f88 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005f66:	f000 f853 	bl	8006010 <xTaskIncrementTick>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005f70:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <xTaskResumeAll+0x1ec>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f1      	bne.n	8005f66 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <xTaskResumeAll+0x1f0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005f88:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <xTaskResumeAll+0x1ec>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005f94:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <xTaskResumeAll+0x1f4>)
 8005f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005fa4:	f001 fd08 	bl	80079b8 <vPortExitCritical>

    return xAlreadyYielded;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	2000032c 	.word	0x2000032c
 8005fb8:	20000304 	.word	0x20000304
 8005fbc:	200002c4 	.word	0x200002c4
 8005fc0:	2000030c 	.word	0x2000030c
 8005fc4:	20000230 	.word	0x20000230
 8005fc8:	2000022c 	.word	0x2000022c
 8005fcc:	20000318 	.word	0x20000318
 8005fd0:	20000314 	.word	0x20000314
 8005fd4:	e000ed04 	.word	0xe000ed04

08005fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005fde:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <xTaskGetTickCount+0x1c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005fe4:	687b      	ldr	r3, [r7, #4]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20000308 	.word	0x20000308

08005ff8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <uxTaskGetNumberOfTasks+0x14>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	20000304 	.word	0x20000304

08006010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800601a:	4b7d      	ldr	r3, [pc, #500]	; (8006210 <xTaskIncrementTick+0x200>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 80ec 	bne.w	80061fc <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006024:	4b7b      	ldr	r3, [pc, #492]	; (8006214 <xTaskIncrementTick+0x204>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800602c:	4a79      	ldr	r2, [pc, #484]	; (8006214 <xTaskIncrementTick+0x204>)
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d120      	bne.n	800607a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006038:	4b77      	ldr	r3, [pc, #476]	; (8006218 <xTaskIncrementTick+0x208>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <xTaskIncrementTick+0x48>
        __asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	607b      	str	r3, [r7, #4]
    }
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <xTaskIncrementTick+0x46>
 8006058:	4b6f      	ldr	r3, [pc, #444]	; (8006218 <xTaskIncrementTick+0x208>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	4b6f      	ldr	r3, [pc, #444]	; (800621c <xTaskIncrementTick+0x20c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a6d      	ldr	r2, [pc, #436]	; (8006218 <xTaskIncrementTick+0x208>)
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4a6d      	ldr	r2, [pc, #436]	; (800621c <xTaskIncrementTick+0x20c>)
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	4b6c      	ldr	r3, [pc, #432]	; (8006220 <xTaskIncrementTick+0x210>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	4a6b      	ldr	r2, [pc, #428]	; (8006220 <xTaskIncrementTick+0x210>)
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	f000 fb9b 	bl	80067b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800607a:	4b6a      	ldr	r3, [pc, #424]	; (8006224 <xTaskIncrementTick+0x214>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	429a      	cmp	r2, r3
 8006082:	f0c0 80a6 	bcc.w	80061d2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006086:	4b64      	ldr	r3, [pc, #400]	; (8006218 <xTaskIncrementTick+0x208>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006090:	4b64      	ldr	r3, [pc, #400]	; (8006224 <xTaskIncrementTick+0x214>)
 8006092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006096:	601a      	str	r2, [r3, #0]
                    break;
 8006098:	e09b      	b.n	80061d2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800609a:	4b5f      	ldr	r3, [pc, #380]	; (8006218 <xTaskIncrementTick+0x208>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80060aa:	6a3a      	ldr	r2, [r7, #32]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d203      	bcs.n	80060ba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80060b2:	4a5c      	ldr	r2, [pc, #368]	; (8006224 <xTaskIncrementTick+0x214>)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80060b8:	e08b      	b.n	80061d2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	68d2      	ldr	r2, [r2, #12]
 80060c8:	609a      	str	r2, [r3, #8]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	6892      	ldr	r2, [r2, #8]
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	3304      	adds	r3, #4
 80060dc:	429a      	cmp	r2, r3
 80060de:	d103      	bne.n	80060e8 <xTaskIncrementTick+0xd8>
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2200      	movs	r2, #0
 80060ec:	615a      	str	r2, [r3, #20]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	1e5a      	subs	r2, r3, #1
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01e      	beq.n	800613e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	6a12      	ldr	r2, [r2, #32]
 800610e:	609a      	str	r2, [r3, #8]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	69d2      	ldr	r2, [r2, #28]
 8006118:	605a      	str	r2, [r3, #4]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	3318      	adds	r3, #24
 8006122:	429a      	cmp	r2, r3
 8006124:	d103      	bne.n	800612e <xTaskIncrementTick+0x11e>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	6a1a      	ldr	r2, [r3, #32]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	605a      	str	r2, [r3, #4]
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2200      	movs	r2, #0
 8006132:	629a      	str	r2, [r3, #40]	; 0x28
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	1e5a      	subs	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	2201      	movs	r2, #1
 8006144:	409a      	lsls	r2, r3
 8006146:	4b38      	ldr	r3, [pc, #224]	; (8006228 <xTaskIncrementTick+0x218>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4313      	orrs	r3, r2
 800614c:	4a36      	ldr	r2, [pc, #216]	; (8006228 <xTaskIncrementTick+0x218>)
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	4935      	ldr	r1, [pc, #212]	; (800622c <xTaskIncrementTick+0x21c>)
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3304      	adds	r3, #4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	60da      	str	r2, [r3, #12]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	3204      	adds	r2, #4
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	1d1a      	adds	r2, r3, #4
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	609a      	str	r2, [r3, #8]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a26      	ldr	r2, [pc, #152]	; (800622c <xTaskIncrementTick+0x21c>)
 8006194:	441a      	add	r2, r3
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	615a      	str	r2, [r3, #20]
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4923      	ldr	r1, [pc, #140]	; (800622c <xTaskIncrementTick+0x21c>)
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	1c59      	adds	r1, r3, #1
 80061ae:	481f      	ldr	r0, [pc, #124]	; (800622c <xTaskIncrementTick+0x21c>)
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4403      	add	r3, r0
 80061ba:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	4b1b      	ldr	r3, [pc, #108]	; (8006230 <xTaskIncrementTick+0x220>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	f67f af5d 	bls.w	8006086 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d0:	e759      	b.n	8006086 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <xTaskIncrementTick+0x220>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d8:	4914      	ldr	r1, [pc, #80]	; (800622c <xTaskIncrementTick+0x21c>)
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d901      	bls.n	80061ee <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80061ea:	2301      	movs	r3, #1
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <xTaskIncrementTick+0x224>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80061f6:	2301      	movs	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e004      	b.n	8006206 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <xTaskIncrementTick+0x228>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <xTaskIncrementTick+0x228>)
 8006204:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006208:	4618      	mov	r0, r3
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	2000032c 	.word	0x2000032c
 8006214:	20000308 	.word	0x20000308
 8006218:	200002bc 	.word	0x200002bc
 800621c:	200002c0 	.word	0x200002c0
 8006220:	2000031c 	.word	0x2000031c
 8006224:	20000324 	.word	0x20000324
 8006228:	2000030c 	.word	0x2000030c
 800622c:	20000230 	.word	0x20000230
 8006230:	2000022c 	.word	0x2000022c
 8006234:	20000318 	.word	0x20000318
 8006238:	20000314 	.word	0x20000314

0800623c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006242:	4b27      	ldr	r3, [pc, #156]	; (80062e0 <vTaskSwitchContext+0xa4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800624a:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <vTaskSwitchContext+0xa8>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006250:	e03f      	b.n	80062d2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006252:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <vTaskSwitchContext+0xa8>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006258:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <vTaskSwitchContext+0xac>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	fab3 f383 	clz	r3, r3
 8006264:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006266:	7afb      	ldrb	r3, [r7, #11]
 8006268:	f1c3 031f 	rsb	r3, r3, #31
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	491f      	ldr	r1, [pc, #124]	; (80062ec <vTaskSwitchContext+0xb0>)
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	607b      	str	r3, [r7, #4]
    }
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vTaskSwitchContext+0x5a>
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4a12      	ldr	r2, [pc, #72]	; (80062ec <vTaskSwitchContext+0xb0>)
 80062a4:	4413      	add	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3308      	adds	r3, #8
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d104      	bne.n	80062c8 <vTaskSwitchContext+0x8c>
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <vTaskSwitchContext+0xb4>)
 80062d0:	6013      	str	r3, [r2, #0]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	2000032c 	.word	0x2000032c
 80062e4:	20000318 	.word	0x20000318
 80062e8:	2000030c 	.word	0x2000030c
 80062ec:	20000230 	.word	0x20000230
 80062f0:	2000022c 	.word	0x2000022c

080062f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60fb      	str	r3, [r7, #12]
    }
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800631a:	4b07      	ldr	r3, [pc, #28]	; (8006338 <vTaskPlaceOnEventList+0x44>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3318      	adds	r3, #24
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fe fd2f 	bl	8004d86 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006328:	2101      	movs	r1, #1
 800632a:	6838      	ldr	r0, [r7, #0]
 800632c:	f000 fdf2 	bl	8006f14 <prvAddCurrentTaskToDelayedList>
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	2000022c 	.word	0x2000022c

0800633c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	613b      	str	r3, [r7, #16]
    }
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <vTaskPlaceOnEventListRestricted+0x88>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	61da      	str	r2, [r3, #28]
 8006372:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <vTaskPlaceOnEventListRestricted+0x88>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	6892      	ldr	r2, [r2, #8]
 800637a:	621a      	str	r2, [r3, #32]
 800637c:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <vTaskPlaceOnEventListRestricted+0x88>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	3218      	adds	r2, #24
 8006386:	605a      	str	r2, [r3, #4]
 8006388:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <vTaskPlaceOnEventListRestricted+0x88>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f103 0218 	add.w	r2, r3, #24
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	609a      	str	r2, [r3, #8]
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <vTaskPlaceOnEventListRestricted+0x88>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80063ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063b0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	68b8      	ldr	r0, [r7, #8]
 80063b6:	f000 fdad 	bl	8006f14 <prvAddCurrentTaskToDelayedList>
    }
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	2000022c 	.word	0x2000022c

080063c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b08b      	sub	sp, #44	; 0x2c
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	60fb      	str	r3, [r7, #12]
    }
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	6a3a      	ldr	r2, [r7, #32]
 8006400:	6a12      	ldr	r2, [r2, #32]
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	69d2      	ldr	r2, [r2, #28]
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	3318      	adds	r3, #24
 8006416:	429a      	cmp	r2, r3
 8006418:	d103      	bne.n	8006422 <xTaskRemoveFromEventList+0x5a>
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	605a      	str	r2, [r3, #4]
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	2200      	movs	r2, #0
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006432:	4b4a      	ldr	r3, [pc, #296]	; (800655c <xTaskRemoveFromEventList+0x194>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d15e      	bne.n	80064f8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	6a3a      	ldr	r2, [r7, #32]
 8006446:	68d2      	ldr	r2, [r2, #12]
 8006448:	609a      	str	r2, [r3, #8]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	6892      	ldr	r2, [r2, #8]
 8006452:	605a      	str	r2, [r3, #4]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	3304      	adds	r3, #4
 800645c:	429a      	cmp	r2, r3
 800645e:	d103      	bne.n	8006468 <xTaskRemoveFromEventList+0xa0>
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2200      	movs	r2, #0
 800646c:	615a      	str	r2, [r3, #20]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	1e5a      	subs	r2, r3, #1
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	2201      	movs	r2, #1
 800647e:	409a      	lsls	r2, r3
 8006480:	4b37      	ldr	r3, [pc, #220]	; (8006560 <xTaskRemoveFromEventList+0x198>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4313      	orrs	r3, r2
 8006486:	4a36      	ldr	r2, [pc, #216]	; (8006560 <xTaskRemoveFromEventList+0x198>)
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648e:	4935      	ldr	r1, [pc, #212]	; (8006564 <xTaskRemoveFromEventList+0x19c>)
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	3304      	adds	r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	3204      	adds	r2, #4
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	1d1a      	adds	r2, r3, #4
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a25      	ldr	r2, [pc, #148]	; (8006564 <xTaskRemoveFromEventList+0x19c>)
 80064ce:	441a      	add	r2, r3
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	615a      	str	r2, [r3, #20]
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	4922      	ldr	r1, [pc, #136]	; (8006564 <xTaskRemoveFromEventList+0x19c>)
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	481e      	ldr	r0, [pc, #120]	; (8006564 <xTaskRemoveFromEventList+0x19c>)
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4403      	add	r3, r0
 80064f4:	6019      	str	r1, [r3, #0]
 80064f6:	e01b      	b.n	8006530 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <xTaskRemoveFromEventList+0x1a0>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	61da      	str	r2, [r3, #28]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	621a      	str	r2, [r3, #32]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	3218      	adds	r2, #24
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	f103 0218 	add.w	r2, r3, #24
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	609a      	str	r2, [r3, #8]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	4a11      	ldr	r2, [pc, #68]	; (8006568 <xTaskRemoveFromEventList+0x1a0>)
 8006524:	629a      	str	r2, [r3, #40]	; 0x28
 8006526:	4b10      	ldr	r3, [pc, #64]	; (8006568 <xTaskRemoveFromEventList+0x1a0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	4a0e      	ldr	r2, [pc, #56]	; (8006568 <xTaskRemoveFromEventList+0x1a0>)
 800652e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <xTaskRemoveFromEventList+0x1a4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d905      	bls.n	800654a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <xTaskRemoveFromEventList+0x1a8>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e001      	b.n	800654e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006550:	4618      	mov	r0, r3
 8006552:	372c      	adds	r7, #44	; 0x2c
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	2000032c 	.word	0x2000032c
 8006560:	2000030c 	.word	0x2000030c
 8006564:	20000230 	.word	0x20000230
 8006568:	200002c4 	.word	0x200002c4
 800656c:	2000022c 	.word	0x2000022c
 8006570:	20000318 	.word	0x20000318

08006574 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <vTaskInternalSetTimeOutState+0x24>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <vTaskInternalSetTimeOutState+0x28>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	605a      	str	r2, [r3, #4]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	2000031c 	.word	0x2000031c
 800659c:	20000308 	.word	0x20000308

080065a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	613b      	str	r3, [r7, #16]
    }
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	60fb      	str	r3, [r7, #12]
    }
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80065e2:	f001 f9b9 	bl	8007958 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80065e6:	4b1f      	ldr	r3, [pc, #124]	; (8006664 <xTaskCheckForTimeOut+0xc4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fe:	d102      	bne.n	8006606 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006600:	2300      	movs	r3, #0
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e026      	b.n	8006654 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b17      	ldr	r3, [pc, #92]	; (8006668 <xTaskCheckForTimeOut+0xc8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d00a      	beq.n	8006628 <xTaskCheckForTimeOut+0x88>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	429a      	cmp	r2, r3
 800661a:	d305      	bcc.n	8006628 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e015      	b.n	8006654 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	429a      	cmp	r2, r3
 8006630:	d20b      	bcs.n	800664a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	1ad2      	subs	r2, r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff ff98 	bl	8006574 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006644:	2300      	movs	r3, #0
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	e004      	b.n	8006654 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006654:	f001 f9b0 	bl	80079b8 <vPortExitCritical>

    return xReturn;
 8006658:	69fb      	ldr	r3, [r7, #28]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000308 	.word	0x20000308
 8006668:	2000031c 	.word	0x2000031c

0800666c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <vTaskMissedYield+0x14>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000318 	.word	0x20000318

08006684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800668c:	f000 f852 	bl	8006734 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <prvIdleTask+0x28>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d9f9      	bls.n	800668c <prvIdleTask+0x8>
            {
                taskYIELD();
 8006698:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <prvIdleTask+0x2c>)
 800669a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80066a8:	e7f0      	b.n	800668c <prvIdleTask+0x8>
 80066aa:	bf00      	nop
 80066ac:	20000230 	.word	0x20000230
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	e00c      	b.n	80066da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4a12      	ldr	r2, [pc, #72]	; (8006714 <prvInitialiseTaskLists+0x60>)
 80066cc:	4413      	add	r3, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fb08 	bl	8004ce4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3301      	adds	r3, #1
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d9ef      	bls.n	80066c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80066e0:	480d      	ldr	r0, [pc, #52]	; (8006718 <prvInitialiseTaskLists+0x64>)
 80066e2:	f7fe faff 	bl	8004ce4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80066e6:	480d      	ldr	r0, [pc, #52]	; (800671c <prvInitialiseTaskLists+0x68>)
 80066e8:	f7fe fafc 	bl	8004ce4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80066ec:	480c      	ldr	r0, [pc, #48]	; (8006720 <prvInitialiseTaskLists+0x6c>)
 80066ee:	f7fe faf9 	bl	8004ce4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80066f2:	480c      	ldr	r0, [pc, #48]	; (8006724 <prvInitialiseTaskLists+0x70>)
 80066f4:	f7fe faf6 	bl	8004ce4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80066f8:	480b      	ldr	r0, [pc, #44]	; (8006728 <prvInitialiseTaskLists+0x74>)
 80066fa:	f7fe faf3 	bl	8004ce4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <prvInitialiseTaskLists+0x78>)
 8006700:	4a05      	ldr	r2, [pc, #20]	; (8006718 <prvInitialiseTaskLists+0x64>)
 8006702:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <prvInitialiseTaskLists+0x7c>)
 8006706:	4a05      	ldr	r2, [pc, #20]	; (800671c <prvInitialiseTaskLists+0x68>)
 8006708:	601a      	str	r2, [r3, #0]
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000230 	.word	0x20000230
 8006718:	20000294 	.word	0x20000294
 800671c:	200002a8 	.word	0x200002a8
 8006720:	200002c4 	.word	0x200002c4
 8006724:	200002d8 	.word	0x200002d8
 8006728:	200002f0 	.word	0x200002f0
 800672c:	200002bc 	.word	0x200002bc
 8006730:	200002c0 	.word	0x200002c0

08006734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800673a:	e019      	b.n	8006770 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800673c:	f001 f90c 	bl	8007958 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006740:	4b10      	ldr	r3, [pc, #64]	; (8006784 <prvCheckTasksWaitingTermination+0x50>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fb53 	bl	8004df8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006752:	4b0d      	ldr	r3, [pc, #52]	; (8006788 <prvCheckTasksWaitingTermination+0x54>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3b01      	subs	r3, #1
 8006758:	4a0b      	ldr	r2, [pc, #44]	; (8006788 <prvCheckTasksWaitingTermination+0x54>)
 800675a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800675c:	4b0b      	ldr	r3, [pc, #44]	; (800678c <prvCheckTasksWaitingTermination+0x58>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3b01      	subs	r3, #1
 8006762:	4a0a      	ldr	r2, [pc, #40]	; (800678c <prvCheckTasksWaitingTermination+0x58>)
 8006764:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006766:	f001 f927 	bl	80079b8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f810 	bl	8006790 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <prvCheckTasksWaitingTermination+0x58>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e1      	bne.n	800673c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200002d8 	.word	0x200002d8
 8006788:	20000304 	.word	0x20000304
 800678c:	200002ec 	.word	0x200002ec

08006790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fab7 	bl	8007d10 <vPortFree>
            vPortFree( pxTCB );
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fab4 	bl	8007d10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <prvResetNextTaskUnblockTime+0x30>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <prvResetNextTaskUnblockTime+0x34>)
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80067c6:	e005      	b.n	80067d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <prvResetNextTaskUnblockTime+0x30>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a04      	ldr	r2, [pc, #16]	; (80067e4 <prvResetNextTaskUnblockTime+0x34>)
 80067d2:	6013      	str	r3, [r2, #0]
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	200002bc 	.word	0x200002bc
 80067e4:	20000324 	.word	0x20000324

080067e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80067ee:	4b0b      	ldr	r3, [pc, #44]	; (800681c <xTaskGetSchedulerState+0x34>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80067f6:	2301      	movs	r3, #1
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	e008      	b.n	800680e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fc:	4b08      	ldr	r3, [pc, #32]	; (8006820 <xTaskGetSchedulerState+0x38>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006804:	2302      	movs	r3, #2
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	e001      	b.n	800680e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800680e:	687b      	ldr	r3, [r7, #4]
    }
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000310 	.word	0x20000310
 8006820:	2000032c 	.word	0x2000032c

08006824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d063      	beq.n	8006902 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800683a:	4b34      	ldr	r3, [pc, #208]	; (800690c <xTaskPriorityDisinherit+0xe8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	429a      	cmp	r2, r3
 8006842:	d00a      	beq.n	800685a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	60fb      	str	r3, [r7, #12]
    }
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60bb      	str	r3, [r7, #8]
    }
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687c:	1e5a      	subs	r2, r3, #1
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688a:	429a      	cmp	r2, r3
 800688c:	d039      	beq.n	8006902 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d135      	bne.n	8006902 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	3304      	adds	r3, #4
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe faac 	bl	8004df8 <uxListRemove>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	2201      	movs	r2, #1
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	43da      	mvns	r2, r3
 80068b2:	4b17      	ldr	r3, [pc, #92]	; (8006910 <xTaskPriorityDisinherit+0xec>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4013      	ands	r3, r2
 80068b8:	4a15      	ldr	r2, [pc, #84]	; (8006910 <xTaskPriorityDisinherit+0xec>)
 80068ba:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	f1c3 0205 	rsb	r2, r3, #5
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	2201      	movs	r2, #1
 80068d6:	409a      	lsls	r2, r3
 80068d8:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <xTaskPriorityDisinherit+0xec>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4313      	orrs	r3, r2
 80068de:	4a0c      	ldr	r2, [pc, #48]	; (8006910 <xTaskPriorityDisinherit+0xec>)
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <xTaskPriorityDisinherit+0xf0>)
 80068f0:	441a      	add	r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7fe fa20 	bl	8004d3e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80068fe:	2301      	movs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006902:	697b      	ldr	r3, [r7, #20]
    }
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	2000022c 	.word	0x2000022c
 8006910:	2000030c 	.word	0x2000030c
 8006914:	20000230 	.word	0x20000230

08006918 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	613b      	str	r3, [r7, #16]
    }
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006942:	f001 f809 	bl	8007958 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006946:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <xTaskGenericNotifyWait+0xf8>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	3354      	adds	r3, #84	; 0x54
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d022      	beq.n	800699e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006958:	4b2d      	ldr	r3, [pc, #180]	; (8006a10 <xTaskGenericNotifyWait+0xf8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	3214      	adds	r2, #20
 8006960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	43d2      	mvns	r2, r2
 8006968:	4011      	ands	r1, r2
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	3214      	adds	r2, #20
 800696e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006972:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <xTaskGenericNotifyWait+0xf8>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	3354      	adds	r3, #84	; 0x54
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006986:	2101      	movs	r1, #1
 8006988:	6a38      	ldr	r0, [r7, #32]
 800698a:	f000 fac3 	bl	8006f14 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800698e:	4b21      	ldr	r3, [pc, #132]	; (8006a14 <xTaskGenericNotifyWait+0xfc>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800699e:	f001 f80b 	bl	80079b8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80069a2:	f000 ffd9 	bl	8007958 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80069ac:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <xTaskGenericNotifyWait+0xf8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	3214      	adds	r2, #20
 80069b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80069bc:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <xTaskGenericNotifyWait+0xf8>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	3354      	adds	r3, #84	; 0x54
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d002      	beq.n	80069d4 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	e00e      	b.n	80069f2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <xTaskGenericNotifyWait+0xf8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	3214      	adds	r2, #20
 80069dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	43d2      	mvns	r2, r2
 80069e4:	4011      	ands	r1, r2
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	3214      	adds	r2, #20
 80069ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <xTaskGenericNotifyWait+0xf8>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	3354      	adds	r3, #84	; 0x54
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006a00:	f000 ffda 	bl	80079b8 <vPortExitCritical>

        return xReturn;
 8006a04:	697b      	ldr	r3, [r7, #20]
    }
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	2000022c 	.word	0x2000022c
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08e      	sub	sp, #56	; 0x38
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006a26:	2301      	movs	r3, #1
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	623b      	str	r3, [r7, #32]
    }
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <xTaskGenericNotify+0x4a>
        __asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61fb      	str	r3, [r7, #28]
    }
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8006a66:	f000 ff77 	bl	8007958 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	3214      	adds	r2, #20
 8006a76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4413      	add	r3, r2
 8006a84:	3354      	adds	r3, #84	; 0x54
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	3354      	adds	r3, #84	; 0x54
 8006a94:	2202      	movs	r2, #2
 8006a96:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d83b      	bhi.n	8006b16 <xTaskGenericNotify+0xfe>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <xTaskGenericNotify+0x8c>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006b35 	.word	0x08006b35
 8006aa8:	08006ab9 	.word	0x08006ab9
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006aed 	.word	0x08006aed
 8006ab4:	08006afb 	.word	0x08006afb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	3214      	adds	r2, #20
 8006abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	ea42 0103 	orr.w	r1, r2, r3
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	3214      	adds	r2, #20
 8006ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ad2:	e032      	b.n	8006b3a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	3214      	adds	r2, #20
 8006ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ade:	1c59      	adds	r1, r3, #1
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	3214      	adds	r2, #20
 8006ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006aea:	e026      	b.n	8006b3a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	3214      	adds	r2, #20
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006af8:	e01f      	b.n	8006b3a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d006      	beq.n	8006b10 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	3214      	adds	r2, #20
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006b0e:	e014      	b.n	8006b3a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8006b14:	e011      	b.n	8006b3a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006b16:	4b4c      	ldr	r3, [pc, #304]	; (8006c48 <xTaskGenericNotify+0x230>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <xTaskGenericNotify+0x120>
        __asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	61bb      	str	r3, [r7, #24]
    }
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <xTaskGenericNotify+0x11a>
                    break;
 8006b34:	bf00      	nop
 8006b36:	e000      	b.n	8006b3a <xTaskGenericNotify+0x122>

                    break;
 8006b38:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d17b      	bne.n	8006c3a <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4e:	68d2      	ldr	r2, [r2, #12]
 8006b50:	609a      	str	r2, [r3, #8]
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b58:	6892      	ldr	r2, [r2, #8]
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	3304      	adds	r3, #4
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d103      	bne.n	8006b70 <xTaskGenericNotify+0x158>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	605a      	str	r2, [r3, #4]
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	2200      	movs	r2, #0
 8006b74:	615a      	str	r2, [r3, #20]
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	1e5a      	subs	r2, r3, #1
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	2201      	movs	r2, #1
 8006b86:	409a      	lsls	r2, r3
 8006b88:	4b30      	ldr	r3, [pc, #192]	; (8006c4c <xTaskGenericNotify+0x234>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	4a2f      	ldr	r2, [pc, #188]	; (8006c4c <xTaskGenericNotify+0x234>)
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	492e      	ldr	r1, [pc, #184]	; (8006c50 <xTaskGenericNotify+0x238>)
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	609a      	str	r2, [r3, #8]
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	60da      	str	r2, [r3, #12]
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbc:	3204      	adds	r2, #4
 8006bbe:	605a      	str	r2, [r3, #4]
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	609a      	str	r2, [r3, #8]
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <xTaskGenericNotify+0x238>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	615a      	str	r2, [r3, #20]
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	491b      	ldr	r1, [pc, #108]	; (8006c50 <xTaskGenericNotify+0x238>)
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	4817      	ldr	r0, [pc, #92]	; (8006c50 <xTaskGenericNotify+0x238>)
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4403      	add	r3, r0
 8006bfc:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <xTaskGenericNotify+0x204>
        __asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	617b      	str	r3, [r7, #20]
    }
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <xTaskGenericNotify+0x23c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d907      	bls.n	8006c3a <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006c2a:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <xTaskGenericNotify+0x240>)
 8006c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c3a:	f000 febd 	bl	80079b8 <vPortExitCritical>

        return xReturn;
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006c40:	4618      	mov	r0, r3
 8006c42:	3738      	adds	r7, #56	; 0x38
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20000308 	.word	0x20000308
 8006c4c:	2000030c 	.word	0x2000030c
 8006c50:	20000230 	.word	0x20000230
 8006c54:	2000022c 	.word	0x2000022c
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b092      	sub	sp, #72	; 0x48
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ca6:	f000 ff39 	bl	8007b1c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8006cae:	f3ef 8211 	mrs	r2, BASEPRI
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	623a      	str	r2, [r7, #32]
 8006cc4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006cc6:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	3214      	adds	r2, #20
 8006cd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cdc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3354      	adds	r3, #84	; 0x54
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006cec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3354      	adds	r3, #84	; 0x54
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d83b      	bhi.n	8006d76 <xTaskGenericNotifyFromISR+0x11a>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <xTaskGenericNotifyFromISR+0xa8>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d95 	.word	0x08006d95
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d4d 	.word	0x08006d4d
 8006d14:	08006d5b 	.word	0x08006d5b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	3214      	adds	r2, #20
 8006d1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	ea42 0103 	orr.w	r1, r2, r3
 8006d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	3214      	adds	r2, #20
 8006d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d32:	e032      	b.n	8006d9a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	3214      	adds	r2, #20
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	1c59      	adds	r1, r3, #1
 8006d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	3214      	adds	r2, #20
 8006d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d4a:	e026      	b.n	8006d9a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	3214      	adds	r2, #20
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d58:	e01f      	b.n	8006d9a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d006      	beq.n	8006d70 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	3214      	adds	r2, #20
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006d6e:	e014      	b.n	8006d9a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8006d74:	e011      	b.n	8006d9a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006d76:	4b60      	ldr	r3, [pc, #384]	; (8006ef8 <xTaskGenericNotifyFromISR+0x29c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00c      	beq.n	8006d98 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	61bb      	str	r3, [r7, #24]
    }
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006d98:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 809e 	bne.w	8006ee0 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	617b      	str	r3, [r7, #20]
    }
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc2:	4b4e      	ldr	r3, [pc, #312]	; (8006efc <xTaskGenericNotifyFromISR+0x2a0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d15e      	bne.n	8006e88 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd6:	68d2      	ldr	r2, [r2, #12]
 8006dd8:	609a      	str	r2, [r3, #8]
 8006dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006de0:	6892      	ldr	r2, [r2, #8]
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dea:	3304      	adds	r3, #4
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d103      	bne.n	8006df8 <xTaskGenericNotifyFromISR+0x19c>
 8006df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	605a      	str	r2, [r3, #4]
 8006df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	615a      	str	r2, [r3, #20]
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	1e5a      	subs	r2, r3, #1
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	4b3b      	ldr	r3, [pc, #236]	; (8006f00 <xTaskGenericNotifyFromISR+0x2a4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	4a3a      	ldr	r2, [pc, #232]	; (8006f00 <xTaskGenericNotifyFromISR+0x2a4>)
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	4939      	ldr	r1, [pc, #228]	; (8006f04 <xTaskGenericNotifyFromISR+0x2a8>)
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e34:	609a      	str	r2, [r3, #8]
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3c:	60da      	str	r2, [r3, #12]
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e44:	3204      	adds	r2, #4
 8006e46:	605a      	str	r2, [r3, #4]
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	609a      	str	r2, [r3, #8]
 8006e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4a29      	ldr	r2, [pc, #164]	; (8006f04 <xTaskGenericNotifyFromISR+0x2a8>)
 8006e5e:	441a      	add	r2, r3
 8006e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e62:	615a      	str	r2, [r3, #20]
 8006e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4926      	ldr	r1, [pc, #152]	; (8006f04 <xTaskGenericNotifyFromISR+0x2a8>)
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	1c59      	adds	r1, r3, #1
 8006e78:	4822      	ldr	r0, [pc, #136]	; (8006f04 <xTaskGenericNotifyFromISR+0x2a8>)
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4403      	add	r3, r0
 8006e84:	6019      	str	r1, [r3, #0]
 8006e86:	e01b      	b.n	8006ec0 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006e88:	4b1f      	ldr	r3, [pc, #124]	; (8006f08 <xTaskGenericNotifyFromISR+0x2ac>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e92:	61da      	str	r2, [r3, #28]
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9a:	621a      	str	r2, [r3, #32]
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ea2:	3218      	adds	r2, #24
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea8:	f103 0218 	add.w	r2, r3, #24
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	609a      	str	r2, [r3, #8]
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb2:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <xTaskGenericNotifyFromISR+0x2ac>)
 8006eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <xTaskGenericNotifyFromISR+0x2ac>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	4a12      	ldr	r2, [pc, #72]	; (8006f08 <xTaskGenericNotifyFromISR+0x2ac>)
 8006ebe:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <xTaskGenericNotifyFromISR+0x2b0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d908      	bls.n	8006ee0 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <xTaskGenericNotifyFromISR+0x2b4>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee2:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f383 8811 	msr	BASEPRI, r3
    }
 8006eea:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3748      	adds	r7, #72	; 0x48
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000308 	.word	0x20000308
 8006efc:	2000032c 	.word	0x2000032c
 8006f00:	2000030c 	.word	0x2000030c
 8006f04:	20000230 	.word	0x20000230
 8006f08:	200002c4 	.word	0x200002c4
 8006f0c:	2000022c 	.word	0x2000022c
 8006f10:	20000318 	.word	0x20000318

08006f14 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006f1e:	4b36      	ldr	r3, [pc, #216]	; (8006ff8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f24:	4b35      	ldr	r3, [pc, #212]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fd ff64 	bl	8004df8 <uxListRemove>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f36:	4b31      	ldr	r3, [pc, #196]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f42:	43da      	mvns	r2, r3
 8006f44:	4b2e      	ldr	r3, [pc, #184]	; (8007000 <prvAddCurrentTaskToDelayedList+0xec>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	4a2d      	ldr	r2, [pc, #180]	; (8007000 <prvAddCurrentTaskToDelayedList+0xec>)
 8006f4c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f54:	d124      	bne.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x8c>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d021      	beq.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f5c:	4b29      	ldr	r3, [pc, #164]	; (8007004 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	4b26      	ldr	r3, [pc, #152]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	609a      	str	r2, [r3, #8]
 8006f6a:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	6892      	ldr	r2, [r2, #8]
 8006f72:	60da      	str	r2, [r3, #12]
 8006f74:	4b21      	ldr	r3, [pc, #132]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	3204      	adds	r2, #4
 8006f7e:	605a      	str	r2, [r3, #4]
 8006f80:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	609a      	str	r2, [r3, #8]
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f90:	615a      	str	r2, [r3, #20]
 8006f92:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3301      	adds	r3, #1
 8006f98:	4a1a      	ldr	r2, [pc, #104]	; (8007004 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006f9e:	e026      	b.n	8006fee <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d209      	bcs.n	8006fcc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb8:	4b13      	ldr	r3, [pc, #76]	; (8007008 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f7fd fede 	bl	8004d86 <vListInsert>
}
 8006fca:	e010      	b.n	8006fee <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <prvAddCurrentTaskToDelayedList+0xf8>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fd fed4 	bl	8004d86 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d202      	bcs.n	8006fee <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6013      	str	r3, [r2, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000308 	.word	0x20000308
 8006ffc:	2000022c 	.word	0x2000022c
 8007000:	2000030c 	.word	0x2000030c
 8007004:	200002f0 	.word	0x200002f0
 8007008:	200002c0 	.word	0x200002c0
 800700c:	200002bc 	.word	0x200002bc
 8007010:	20000324 	.word	0x20000324

08007014 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800701a:	2300      	movs	r3, #0
 800701c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800701e:	f000 faef 	bl	8007600 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <xTimerCreateTimerTask+0x54>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800702a:	4b10      	ldr	r3, [pc, #64]	; (800706c <xTimerCreateTimerTask+0x58>)
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	2302      	movs	r3, #2
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	2300      	movs	r3, #0
 8007034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007038:	490d      	ldr	r1, [pc, #52]	; (8007070 <xTimerCreateTimerTask+0x5c>)
 800703a:	480e      	ldr	r0, [pc, #56]	; (8007074 <xTimerCreateTimerTask+0x60>)
 800703c:	f7fe fd06 	bl	8005a4c <xTaskCreate>
 8007040:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	603b      	str	r3, [r7, #0]
    }
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800705e:	687b      	ldr	r3, [r7, #4]
    }
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000360 	.word	0x20000360
 800706c:	20000364 	.word	0x20000364
 8007070:	08009658 	.word	0x08009658
 8007074:	0800726d 	.word	0x0800726d

08007078 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007086:	202c      	movs	r0, #44	; 0x2c
 8007088:	f000 fd88 	bl	8007b9c <pvPortMalloc>
 800708c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f805 	bl	80070ba <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80070b0:	697b      	ldr	r3, [r7, #20]
        }
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b086      	sub	sp, #24
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	617b      	str	r3, [r7, #20]
    }
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80070e4:	f000 fa8c 	bl	8007600 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	3304      	adds	r3, #4
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd fe0d 	bl	8004d24 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007116:	f043 0304 	orr.w	r3, r3, #4
 800711a:	b2da      	uxtb	r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007122:	bf00      	nop
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800712c:	b580      	push	{r7, lr}
 800712e:	b08a      	sub	sp, #40	; 0x28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xTimerGenericCommand+0x2e>
        __asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	623b      	str	r3, [r7, #32]
    }
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800715a:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <xTimerGenericCommand+0x98>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d02a      	beq.n	80071b8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b05      	cmp	r3, #5
 8007172:	dc18      	bgt.n	80071a6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007174:	f7ff fb38 	bl	80067e8 <xTaskGetSchedulerState>
 8007178:	4603      	mov	r3, r0
 800717a:	2b02      	cmp	r3, #2
 800717c:	d109      	bne.n	8007192 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800717e:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <xTimerGenericCommand+0x98>)
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	f107 0114 	add.w	r1, r7, #20
 8007186:	2300      	movs	r3, #0
 8007188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800718a:	f7fd ff61 	bl	8005050 <xQueueGenericSend>
 800718e:	6278      	str	r0, [r7, #36]	; 0x24
 8007190:	e012      	b.n	80071b8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <xTimerGenericCommand+0x98>)
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	f107 0114 	add.w	r1, r7, #20
 800719a:	2300      	movs	r3, #0
 800719c:	2200      	movs	r2, #0
 800719e:	f7fd ff57 	bl	8005050 <xQueueGenericSend>
 80071a2:	6278      	str	r0, [r7, #36]	; 0x24
 80071a4:	e008      	b.n	80071b8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <xTimerGenericCommand+0x98>)
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f107 0114 	add.w	r1, r7, #20
 80071ae:	2300      	movs	r3, #0
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	f7fe f84b 	bl	800524c <xQueueGenericSendFromISR>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80071ba:	4618      	mov	r0, r3
 80071bc:	3728      	adds	r7, #40	; 0x28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000360 	.word	0x20000360

080071c8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80071d4:	e008      	b.n	80071e8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	18d1      	adds	r1, r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f8dd 	bl	80073b4 <prvInsertTimerInActiveList>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1ea      	bne.n	80071d6 <prvReloadTimer+0xe>
        }
    }
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007216:	4b14      	ldr	r3, [pc, #80]	; (8007268 <prvProcessExpiredTimer+0x5c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3304      	adds	r3, #4
 8007224:	4618      	mov	r0, r3
 8007226:	f7fd fde7 	bl	8004df8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff ffc3 	bl	80071c8 <prvReloadTimer>
 8007242:	e008      	b.n	8007256 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	4798      	blx	r3
    }
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000358 	.word	0x20000358

0800726c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007274:	f107 0308 	add.w	r3, r7, #8
 8007278:	4618      	mov	r0, r3
 800727a:	f000 f857 	bl	800732c <prvGetNextExpireTime>
 800727e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4619      	mov	r1, r3
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f803 	bl	8007290 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800728a:	f000 f8d5 	bl	8007438 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800728e:	e7f1      	b.n	8007274 <prvTimerTask+0x8>

08007290 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800729a:	f7fe fd93 	bl	8005dc4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f866 	bl	8007374 <prvSampleTimeNow>
 80072a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d130      	bne.n	8007312 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <prvProcessTimerOrBlockTask+0x3c>
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d806      	bhi.n	80072cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80072be:	f7fe fd8f 	bl	8005de0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff ffa1 	bl	800720c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80072ca:	e024      	b.n	8007316 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d008      	beq.n	80072e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072d2:	4b13      	ldr	r3, [pc, #76]	; (8007320 <prvProcessTimerOrBlockTask+0x90>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <prvProcessTimerOrBlockTask+0x50>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x52>
 80072e0:	2300      	movs	r3, #0
 80072e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <prvProcessTimerOrBlockTask+0x94>)
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f7fe fb77 	bl	80059e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80072f6:	f7fe fd73 	bl	8005de0 <xTaskResumeAll>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007300:	4b09      	ldr	r3, [pc, #36]	; (8007328 <prvProcessTimerOrBlockTask+0x98>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
    }
 8007310:	e001      	b.n	8007316 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007312:	f7fe fd65 	bl	8005de0 <xTaskResumeAll>
    }
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	2000035c 	.word	0x2000035c
 8007324:	20000360 	.word	0x20000360
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <prvGetNextExpireTime+0x44>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <prvGetNextExpireTime+0x16>
 800733e:	2201      	movs	r2, #1
 8007340:	e000      	b.n	8007344 <prvGetNextExpireTime+0x18>
 8007342:	2200      	movs	r2, #0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <prvGetNextExpireTime+0x44>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e001      	b.n	8007360 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007360:	68fb      	ldr	r3, [r7, #12]
    }
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20000358 	.word	0x20000358

08007374 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800737c:	f7fe fe2c 	bl	8005fd8 <xTaskGetTickCount>
 8007380:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007382:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <prvSampleTimeNow+0x3c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	429a      	cmp	r2, r3
 800738a:	d205      	bcs.n	8007398 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800738c:	f000 f912 	bl	80075b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e002      	b.n	800739e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800739e:	4a04      	ldr	r2, [pc, #16]	; (80073b0 <prvSampleTimeNow+0x3c>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80073a4:	68fb      	ldr	r3, [r7, #12]
    }
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000368 	.word	0x20000368

080073b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d812      	bhi.n	8007400 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d302      	bcc.n	80073ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e01b      	b.n	8007426 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073ee:	4b10      	ldr	r3, [pc, #64]	; (8007430 <prvInsertTimerInActiveList+0x7c>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fd fcc4 	bl	8004d86 <vListInsert>
 80073fe:	e012      	b.n	8007426 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d206      	bcs.n	8007416 <prvInsertTimerInActiveList+0x62>
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e007      	b.n	8007426 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007416:	4b07      	ldr	r3, [pc, #28]	; (8007434 <prvInsertTimerInActiveList+0x80>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7fd fcb0 	bl	8004d86 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007426:	697b      	ldr	r3, [r7, #20]
    }
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	2000035c 	.word	0x2000035c
 8007434:	20000358 	.word	0x20000358

08007438 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800743e:	e0a6      	b.n	800758e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f2c0 80a2 	blt.w	800758c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3304      	adds	r3, #4
 8007458:	4618      	mov	r0, r3
 800745a:	f7fd fccd 	bl	8004df8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff ff87 	bl	8007374 <prvSampleTimeNow>
 8007466:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3b01      	subs	r3, #1
 800746c:	2b08      	cmp	r3, #8
 800746e:	f200 808e 	bhi.w	800758e <prvProcessReceivedCommands+0x156>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <prvProcessReceivedCommands+0x40>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	0800749d 	.word	0x0800749d
 800747c:	0800749d 	.word	0x0800749d
 8007480:	08007505 	.word	0x08007505
 8007484:	08007519 	.word	0x08007519
 8007488:	08007563 	.word	0x08007563
 800748c:	0800749d 	.word	0x0800749d
 8007490:	0800749d 	.word	0x0800749d
 8007494:	08007505 	.word	0x08007505
 8007498:	08007519 	.word	0x08007519
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a2:	f043 0301 	orr.w	r3, r3, #1
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	18d1      	adds	r1, r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	69f8      	ldr	r0, [r7, #28]
 80074bc:	f7ff ff7a 	bl	80073b4 <prvInsertTimerInActiveList>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d063      	beq.n	800758e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d009      	beq.n	80074e8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	4413      	add	r3, r2
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4619      	mov	r1, r3
 80074e0:	69f8      	ldr	r0, [r7, #28]
 80074e2:	f7ff fe71 	bl	80071c8 <prvReloadTimer>
 80074e6:	e008      	b.n	80074fa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	69f8      	ldr	r0, [r7, #28]
 8007500:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007502:	e044      	b.n	800758e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007516:	e03a      	b.n	800758e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	617b      	str	r3, [r7, #20]
    }
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	18d1      	adds	r1, r2, r3
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	69f8      	ldr	r0, [r7, #28]
 800755c:	f7ff ff2a 	bl	80073b4 <prvInsertTimerInActiveList>
                        break;
 8007560:	e015      	b.n	800758e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007570:	69f8      	ldr	r0, [r7, #28]
 8007572:	f000 fbcd 	bl	8007d10 <vPortFree>
 8007576:	e00a      	b.n	800758e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800758a:	e000      	b.n	800758e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800758c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800758e:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <prvProcessReceivedCommands+0x178>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f107 0108 	add.w	r1, r7, #8
 8007596:	2200      	movs	r2, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f7fd ff09 	bl	80053b0 <xQueueReceive>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f47f af4d 	bne.w	8007440 <prvProcessReceivedCommands+0x8>
        }
    }
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	3720      	adds	r7, #32
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000360 	.word	0x20000360

080075b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ba:	e009      	b.n	80075d0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <prvSwitchTimerLists+0x44>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80075c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075ca:	6838      	ldr	r0, [r7, #0]
 80075cc:	f7ff fe1e 	bl	800720c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <prvSwitchTimerLists+0x44>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f0      	bne.n	80075bc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <prvSwitchTimerLists+0x44>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80075e0:	4b06      	ldr	r3, [pc, #24]	; (80075fc <prvSwitchTimerLists+0x48>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <prvSwitchTimerLists+0x44>)
 80075e6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80075e8:	4a04      	ldr	r2, [pc, #16]	; (80075fc <prvSwitchTimerLists+0x48>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6013      	str	r3, [r2, #0]
    }
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000358 	.word	0x20000358
 80075fc:	2000035c 	.word	0x2000035c

08007600 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007604:	f000 f9a8 	bl	8007958 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007608:	4b12      	ldr	r3, [pc, #72]	; (8007654 <prvCheckForValidListAndQueue+0x54>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11d      	bne.n	800764c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007610:	4811      	ldr	r0, [pc, #68]	; (8007658 <prvCheckForValidListAndQueue+0x58>)
 8007612:	f7fd fb67 	bl	8004ce4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007616:	4811      	ldr	r0, [pc, #68]	; (800765c <prvCheckForValidListAndQueue+0x5c>)
 8007618:	f7fd fb64 	bl	8004ce4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <prvCheckForValidListAndQueue+0x60>)
 800761e:	4a0e      	ldr	r2, [pc, #56]	; (8007658 <prvCheckForValidListAndQueue+0x58>)
 8007620:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007622:	4b10      	ldr	r3, [pc, #64]	; (8007664 <prvCheckForValidListAndQueue+0x64>)
 8007624:	4a0d      	ldr	r2, [pc, #52]	; (800765c <prvCheckForValidListAndQueue+0x5c>)
 8007626:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007628:	2200      	movs	r2, #0
 800762a:	210c      	movs	r1, #12
 800762c:	200a      	movs	r0, #10
 800762e:	f7fd fc9d 	bl	8004f6c <xQueueGenericCreate>
 8007632:	4603      	mov	r3, r0
 8007634:	4a07      	ldr	r2, [pc, #28]	; (8007654 <prvCheckForValidListAndQueue+0x54>)
 8007636:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007638:	4b06      	ldr	r3, [pc, #24]	; (8007654 <prvCheckForValidListAndQueue+0x54>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007640:	4b04      	ldr	r3, [pc, #16]	; (8007654 <prvCheckForValidListAndQueue+0x54>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4908      	ldr	r1, [pc, #32]	; (8007668 <prvCheckForValidListAndQueue+0x68>)
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe f97e 	bl	8005948 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800764c:	f000 f9b4 	bl	80079b8 <vPortExitCritical>
    }
 8007650:	bf00      	nop
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20000360 	.word	0x20000360
 8007658:	20000330 	.word	0x20000330
 800765c:	20000344 	.word	0x20000344
 8007660:	20000358 	.word	0x20000358
 8007664:	2000035c 	.word	0x2000035c
 8007668:	08009660 	.word	0x08009660

0800766c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10a      	bne.n	8007694 <xTimerIsTimerActive+0x28>
        __asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60fb      	str	r3, [r7, #12]
    }
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007694:	f000 f960 	bl	8007958 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	e001      	b.n	80076b0 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80076ac:	2301      	movs	r3, #1
 80076ae:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80076b0:	f000 f982 	bl	80079b8 <vPortExitCritical>

        return xReturn;
 80076b4:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80076be:	b580      	push	{r7, lr}
 80076c0:	b086      	sub	sp, #24
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <pvTimerGetTimerID+0x28>
        __asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
    }
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80076e6:	f000 f937 	bl	8007958 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80076f0:	f000 f962 	bl	80079b8 <vPortExitCritical>

        return pvReturn;
 80076f4:	693b      	ldr	r3, [r7, #16]
    }
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3b04      	subs	r3, #4
 8007710:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007718:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b04      	subs	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f023 0201 	bic.w	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007730:	4a0c      	ldr	r2, [pc, #48]	; (8007764 <pxPortInitialiseStack+0x64>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b14      	subs	r3, #20
 800773a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3b04      	subs	r3, #4
 8007746:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f06f 0202 	mvn.w	r2, #2
 800774e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3b20      	subs	r3, #32
 8007754:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	08007769 	.word	0x08007769

08007768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <prvTaskExitError+0x54>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800777a:	d00a      	beq.n	8007792 <prvTaskExitError+0x2a>
        __asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60fb      	str	r3, [r7, #12]
    }
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <prvTaskExitError+0x28>
        __asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60bb      	str	r3, [r7, #8]
    }
 80077a4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80077a6:	bf00      	nop
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0fc      	beq.n	80077a8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	20000024 	.word	0x20000024

080077c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <pxCurrentTCBConst2>)
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	6808      	ldr	r0, [r1, #0]
 80077c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	f380 8809 	msr	PSP, r0
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f04f 0000 	mov.w	r0, #0
 80077d6:	f380 8811 	msr	BASEPRI, r0
 80077da:	4770      	bx	lr
 80077dc:	f3af 8000 	nop.w

080077e0 <pxCurrentTCBConst2>:
 80077e0:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop

080077e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80077e8:	4808      	ldr	r0, [pc, #32]	; (800780c <prvPortStartFirstTask+0x24>)
 80077ea:	6800      	ldr	r0, [r0, #0]
 80077ec:	6800      	ldr	r0, [r0, #0]
 80077ee:	f380 8808 	msr	MSP, r0
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8814 	msr	CONTROL, r0
 80077fa:	b662      	cpsie	i
 80077fc:	b661      	cpsie	f
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	df00      	svc	0
 8007808:	bf00      	nop
 800780a:	0000      	.short	0x0000
 800780c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop

08007814 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800781a:	4b46      	ldr	r3, [pc, #280]	; (8007934 <xPortStartScheduler+0x120>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a46      	ldr	r2, [pc, #280]	; (8007938 <xPortStartScheduler+0x124>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d10a      	bne.n	800783a <xPortStartScheduler+0x26>
        __asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	613b      	str	r3, [r7, #16]
    }
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800783a:	4b3e      	ldr	r3, [pc, #248]	; (8007934 <xPortStartScheduler+0x120>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a3f      	ldr	r2, [pc, #252]	; (800793c <xPortStartScheduler+0x128>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d10a      	bne.n	800785a <xPortStartScheduler+0x46>
        __asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	60fb      	str	r3, [r7, #12]
    }
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800785a:	4b39      	ldr	r3, [pc, #228]	; (8007940 <xPortStartScheduler+0x12c>)
 800785c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	22ff      	movs	r2, #255	; 0xff
 800786a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800787c:	b2da      	uxtb	r2, r3
 800787e:	4b31      	ldr	r3, [pc, #196]	; (8007944 <xPortStartScheduler+0x130>)
 8007880:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007882:	4b31      	ldr	r3, [pc, #196]	; (8007948 <xPortStartScheduler+0x134>)
 8007884:	2207      	movs	r2, #7
 8007886:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007888:	e009      	b.n	800789e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800788a:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <xPortStartScheduler+0x134>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3b01      	subs	r3, #1
 8007890:	4a2d      	ldr	r2, [pc, #180]	; (8007948 <xPortStartScheduler+0x134>)
 8007892:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	b2db      	uxtb	r3, r3
 800789c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a6:	2b80      	cmp	r3, #128	; 0x80
 80078a8:	d0ef      	beq.n	800788a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078aa:	4b27      	ldr	r3, [pc, #156]	; (8007948 <xPortStartScheduler+0x134>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f1c3 0307 	rsb	r3, r3, #7
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d00a      	beq.n	80078cc <xPortStartScheduler+0xb8>
        __asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	60bb      	str	r3, [r7, #8]
    }
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078cc:	4b1e      	ldr	r3, [pc, #120]	; (8007948 <xPortStartScheduler+0x134>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <xPortStartScheduler+0x134>)
 80078d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078d6:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <xPortStartScheduler+0x134>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078de:	4a1a      	ldr	r2, [pc, #104]	; (8007948 <xPortStartScheduler+0x134>)
 80078e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80078ea:	4b18      	ldr	r3, [pc, #96]	; (800794c <xPortStartScheduler+0x138>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a17      	ldr	r2, [pc, #92]	; (800794c <xPortStartScheduler+0x138>)
 80078f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80078f6:	4b15      	ldr	r3, [pc, #84]	; (800794c <xPortStartScheduler+0x138>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a14      	ldr	r2, [pc, #80]	; (800794c <xPortStartScheduler+0x138>)
 80078fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007900:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007902:	f000 f8db 	bl	8007abc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <xPortStartScheduler+0x13c>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800790c:	f000 f8fa 	bl	8007b04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007910:	4b10      	ldr	r3, [pc, #64]	; (8007954 <xPortStartScheduler+0x140>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a0f      	ldr	r2, [pc, #60]	; (8007954 <xPortStartScheduler+0x140>)
 8007916:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800791a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800791c:	f7ff ff64 	bl	80077e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007920:	f7fe fc8c 	bl	800623c <vTaskSwitchContext>
    prvTaskExitError();
 8007924:	f7ff ff20 	bl	8007768 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	e000ed00 	.word	0xe000ed00
 8007938:	410fc271 	.word	0x410fc271
 800793c:	410fc270 	.word	0x410fc270
 8007940:	e000e400 	.word	0xe000e400
 8007944:	2000036c 	.word	0x2000036c
 8007948:	20000370 	.word	0x20000370
 800794c:	e000ed20 	.word	0xe000ed20
 8007950:	20000024 	.word	0x20000024
 8007954:	e000ef34 	.word	0xe000ef34

08007958 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
        __asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	607b      	str	r3, [r7, #4]
    }
 8007970:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007972:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <vPortEnterCritical+0x58>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3301      	adds	r3, #1
 8007978:	4a0d      	ldr	r2, [pc, #52]	; (80079b0 <vPortEnterCritical+0x58>)
 800797a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <vPortEnterCritical+0x58>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10f      	bne.n	80079a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007984:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <vPortEnterCritical+0x5c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	603b      	str	r3, [r7, #0]
    }
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <vPortEnterCritical+0x4a>
    }
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	20000024 	.word	0x20000024
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <vPortExitCritical+0x50>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <vPortExitCritical+0x24>
        __asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	607b      	str	r3, [r7, #4]
    }
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <vPortExitCritical+0x50>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	4a09      	ldr	r2, [pc, #36]	; (8007a08 <vPortExitCritical+0x50>)
 80079e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <vPortExitCritical+0x50>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <vPortExitCritical+0x42>
 80079ee:	2300      	movs	r3, #0
 80079f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f383 8811 	msr	BASEPRI, r3
    }
 80079f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	20000024 	.word	0x20000024
 8007a0c:	00000000 	.word	0x00000000

08007a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007a10:	f3ef 8009 	mrs	r0, PSP
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4b15      	ldr	r3, [pc, #84]	; (8007a70 <pxCurrentTCBConst>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	f01e 0f10 	tst.w	lr, #16
 8007a20:	bf08      	it	eq
 8007a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2a:	6010      	str	r0, [r2, #0]
 8007a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a34:	f380 8811 	msr	BASEPRI, r0
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f7fe fbfc 	bl	800623c <vTaskSwitchContext>
 8007a44:	f04f 0000 	mov.w	r0, #0
 8007a48:	f380 8811 	msr	BASEPRI, r0
 8007a4c:	bc09      	pop	{r0, r3}
 8007a4e:	6819      	ldr	r1, [r3, #0]
 8007a50:	6808      	ldr	r0, [r1, #0]
 8007a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a56:	f01e 0f10 	tst.w	lr, #16
 8007a5a:	bf08      	it	eq
 8007a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a60:	f380 8809 	msr	PSP, r0
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	f3af 8000 	nop.w

08007a70 <pxCurrentTCBConst>:
 8007a70:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop

08007a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
        __asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	607b      	str	r3, [r7, #4]
    }
 8007a90:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007a92:	f7fe fabd 	bl	8006010 <xTaskIncrementTick>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a9c:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <SysTick_Handler+0x40>)
 8007a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f383 8811 	msr	BASEPRI, r3
    }
 8007aae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <vPortSetupTimerInterrupt+0x34>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <vPortSetupTimerInterrupt+0x38>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <vPortSetupTimerInterrupt+0x3c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <vPortSetupTimerInterrupt+0x40>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	099b      	lsrs	r3, r3, #6
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <vPortSetupTimerInterrupt+0x44>)
 8007ada:	3b01      	subs	r3, #1
 8007adc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <vPortSetupTimerInterrupt+0x34>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	e000e010 	.word	0xe000e010
 8007af4:	e000e018 	.word	0xe000e018
 8007af8:	20000010 	.word	0x20000010
 8007afc:	10624dd3 	.word	0x10624dd3
 8007b00:	e000e014 	.word	0xe000e014

08007b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b14 <vPortEnableVFP+0x10>
 8007b08:	6801      	ldr	r1, [r0, #0]
 8007b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b0e:	6001      	str	r1, [r0, #0]
 8007b10:	4770      	bx	lr
 8007b12:	0000      	.short	0x0000
 8007b14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop

08007b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007b22:	f3ef 8305 	mrs	r3, IPSR
 8007b26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b0f      	cmp	r3, #15
 8007b2c:	d914      	bls.n	8007b58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b2e:	4a17      	ldr	r2, [pc, #92]	; (8007b8c <vPortValidateInterruptPriority+0x70>)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <vPortValidateInterruptPriority+0x74>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	7afa      	ldrb	r2, [r7, #11]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d20a      	bcs.n	8007b58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	607b      	str	r3, [r7, #4]
    }
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b58:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <vPortValidateInterruptPriority+0x78>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b60:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <vPortValidateInterruptPriority+0x7c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d90a      	bls.n	8007b7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	603b      	str	r3, [r7, #0]
    }
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <vPortValidateInterruptPriority+0x60>
    }
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	e000e3f0 	.word	0xe000e3f0
 8007b90:	2000036c 	.word	0x2000036c
 8007b94:	e000ed0c 	.word	0xe000ed0c
 8007b98:	20000370 	.word	0x20000370

08007b9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08a      	sub	sp, #40	; 0x28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007ba8:	f7fe f90c 	bl	8005dc4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007bac:	4b53      	ldr	r3, [pc, #332]	; (8007cfc <pvPortMalloc+0x160>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007bb4:	f000 f908 	bl	8007dc8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d012      	beq.n	8007be4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	3308      	adds	r3, #8
 8007bca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d804      	bhi.n	8007be0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	4413      	add	r3, r2
 8007bdc:	607b      	str	r3, [r7, #4]
 8007bde:	e001      	b.n	8007be4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	db70      	blt.n	8007ccc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d06d      	beq.n	8007ccc <pvPortMalloc+0x130>
 8007bf0:	4b43      	ldr	r3, [pc, #268]	; (8007d00 <pvPortMalloc+0x164>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d868      	bhi.n	8007ccc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007bfa:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <pvPortMalloc+0x168>)
 8007bfc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007bfe:	4b41      	ldr	r3, [pc, #260]	; (8007d04 <pvPortMalloc+0x168>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c04:	e004      	b.n	8007c10 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <pvPortMalloc+0x86>
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1f1      	bne.n	8007c06 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007c22:	4b36      	ldr	r3, [pc, #216]	; (8007cfc <pvPortMalloc+0x160>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d04f      	beq.n	8007ccc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2208      	movs	r2, #8
 8007c32:	4413      	add	r3, r2
 8007c34:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	1ad2      	subs	r2, r2, r3
 8007c46:	2308      	movs	r3, #8
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d91f      	bls.n	8007c8e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <pvPortMalloc+0xda>
        __asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
    }
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	1ad2      	subs	r2, r2, r3
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c88:	6978      	ldr	r0, [r7, #20]
 8007c8a:	f000 f8f9 	bl	8007e80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c8e:	4b1c      	ldr	r3, [pc, #112]	; (8007d00 <pvPortMalloc+0x164>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <pvPortMalloc+0x164>)
 8007c9a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c9c:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <pvPortMalloc+0x164>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <pvPortMalloc+0x16c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d203      	bcs.n	8007cb0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <pvPortMalloc+0x164>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a16      	ldr	r2, [pc, #88]	; (8007d08 <pvPortMalloc+0x16c>)
 8007cae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <pvPortMalloc+0x170>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <pvPortMalloc+0x170>)
 8007cca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007ccc:	f7fe f888 	bl	8005de0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <pvPortMalloc+0x154>
        __asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60fb      	str	r3, [r7, #12]
    }
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <pvPortMalloc+0x152>
    return pvReturn;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3728      	adds	r7, #40	; 0x28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20012f7c 	.word	0x20012f7c
 8007d00:	20012f80 	.word	0x20012f80
 8007d04:	20012f74 	.word	0x20012f74
 8007d08:	20012f84 	.word	0x20012f84
 8007d0c:	20012f88 	.word	0x20012f88

08007d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d049      	beq.n	8007db6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007d22:	2308      	movs	r3, #8
 8007d24:	425b      	negs	r3, r3
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4413      	add	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	db0a      	blt.n	8007d4e <vPortFree+0x3e>
        __asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	60fb      	str	r3, [r7, #12]
    }
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <vPortFree+0x5c>
        __asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60bb      	str	r3, [r7, #8]
    }
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	0fdb      	lsrs	r3, r3, #31
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01c      	beq.n	8007db6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d118      	bne.n	8007db6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007d90:	f7fe f818 	bl	8005dc4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <vPortFree+0xb0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	4a08      	ldr	r2, [pc, #32]	; (8007dc0 <vPortFree+0xb0>)
 8007da0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007da2:	6938      	ldr	r0, [r7, #16]
 8007da4:	f000 f86c 	bl	8007e80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <vPortFree+0xb4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	4a05      	ldr	r2, [pc, #20]	; (8007dc4 <vPortFree+0xb4>)
 8007db0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007db2:	f7fe f815 	bl	8005de0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007db6:	bf00      	nop
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20012f80 	.word	0x20012f80
 8007dc4:	20012f8c 	.word	0x20012f8c

08007dc8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007dd2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007dd4:	4b25      	ldr	r3, [pc, #148]	; (8007e6c <prvHeapInit+0xa4>)
 8007dd6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00c      	beq.n	8007dfc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3307      	adds	r3, #7
 8007de6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	4a1d      	ldr	r2, [pc, #116]	; (8007e6c <prvHeapInit+0xa4>)
 8007df8:	4413      	add	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e00:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <prvHeapInit+0xa8>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <prvHeapInit+0xa8>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4413      	add	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007e14:	2208      	movs	r2, #8
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0307 	bic.w	r3, r3, #7
 8007e22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <prvHeapInit+0xac>)
 8007e28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <prvHeapInit+0xac>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007e32:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <prvHeapInit+0xac>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	1ad2      	subs	r2, r2, r3
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <prvHeapInit+0xac>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4a08      	ldr	r2, [pc, #32]	; (8007e78 <prvHeapInit+0xb0>)
 8007e56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a07      	ldr	r2, [pc, #28]	; (8007e7c <prvHeapInit+0xb4>)
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	bf00      	nop
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	20000374 	.word	0x20000374
 8007e70:	20012f74 	.word	0x20012f74
 8007e74:	20012f7c 	.word	0x20012f7c
 8007e78:	20012f84 	.word	0x20012f84
 8007e7c:	20012f80 	.word	0x20012f80

08007e80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e88:	4b28      	ldr	r3, [pc, #160]	; (8007f2c <prvInsertBlockIntoFreeList+0xac>)
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e002      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x14>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d8f7      	bhi.n	8007e8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d108      	bne.n	8007ec2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	441a      	add	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d118      	bne.n	8007f08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <prvInsertBlockIntoFreeList+0xb0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d00d      	beq.n	8007efe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	441a      	add	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	e008      	b.n	8007f10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007efe:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <prvInsertBlockIntoFreeList+0xb0>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e003      	b.n	8007f10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d002      	beq.n	8007f1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	20012f74 	.word	0x20012f74
 8007f30:	20012f7c 	.word	0x20012f7c

08007f34 <__errno>:
 8007f34:	4b01      	ldr	r3, [pc, #4]	; (8007f3c <__errno+0x8>)
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000028 	.word	0x20000028

08007f40 <__libc_init_array>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4d0d      	ldr	r5, [pc, #52]	; (8007f78 <__libc_init_array+0x38>)
 8007f44:	4c0d      	ldr	r4, [pc, #52]	; (8007f7c <__libc_init_array+0x3c>)
 8007f46:	1b64      	subs	r4, r4, r5
 8007f48:	10a4      	asrs	r4, r4, #2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	42a6      	cmp	r6, r4
 8007f4e:	d109      	bne.n	8007f64 <__libc_init_array+0x24>
 8007f50:	4d0b      	ldr	r5, [pc, #44]	; (8007f80 <__libc_init_array+0x40>)
 8007f52:	4c0c      	ldr	r4, [pc, #48]	; (8007f84 <__libc_init_array+0x44>)
 8007f54:	f001 f98a 	bl	800926c <_init>
 8007f58:	1b64      	subs	r4, r4, r5
 8007f5a:	10a4      	asrs	r4, r4, #2
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	42a6      	cmp	r6, r4
 8007f60:	d105      	bne.n	8007f6e <__libc_init_array+0x2e>
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f68:	4798      	blx	r3
 8007f6a:	3601      	adds	r6, #1
 8007f6c:	e7ee      	b.n	8007f4c <__libc_init_array+0xc>
 8007f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f72:	4798      	blx	r3
 8007f74:	3601      	adds	r6, #1
 8007f76:	e7f2      	b.n	8007f5e <__libc_init_array+0x1e>
 8007f78:	08009720 	.word	0x08009720
 8007f7c:	08009720 	.word	0x08009720
 8007f80:	08009720 	.word	0x08009720
 8007f84:	08009724 	.word	0x08009724

08007f88 <memcpy>:
 8007f88:	440a      	add	r2, r1
 8007f8a:	4291      	cmp	r1, r2
 8007f8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f90:	d100      	bne.n	8007f94 <memcpy+0xc>
 8007f92:	4770      	bx	lr
 8007f94:	b510      	push	{r4, lr}
 8007f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	d1f9      	bne.n	8007f96 <memcpy+0xe>
 8007fa2:	bd10      	pop	{r4, pc}

08007fa4 <memset>:
 8007fa4:	4402      	add	r2, r0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d100      	bne.n	8007fae <memset+0xa>
 8007fac:	4770      	bx	lr
 8007fae:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb2:	e7f9      	b.n	8007fa8 <memset+0x4>

08007fb4 <iprintf>:
 8007fb4:	b40f      	push	{r0, r1, r2, r3}
 8007fb6:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <iprintf+0x2c>)
 8007fb8:	b513      	push	{r0, r1, r4, lr}
 8007fba:	681c      	ldr	r4, [r3, #0]
 8007fbc:	b124      	cbz	r4, 8007fc8 <iprintf+0x14>
 8007fbe:	69a3      	ldr	r3, [r4, #24]
 8007fc0:	b913      	cbnz	r3, 8007fc8 <iprintf+0x14>
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 f886 	bl	80080d4 <__sinit>
 8007fc8:	ab05      	add	r3, sp, #20
 8007fca:	9a04      	ldr	r2, [sp, #16]
 8007fcc:	68a1      	ldr	r1, [r4, #8]
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fb39 	bl	8008648 <_vfiprintf_r>
 8007fd6:	b002      	add	sp, #8
 8007fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fdc:	b004      	add	sp, #16
 8007fde:	4770      	bx	lr
 8007fe0:	20000028 	.word	0x20000028

08007fe4 <siprintf>:
 8007fe4:	b40e      	push	{r1, r2, r3}
 8007fe6:	b500      	push	{lr}
 8007fe8:	b09c      	sub	sp, #112	; 0x70
 8007fea:	ab1d      	add	r3, sp, #116	; 0x74
 8007fec:	9002      	str	r0, [sp, #8]
 8007fee:	9006      	str	r0, [sp, #24]
 8007ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ff4:	4809      	ldr	r0, [pc, #36]	; (800801c <siprintf+0x38>)
 8007ff6:	9107      	str	r1, [sp, #28]
 8007ff8:	9104      	str	r1, [sp, #16]
 8007ffa:	4909      	ldr	r1, [pc, #36]	; (8008020 <siprintf+0x3c>)
 8007ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008000:	9105      	str	r1, [sp, #20]
 8008002:	6800      	ldr	r0, [r0, #0]
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	a902      	add	r1, sp, #8
 8008008:	f000 f9f4 	bl	80083f4 <_svfiprintf_r>
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	b01c      	add	sp, #112	; 0x70
 8008014:	f85d eb04 	ldr.w	lr, [sp], #4
 8008018:	b003      	add	sp, #12
 800801a:	4770      	bx	lr
 800801c:	20000028 	.word	0x20000028
 8008020:	ffff0208 	.word	0xffff0208

08008024 <std>:
 8008024:	2300      	movs	r3, #0
 8008026:	b510      	push	{r4, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	e9c0 3300 	strd	r3, r3, [r0]
 800802e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008032:	6083      	str	r3, [r0, #8]
 8008034:	8181      	strh	r1, [r0, #12]
 8008036:	6643      	str	r3, [r0, #100]	; 0x64
 8008038:	81c2      	strh	r2, [r0, #14]
 800803a:	6183      	str	r3, [r0, #24]
 800803c:	4619      	mov	r1, r3
 800803e:	2208      	movs	r2, #8
 8008040:	305c      	adds	r0, #92	; 0x5c
 8008042:	f7ff ffaf 	bl	8007fa4 <memset>
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <std+0x38>)
 8008048:	6263      	str	r3, [r4, #36]	; 0x24
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <std+0x3c>)
 800804c:	62a3      	str	r3, [r4, #40]	; 0x28
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <std+0x40>)
 8008050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <std+0x44>)
 8008054:	6224      	str	r4, [r4, #32]
 8008056:	6323      	str	r3, [r4, #48]	; 0x30
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	08008bf1 	.word	0x08008bf1
 8008060:	08008c13 	.word	0x08008c13
 8008064:	08008c4b 	.word	0x08008c4b
 8008068:	08008c6f 	.word	0x08008c6f

0800806c <_cleanup_r>:
 800806c:	4901      	ldr	r1, [pc, #4]	; (8008074 <_cleanup_r+0x8>)
 800806e:	f000 b8af 	b.w	80081d0 <_fwalk_reent>
 8008072:	bf00      	nop
 8008074:	08008f49 	.word	0x08008f49

08008078 <__sfmoreglue>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	2268      	movs	r2, #104	; 0x68
 800807c:	1e4d      	subs	r5, r1, #1
 800807e:	4355      	muls	r5, r2
 8008080:	460e      	mov	r6, r1
 8008082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008086:	f000 f8e5 	bl	8008254 <_malloc_r>
 800808a:	4604      	mov	r4, r0
 800808c:	b140      	cbz	r0, 80080a0 <__sfmoreglue+0x28>
 800808e:	2100      	movs	r1, #0
 8008090:	e9c0 1600 	strd	r1, r6, [r0]
 8008094:	300c      	adds	r0, #12
 8008096:	60a0      	str	r0, [r4, #8]
 8008098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800809c:	f7ff ff82 	bl	8007fa4 <memset>
 80080a0:	4620      	mov	r0, r4
 80080a2:	bd70      	pop	{r4, r5, r6, pc}

080080a4 <__sfp_lock_acquire>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__sfp_lock_acquire+0x8>)
 80080a6:	f000 b8b3 	b.w	8008210 <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	20012f91 	.word	0x20012f91

080080b0 <__sfp_lock_release>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__sfp_lock_release+0x8>)
 80080b2:	f000 b8ae 	b.w	8008212 <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	20012f91 	.word	0x20012f91

080080bc <__sinit_lock_acquire>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__sinit_lock_acquire+0x8>)
 80080be:	f000 b8a7 	b.w	8008210 <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	20012f92 	.word	0x20012f92

080080c8 <__sinit_lock_release>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__sinit_lock_release+0x8>)
 80080ca:	f000 b8a2 	b.w	8008212 <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	20012f92 	.word	0x20012f92

080080d4 <__sinit>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	4604      	mov	r4, r0
 80080d8:	f7ff fff0 	bl	80080bc <__sinit_lock_acquire>
 80080dc:	69a3      	ldr	r3, [r4, #24]
 80080de:	b11b      	cbz	r3, 80080e8 <__sinit+0x14>
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f7ff bff0 	b.w	80080c8 <__sinit_lock_release>
 80080e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080ec:	6523      	str	r3, [r4, #80]	; 0x50
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <__sinit+0x68>)
 80080f0:	4a13      	ldr	r2, [pc, #76]	; (8008140 <__sinit+0x6c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	bf04      	itt	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	61a3      	streq	r3, [r4, #24]
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f820 	bl	8008144 <__sfp>
 8008104:	6060      	str	r0, [r4, #4]
 8008106:	4620      	mov	r0, r4
 8008108:	f000 f81c 	bl	8008144 <__sfp>
 800810c:	60a0      	str	r0, [r4, #8]
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f818 	bl	8008144 <__sfp>
 8008114:	2200      	movs	r2, #0
 8008116:	60e0      	str	r0, [r4, #12]
 8008118:	2104      	movs	r1, #4
 800811a:	6860      	ldr	r0, [r4, #4]
 800811c:	f7ff ff82 	bl	8008024 <std>
 8008120:	68a0      	ldr	r0, [r4, #8]
 8008122:	2201      	movs	r2, #1
 8008124:	2109      	movs	r1, #9
 8008126:	f7ff ff7d 	bl	8008024 <std>
 800812a:	68e0      	ldr	r0, [r4, #12]
 800812c:	2202      	movs	r2, #2
 800812e:	2112      	movs	r1, #18
 8008130:	f7ff ff78 	bl	8008024 <std>
 8008134:	2301      	movs	r3, #1
 8008136:	61a3      	str	r3, [r4, #24]
 8008138:	e7d2      	b.n	80080e0 <__sinit+0xc>
 800813a:	bf00      	nop
 800813c:	08009680 	.word	0x08009680
 8008140:	0800806d 	.word	0x0800806d

08008144 <__sfp>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	4607      	mov	r7, r0
 8008148:	f7ff ffac 	bl	80080a4 <__sfp_lock_acquire>
 800814c:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <__sfp+0x84>)
 800814e:	681e      	ldr	r6, [r3, #0]
 8008150:	69b3      	ldr	r3, [r6, #24]
 8008152:	b913      	cbnz	r3, 800815a <__sfp+0x16>
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff ffbd 	bl	80080d4 <__sinit>
 800815a:	3648      	adds	r6, #72	; 0x48
 800815c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008160:	3b01      	subs	r3, #1
 8008162:	d503      	bpl.n	800816c <__sfp+0x28>
 8008164:	6833      	ldr	r3, [r6, #0]
 8008166:	b30b      	cbz	r3, 80081ac <__sfp+0x68>
 8008168:	6836      	ldr	r6, [r6, #0]
 800816a:	e7f7      	b.n	800815c <__sfp+0x18>
 800816c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008170:	b9d5      	cbnz	r5, 80081a8 <__sfp+0x64>
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <__sfp+0x88>)
 8008174:	60e3      	str	r3, [r4, #12]
 8008176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800817a:	6665      	str	r5, [r4, #100]	; 0x64
 800817c:	f000 f847 	bl	800820e <__retarget_lock_init_recursive>
 8008180:	f7ff ff96 	bl	80080b0 <__sfp_lock_release>
 8008184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800818c:	6025      	str	r5, [r4, #0]
 800818e:	61a5      	str	r5, [r4, #24]
 8008190:	2208      	movs	r2, #8
 8008192:	4629      	mov	r1, r5
 8008194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008198:	f7ff ff04 	bl	8007fa4 <memset>
 800819c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081a4:	4620      	mov	r0, r4
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a8:	3468      	adds	r4, #104	; 0x68
 80081aa:	e7d9      	b.n	8008160 <__sfp+0x1c>
 80081ac:	2104      	movs	r1, #4
 80081ae:	4638      	mov	r0, r7
 80081b0:	f7ff ff62 	bl	8008078 <__sfmoreglue>
 80081b4:	4604      	mov	r4, r0
 80081b6:	6030      	str	r0, [r6, #0]
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d1d5      	bne.n	8008168 <__sfp+0x24>
 80081bc:	f7ff ff78 	bl	80080b0 <__sfp_lock_release>
 80081c0:	230c      	movs	r3, #12
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	e7ee      	b.n	80081a4 <__sfp+0x60>
 80081c6:	bf00      	nop
 80081c8:	08009680 	.word	0x08009680
 80081cc:	ffff0001 	.word	0xffff0001

080081d0 <_fwalk_reent>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4606      	mov	r6, r0
 80081d6:	4688      	mov	r8, r1
 80081d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081dc:	2700      	movs	r7, #0
 80081de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e2:	f1b9 0901 	subs.w	r9, r9, #1
 80081e6:	d505      	bpl.n	80081f4 <_fwalk_reent+0x24>
 80081e8:	6824      	ldr	r4, [r4, #0]
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d1f7      	bne.n	80081de <_fwalk_reent+0xe>
 80081ee:	4638      	mov	r0, r7
 80081f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f4:	89ab      	ldrh	r3, [r5, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d907      	bls.n	800820a <_fwalk_reent+0x3a>
 80081fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081fe:	3301      	adds	r3, #1
 8008200:	d003      	beq.n	800820a <_fwalk_reent+0x3a>
 8008202:	4629      	mov	r1, r5
 8008204:	4630      	mov	r0, r6
 8008206:	47c0      	blx	r8
 8008208:	4307      	orrs	r7, r0
 800820a:	3568      	adds	r5, #104	; 0x68
 800820c:	e7e9      	b.n	80081e2 <_fwalk_reent+0x12>

0800820e <__retarget_lock_init_recursive>:
 800820e:	4770      	bx	lr

08008210 <__retarget_lock_acquire_recursive>:
 8008210:	4770      	bx	lr

08008212 <__retarget_lock_release_recursive>:
 8008212:	4770      	bx	lr

08008214 <sbrk_aligned>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	4e0e      	ldr	r6, [pc, #56]	; (8008250 <sbrk_aligned+0x3c>)
 8008218:	460c      	mov	r4, r1
 800821a:	6831      	ldr	r1, [r6, #0]
 800821c:	4605      	mov	r5, r0
 800821e:	b911      	cbnz	r1, 8008226 <sbrk_aligned+0x12>
 8008220:	f000 fcd6 	bl	8008bd0 <_sbrk_r>
 8008224:	6030      	str	r0, [r6, #0]
 8008226:	4621      	mov	r1, r4
 8008228:	4628      	mov	r0, r5
 800822a:	f000 fcd1 	bl	8008bd0 <_sbrk_r>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d00a      	beq.n	8008248 <sbrk_aligned+0x34>
 8008232:	1cc4      	adds	r4, r0, #3
 8008234:	f024 0403 	bic.w	r4, r4, #3
 8008238:	42a0      	cmp	r0, r4
 800823a:	d007      	beq.n	800824c <sbrk_aligned+0x38>
 800823c:	1a21      	subs	r1, r4, r0
 800823e:	4628      	mov	r0, r5
 8008240:	f000 fcc6 	bl	8008bd0 <_sbrk_r>
 8008244:	3001      	adds	r0, #1
 8008246:	d101      	bne.n	800824c <sbrk_aligned+0x38>
 8008248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800824c:	4620      	mov	r0, r4
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	20012f98 	.word	0x20012f98

08008254 <_malloc_r>:
 8008254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008258:	1ccd      	adds	r5, r1, #3
 800825a:	f025 0503 	bic.w	r5, r5, #3
 800825e:	3508      	adds	r5, #8
 8008260:	2d0c      	cmp	r5, #12
 8008262:	bf38      	it	cc
 8008264:	250c      	movcc	r5, #12
 8008266:	2d00      	cmp	r5, #0
 8008268:	4607      	mov	r7, r0
 800826a:	db01      	blt.n	8008270 <_malloc_r+0x1c>
 800826c:	42a9      	cmp	r1, r5
 800826e:	d905      	bls.n	800827c <_malloc_r+0x28>
 8008270:	230c      	movs	r3, #12
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	2600      	movs	r6, #0
 8008276:	4630      	mov	r0, r6
 8008278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800827c:	4e2e      	ldr	r6, [pc, #184]	; (8008338 <_malloc_r+0xe4>)
 800827e:	f000 ff31 	bl	80090e4 <__malloc_lock>
 8008282:	6833      	ldr	r3, [r6, #0]
 8008284:	461c      	mov	r4, r3
 8008286:	bb34      	cbnz	r4, 80082d6 <_malloc_r+0x82>
 8008288:	4629      	mov	r1, r5
 800828a:	4638      	mov	r0, r7
 800828c:	f7ff ffc2 	bl	8008214 <sbrk_aligned>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	4604      	mov	r4, r0
 8008294:	d14d      	bne.n	8008332 <_malloc_r+0xde>
 8008296:	6834      	ldr	r4, [r6, #0]
 8008298:	4626      	mov	r6, r4
 800829a:	2e00      	cmp	r6, #0
 800829c:	d140      	bne.n	8008320 <_malloc_r+0xcc>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	4631      	mov	r1, r6
 80082a2:	4638      	mov	r0, r7
 80082a4:	eb04 0803 	add.w	r8, r4, r3
 80082a8:	f000 fc92 	bl	8008bd0 <_sbrk_r>
 80082ac:	4580      	cmp	r8, r0
 80082ae:	d13a      	bne.n	8008326 <_malloc_r+0xd2>
 80082b0:	6821      	ldr	r1, [r4, #0]
 80082b2:	3503      	adds	r5, #3
 80082b4:	1a6d      	subs	r5, r5, r1
 80082b6:	f025 0503 	bic.w	r5, r5, #3
 80082ba:	3508      	adds	r5, #8
 80082bc:	2d0c      	cmp	r5, #12
 80082be:	bf38      	it	cc
 80082c0:	250c      	movcc	r5, #12
 80082c2:	4629      	mov	r1, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff ffa5 	bl	8008214 <sbrk_aligned>
 80082ca:	3001      	adds	r0, #1
 80082cc:	d02b      	beq.n	8008326 <_malloc_r+0xd2>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	442b      	add	r3, r5
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	e00e      	b.n	80082f4 <_malloc_r+0xa0>
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	1b52      	subs	r2, r2, r5
 80082da:	d41e      	bmi.n	800831a <_malloc_r+0xc6>
 80082dc:	2a0b      	cmp	r2, #11
 80082de:	d916      	bls.n	800830e <_malloc_r+0xba>
 80082e0:	1961      	adds	r1, r4, r5
 80082e2:	42a3      	cmp	r3, r4
 80082e4:	6025      	str	r5, [r4, #0]
 80082e6:	bf18      	it	ne
 80082e8:	6059      	strne	r1, [r3, #4]
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	bf08      	it	eq
 80082ee:	6031      	streq	r1, [r6, #0]
 80082f0:	5162      	str	r2, [r4, r5]
 80082f2:	604b      	str	r3, [r1, #4]
 80082f4:	4638      	mov	r0, r7
 80082f6:	f104 060b 	add.w	r6, r4, #11
 80082fa:	f000 fef9 	bl	80090f0 <__malloc_unlock>
 80082fe:	f026 0607 	bic.w	r6, r6, #7
 8008302:	1d23      	adds	r3, r4, #4
 8008304:	1af2      	subs	r2, r6, r3
 8008306:	d0b6      	beq.n	8008276 <_malloc_r+0x22>
 8008308:	1b9b      	subs	r3, r3, r6
 800830a:	50a3      	str	r3, [r4, r2]
 800830c:	e7b3      	b.n	8008276 <_malloc_r+0x22>
 800830e:	6862      	ldr	r2, [r4, #4]
 8008310:	42a3      	cmp	r3, r4
 8008312:	bf0c      	ite	eq
 8008314:	6032      	streq	r2, [r6, #0]
 8008316:	605a      	strne	r2, [r3, #4]
 8008318:	e7ec      	b.n	80082f4 <_malloc_r+0xa0>
 800831a:	4623      	mov	r3, r4
 800831c:	6864      	ldr	r4, [r4, #4]
 800831e:	e7b2      	b.n	8008286 <_malloc_r+0x32>
 8008320:	4634      	mov	r4, r6
 8008322:	6876      	ldr	r6, [r6, #4]
 8008324:	e7b9      	b.n	800829a <_malloc_r+0x46>
 8008326:	230c      	movs	r3, #12
 8008328:	603b      	str	r3, [r7, #0]
 800832a:	4638      	mov	r0, r7
 800832c:	f000 fee0 	bl	80090f0 <__malloc_unlock>
 8008330:	e7a1      	b.n	8008276 <_malloc_r+0x22>
 8008332:	6025      	str	r5, [r4, #0]
 8008334:	e7de      	b.n	80082f4 <_malloc_r+0xa0>
 8008336:	bf00      	nop
 8008338:	20012f94 	.word	0x20012f94

0800833c <__ssputs_r>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	688e      	ldr	r6, [r1, #8]
 8008342:	429e      	cmp	r6, r3
 8008344:	4682      	mov	sl, r0
 8008346:	460c      	mov	r4, r1
 8008348:	4690      	mov	r8, r2
 800834a:	461f      	mov	r7, r3
 800834c:	d838      	bhi.n	80083c0 <__ssputs_r+0x84>
 800834e:	898a      	ldrh	r2, [r1, #12]
 8008350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008354:	d032      	beq.n	80083bc <__ssputs_r+0x80>
 8008356:	6825      	ldr	r5, [r4, #0]
 8008358:	6909      	ldr	r1, [r1, #16]
 800835a:	eba5 0901 	sub.w	r9, r5, r1
 800835e:	6965      	ldr	r5, [r4, #20]
 8008360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008368:	3301      	adds	r3, #1
 800836a:	444b      	add	r3, r9
 800836c:	106d      	asrs	r5, r5, #1
 800836e:	429d      	cmp	r5, r3
 8008370:	bf38      	it	cc
 8008372:	461d      	movcc	r5, r3
 8008374:	0553      	lsls	r3, r2, #21
 8008376:	d531      	bpl.n	80083dc <__ssputs_r+0xa0>
 8008378:	4629      	mov	r1, r5
 800837a:	f7ff ff6b 	bl	8008254 <_malloc_r>
 800837e:	4606      	mov	r6, r0
 8008380:	b950      	cbnz	r0, 8008398 <__ssputs_r+0x5c>
 8008382:	230c      	movs	r3, #12
 8008384:	f8ca 3000 	str.w	r3, [sl]
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008398:	6921      	ldr	r1, [r4, #16]
 800839a:	464a      	mov	r2, r9
 800839c:	f7ff fdf4 	bl	8007f88 <memcpy>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	6126      	str	r6, [r4, #16]
 80083ae:	6165      	str	r5, [r4, #20]
 80083b0:	444e      	add	r6, r9
 80083b2:	eba5 0509 	sub.w	r5, r5, r9
 80083b6:	6026      	str	r6, [r4, #0]
 80083b8:	60a5      	str	r5, [r4, #8]
 80083ba:	463e      	mov	r6, r7
 80083bc:	42be      	cmp	r6, r7
 80083be:	d900      	bls.n	80083c2 <__ssputs_r+0x86>
 80083c0:	463e      	mov	r6, r7
 80083c2:	6820      	ldr	r0, [r4, #0]
 80083c4:	4632      	mov	r2, r6
 80083c6:	4641      	mov	r1, r8
 80083c8:	f000 fe72 	bl	80090b0 <memmove>
 80083cc:	68a3      	ldr	r3, [r4, #8]
 80083ce:	1b9b      	subs	r3, r3, r6
 80083d0:	60a3      	str	r3, [r4, #8]
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	4433      	add	r3, r6
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e7db      	b.n	8008394 <__ssputs_r+0x58>
 80083dc:	462a      	mov	r2, r5
 80083de:	f000 fed9 	bl	8009194 <_realloc_r>
 80083e2:	4606      	mov	r6, r0
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d1e1      	bne.n	80083ac <__ssputs_r+0x70>
 80083e8:	6921      	ldr	r1, [r4, #16]
 80083ea:	4650      	mov	r0, sl
 80083ec:	f000 fe86 	bl	80090fc <_free_r>
 80083f0:	e7c7      	b.n	8008382 <__ssputs_r+0x46>
	...

080083f4 <_svfiprintf_r>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	4698      	mov	r8, r3
 80083fa:	898b      	ldrh	r3, [r1, #12]
 80083fc:	061b      	lsls	r3, r3, #24
 80083fe:	b09d      	sub	sp, #116	; 0x74
 8008400:	4607      	mov	r7, r0
 8008402:	460d      	mov	r5, r1
 8008404:	4614      	mov	r4, r2
 8008406:	d50e      	bpl.n	8008426 <_svfiprintf_r+0x32>
 8008408:	690b      	ldr	r3, [r1, #16]
 800840a:	b963      	cbnz	r3, 8008426 <_svfiprintf_r+0x32>
 800840c:	2140      	movs	r1, #64	; 0x40
 800840e:	f7ff ff21 	bl	8008254 <_malloc_r>
 8008412:	6028      	str	r0, [r5, #0]
 8008414:	6128      	str	r0, [r5, #16]
 8008416:	b920      	cbnz	r0, 8008422 <_svfiprintf_r+0x2e>
 8008418:	230c      	movs	r3, #12
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008420:	e0d1      	b.n	80085c6 <_svfiprintf_r+0x1d2>
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	616b      	str	r3, [r5, #20]
 8008426:	2300      	movs	r3, #0
 8008428:	9309      	str	r3, [sp, #36]	; 0x24
 800842a:	2320      	movs	r3, #32
 800842c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008430:	f8cd 800c 	str.w	r8, [sp, #12]
 8008434:	2330      	movs	r3, #48	; 0x30
 8008436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085e0 <_svfiprintf_r+0x1ec>
 800843a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800843e:	f04f 0901 	mov.w	r9, #1
 8008442:	4623      	mov	r3, r4
 8008444:	469a      	mov	sl, r3
 8008446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844a:	b10a      	cbz	r2, 8008450 <_svfiprintf_r+0x5c>
 800844c:	2a25      	cmp	r2, #37	; 0x25
 800844e:	d1f9      	bne.n	8008444 <_svfiprintf_r+0x50>
 8008450:	ebba 0b04 	subs.w	fp, sl, r4
 8008454:	d00b      	beq.n	800846e <_svfiprintf_r+0x7a>
 8008456:	465b      	mov	r3, fp
 8008458:	4622      	mov	r2, r4
 800845a:	4629      	mov	r1, r5
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff ff6d 	bl	800833c <__ssputs_r>
 8008462:	3001      	adds	r0, #1
 8008464:	f000 80aa 	beq.w	80085bc <_svfiprintf_r+0x1c8>
 8008468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800846a:	445a      	add	r2, fp
 800846c:	9209      	str	r2, [sp, #36]	; 0x24
 800846e:	f89a 3000 	ldrb.w	r3, [sl]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80a2 	beq.w	80085bc <_svfiprintf_r+0x1c8>
 8008478:	2300      	movs	r3, #0
 800847a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800847e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008482:	f10a 0a01 	add.w	sl, sl, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	9307      	str	r3, [sp, #28]
 800848a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800848e:	931a      	str	r3, [sp, #104]	; 0x68
 8008490:	4654      	mov	r4, sl
 8008492:	2205      	movs	r2, #5
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	4851      	ldr	r0, [pc, #324]	; (80085e0 <_svfiprintf_r+0x1ec>)
 800849a:	f7f7 feb1 	bl	8000200 <memchr>
 800849e:	9a04      	ldr	r2, [sp, #16]
 80084a0:	b9d8      	cbnz	r0, 80084da <_svfiprintf_r+0xe6>
 80084a2:	06d0      	lsls	r0, r2, #27
 80084a4:	bf44      	itt	mi
 80084a6:	2320      	movmi	r3, #32
 80084a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ac:	0711      	lsls	r1, r2, #28
 80084ae:	bf44      	itt	mi
 80084b0:	232b      	movmi	r3, #43	; 0x2b
 80084b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ba:	2b2a      	cmp	r3, #42	; 0x2a
 80084bc:	d015      	beq.n	80084ea <_svfiprintf_r+0xf6>
 80084be:	9a07      	ldr	r2, [sp, #28]
 80084c0:	4654      	mov	r4, sl
 80084c2:	2000      	movs	r0, #0
 80084c4:	f04f 0c0a 	mov.w	ip, #10
 80084c8:	4621      	mov	r1, r4
 80084ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ce:	3b30      	subs	r3, #48	; 0x30
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d94e      	bls.n	8008572 <_svfiprintf_r+0x17e>
 80084d4:	b1b0      	cbz	r0, 8008504 <_svfiprintf_r+0x110>
 80084d6:	9207      	str	r2, [sp, #28]
 80084d8:	e014      	b.n	8008504 <_svfiprintf_r+0x110>
 80084da:	eba0 0308 	sub.w	r3, r0, r8
 80084de:	fa09 f303 	lsl.w	r3, r9, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	46a2      	mov	sl, r4
 80084e8:	e7d2      	b.n	8008490 <_svfiprintf_r+0x9c>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	1d19      	adds	r1, r3, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	9103      	str	r1, [sp, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfbb      	ittet	lt
 80084f6:	425b      	neglt	r3, r3
 80084f8:	f042 0202 	orrlt.w	r2, r2, #2
 80084fc:	9307      	strge	r3, [sp, #28]
 80084fe:	9307      	strlt	r3, [sp, #28]
 8008500:	bfb8      	it	lt
 8008502:	9204      	strlt	r2, [sp, #16]
 8008504:	7823      	ldrb	r3, [r4, #0]
 8008506:	2b2e      	cmp	r3, #46	; 0x2e
 8008508:	d10c      	bne.n	8008524 <_svfiprintf_r+0x130>
 800850a:	7863      	ldrb	r3, [r4, #1]
 800850c:	2b2a      	cmp	r3, #42	; 0x2a
 800850e:	d135      	bne.n	800857c <_svfiprintf_r+0x188>
 8008510:	9b03      	ldr	r3, [sp, #12]
 8008512:	1d1a      	adds	r2, r3, #4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	9203      	str	r2, [sp, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	bfb8      	it	lt
 800851c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008520:	3402      	adds	r4, #2
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085f0 <_svfiprintf_r+0x1fc>
 8008528:	7821      	ldrb	r1, [r4, #0]
 800852a:	2203      	movs	r2, #3
 800852c:	4650      	mov	r0, sl
 800852e:	f7f7 fe67 	bl	8000200 <memchr>
 8008532:	b140      	cbz	r0, 8008546 <_svfiprintf_r+0x152>
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	eba0 000a 	sub.w	r0, r0, sl
 800853a:	fa03 f000 	lsl.w	r0, r3, r0
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	4303      	orrs	r3, r0
 8008542:	3401      	adds	r4, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	4826      	ldr	r0, [pc, #152]	; (80085e4 <_svfiprintf_r+0x1f0>)
 800854c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008550:	2206      	movs	r2, #6
 8008552:	f7f7 fe55 	bl	8000200 <memchr>
 8008556:	2800      	cmp	r0, #0
 8008558:	d038      	beq.n	80085cc <_svfiprintf_r+0x1d8>
 800855a:	4b23      	ldr	r3, [pc, #140]	; (80085e8 <_svfiprintf_r+0x1f4>)
 800855c:	bb1b      	cbnz	r3, 80085a6 <_svfiprintf_r+0x1b2>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	3308      	adds	r3, #8
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856c:	4433      	add	r3, r6
 800856e:	9309      	str	r3, [sp, #36]	; 0x24
 8008570:	e767      	b.n	8008442 <_svfiprintf_r+0x4e>
 8008572:	fb0c 3202 	mla	r2, ip, r2, r3
 8008576:	460c      	mov	r4, r1
 8008578:	2001      	movs	r0, #1
 800857a:	e7a5      	b.n	80084c8 <_svfiprintf_r+0xd4>
 800857c:	2300      	movs	r3, #0
 800857e:	3401      	adds	r4, #1
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	4619      	mov	r1, r3
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4620      	mov	r0, r4
 800858a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858e:	3a30      	subs	r2, #48	; 0x30
 8008590:	2a09      	cmp	r2, #9
 8008592:	d903      	bls.n	800859c <_svfiprintf_r+0x1a8>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0c5      	beq.n	8008524 <_svfiprintf_r+0x130>
 8008598:	9105      	str	r1, [sp, #20]
 800859a:	e7c3      	b.n	8008524 <_svfiprintf_r+0x130>
 800859c:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a0:	4604      	mov	r4, r0
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f0      	b.n	8008588 <_svfiprintf_r+0x194>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <_svfiprintf_r+0x1f8>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4638      	mov	r0, r7
 80085b2:	f3af 8000 	nop.w
 80085b6:	1c42      	adds	r2, r0, #1
 80085b8:	4606      	mov	r6, r0
 80085ba:	d1d6      	bne.n	800856a <_svfiprintf_r+0x176>
 80085bc:	89ab      	ldrh	r3, [r5, #12]
 80085be:	065b      	lsls	r3, r3, #25
 80085c0:	f53f af2c 	bmi.w	800841c <_svfiprintf_r+0x28>
 80085c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c6:	b01d      	add	sp, #116	; 0x74
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	ab03      	add	r3, sp, #12
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	462a      	mov	r2, r5
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <_svfiprintf_r+0x1f8>)
 80085d4:	a904      	add	r1, sp, #16
 80085d6:	4638      	mov	r0, r7
 80085d8:	f000 f9d4 	bl	8008984 <_printf_i>
 80085dc:	e7eb      	b.n	80085b6 <_svfiprintf_r+0x1c2>
 80085de:	bf00      	nop
 80085e0:	080096e4 	.word	0x080096e4
 80085e4:	080096ee 	.word	0x080096ee
 80085e8:	00000000 	.word	0x00000000
 80085ec:	0800833d 	.word	0x0800833d
 80085f0:	080096ea 	.word	0x080096ea

080085f4 <__sfputc_r>:
 80085f4:	6893      	ldr	r3, [r2, #8]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	b410      	push	{r4}
 80085fc:	6093      	str	r3, [r2, #8]
 80085fe:	da08      	bge.n	8008612 <__sfputc_r+0x1e>
 8008600:	6994      	ldr	r4, [r2, #24]
 8008602:	42a3      	cmp	r3, r4
 8008604:	db01      	blt.n	800860a <__sfputc_r+0x16>
 8008606:	290a      	cmp	r1, #10
 8008608:	d103      	bne.n	8008612 <__sfputc_r+0x1e>
 800860a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860e:	f000 bb33 	b.w	8008c78 <__swbuf_r>
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	1c58      	adds	r0, r3, #1
 8008616:	6010      	str	r0, [r2, #0]
 8008618:	7019      	strb	r1, [r3, #0]
 800861a:	4608      	mov	r0, r1
 800861c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008620:	4770      	bx	lr

08008622 <__sfputs_r>:
 8008622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008624:	4606      	mov	r6, r0
 8008626:	460f      	mov	r7, r1
 8008628:	4614      	mov	r4, r2
 800862a:	18d5      	adds	r5, r2, r3
 800862c:	42ac      	cmp	r4, r5
 800862e:	d101      	bne.n	8008634 <__sfputs_r+0x12>
 8008630:	2000      	movs	r0, #0
 8008632:	e007      	b.n	8008644 <__sfputs_r+0x22>
 8008634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008638:	463a      	mov	r2, r7
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ffda 	bl	80085f4 <__sfputc_r>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d1f3      	bne.n	800862c <__sfputs_r+0xa>
 8008644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008648 <_vfiprintf_r>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	460d      	mov	r5, r1
 800864e:	b09d      	sub	sp, #116	; 0x74
 8008650:	4614      	mov	r4, r2
 8008652:	4698      	mov	r8, r3
 8008654:	4606      	mov	r6, r0
 8008656:	b118      	cbz	r0, 8008660 <_vfiprintf_r+0x18>
 8008658:	6983      	ldr	r3, [r0, #24]
 800865a:	b90b      	cbnz	r3, 8008660 <_vfiprintf_r+0x18>
 800865c:	f7ff fd3a 	bl	80080d4 <__sinit>
 8008660:	4b89      	ldr	r3, [pc, #548]	; (8008888 <_vfiprintf_r+0x240>)
 8008662:	429d      	cmp	r5, r3
 8008664:	d11b      	bne.n	800869e <_vfiprintf_r+0x56>
 8008666:	6875      	ldr	r5, [r6, #4]
 8008668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800866a:	07d9      	lsls	r1, r3, #31
 800866c:	d405      	bmi.n	800867a <_vfiprintf_r+0x32>
 800866e:	89ab      	ldrh	r3, [r5, #12]
 8008670:	059a      	lsls	r2, r3, #22
 8008672:	d402      	bmi.n	800867a <_vfiprintf_r+0x32>
 8008674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008676:	f7ff fdcb 	bl	8008210 <__retarget_lock_acquire_recursive>
 800867a:	89ab      	ldrh	r3, [r5, #12]
 800867c:	071b      	lsls	r3, r3, #28
 800867e:	d501      	bpl.n	8008684 <_vfiprintf_r+0x3c>
 8008680:	692b      	ldr	r3, [r5, #16]
 8008682:	b9eb      	cbnz	r3, 80086c0 <_vfiprintf_r+0x78>
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f000 fb5a 	bl	8008d40 <__swsetup_r>
 800868c:	b1c0      	cbz	r0, 80086c0 <_vfiprintf_r+0x78>
 800868e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008690:	07dc      	lsls	r4, r3, #31
 8008692:	d50e      	bpl.n	80086b2 <_vfiprintf_r+0x6a>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008698:	b01d      	add	sp, #116	; 0x74
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	4b7b      	ldr	r3, [pc, #492]	; (800888c <_vfiprintf_r+0x244>)
 80086a0:	429d      	cmp	r5, r3
 80086a2:	d101      	bne.n	80086a8 <_vfiprintf_r+0x60>
 80086a4:	68b5      	ldr	r5, [r6, #8]
 80086a6:	e7df      	b.n	8008668 <_vfiprintf_r+0x20>
 80086a8:	4b79      	ldr	r3, [pc, #484]	; (8008890 <_vfiprintf_r+0x248>)
 80086aa:	429d      	cmp	r5, r3
 80086ac:	bf08      	it	eq
 80086ae:	68f5      	ldreq	r5, [r6, #12]
 80086b0:	e7da      	b.n	8008668 <_vfiprintf_r+0x20>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	0598      	lsls	r0, r3, #22
 80086b6:	d4ed      	bmi.n	8008694 <_vfiprintf_r+0x4c>
 80086b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ba:	f7ff fdaa 	bl	8008212 <__retarget_lock_release_recursive>
 80086be:	e7e9      	b.n	8008694 <_vfiprintf_r+0x4c>
 80086c0:	2300      	movs	r3, #0
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	2320      	movs	r3, #32
 80086c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ce:	2330      	movs	r3, #48	; 0x30
 80086d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008894 <_vfiprintf_r+0x24c>
 80086d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086d8:	f04f 0901 	mov.w	r9, #1
 80086dc:	4623      	mov	r3, r4
 80086de:	469a      	mov	sl, r3
 80086e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e4:	b10a      	cbz	r2, 80086ea <_vfiprintf_r+0xa2>
 80086e6:	2a25      	cmp	r2, #37	; 0x25
 80086e8:	d1f9      	bne.n	80086de <_vfiprintf_r+0x96>
 80086ea:	ebba 0b04 	subs.w	fp, sl, r4
 80086ee:	d00b      	beq.n	8008708 <_vfiprintf_r+0xc0>
 80086f0:	465b      	mov	r3, fp
 80086f2:	4622      	mov	r2, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff ff93 	bl	8008622 <__sfputs_r>
 80086fc:	3001      	adds	r0, #1
 80086fe:	f000 80aa 	beq.w	8008856 <_vfiprintf_r+0x20e>
 8008702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008704:	445a      	add	r2, fp
 8008706:	9209      	str	r2, [sp, #36]	; 0x24
 8008708:	f89a 3000 	ldrb.w	r3, [sl]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80a2 	beq.w	8008856 <_vfiprintf_r+0x20e>
 8008712:	2300      	movs	r3, #0
 8008714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800871c:	f10a 0a01 	add.w	sl, sl, #1
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	9307      	str	r3, [sp, #28]
 8008724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008728:	931a      	str	r3, [sp, #104]	; 0x68
 800872a:	4654      	mov	r4, sl
 800872c:	2205      	movs	r2, #5
 800872e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008732:	4858      	ldr	r0, [pc, #352]	; (8008894 <_vfiprintf_r+0x24c>)
 8008734:	f7f7 fd64 	bl	8000200 <memchr>
 8008738:	9a04      	ldr	r2, [sp, #16]
 800873a:	b9d8      	cbnz	r0, 8008774 <_vfiprintf_r+0x12c>
 800873c:	06d1      	lsls	r1, r2, #27
 800873e:	bf44      	itt	mi
 8008740:	2320      	movmi	r3, #32
 8008742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008746:	0713      	lsls	r3, r2, #28
 8008748:	bf44      	itt	mi
 800874a:	232b      	movmi	r3, #43	; 0x2b
 800874c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008750:	f89a 3000 	ldrb.w	r3, [sl]
 8008754:	2b2a      	cmp	r3, #42	; 0x2a
 8008756:	d015      	beq.n	8008784 <_vfiprintf_r+0x13c>
 8008758:	9a07      	ldr	r2, [sp, #28]
 800875a:	4654      	mov	r4, sl
 800875c:	2000      	movs	r0, #0
 800875e:	f04f 0c0a 	mov.w	ip, #10
 8008762:	4621      	mov	r1, r4
 8008764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008768:	3b30      	subs	r3, #48	; 0x30
 800876a:	2b09      	cmp	r3, #9
 800876c:	d94e      	bls.n	800880c <_vfiprintf_r+0x1c4>
 800876e:	b1b0      	cbz	r0, 800879e <_vfiprintf_r+0x156>
 8008770:	9207      	str	r2, [sp, #28]
 8008772:	e014      	b.n	800879e <_vfiprintf_r+0x156>
 8008774:	eba0 0308 	sub.w	r3, r0, r8
 8008778:	fa09 f303 	lsl.w	r3, r9, r3
 800877c:	4313      	orrs	r3, r2
 800877e:	9304      	str	r3, [sp, #16]
 8008780:	46a2      	mov	sl, r4
 8008782:	e7d2      	b.n	800872a <_vfiprintf_r+0xe2>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	1d19      	adds	r1, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	9103      	str	r1, [sp, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	bfbb      	ittet	lt
 8008790:	425b      	neglt	r3, r3
 8008792:	f042 0202 	orrlt.w	r2, r2, #2
 8008796:	9307      	strge	r3, [sp, #28]
 8008798:	9307      	strlt	r3, [sp, #28]
 800879a:	bfb8      	it	lt
 800879c:	9204      	strlt	r2, [sp, #16]
 800879e:	7823      	ldrb	r3, [r4, #0]
 80087a0:	2b2e      	cmp	r3, #46	; 0x2e
 80087a2:	d10c      	bne.n	80087be <_vfiprintf_r+0x176>
 80087a4:	7863      	ldrb	r3, [r4, #1]
 80087a6:	2b2a      	cmp	r3, #42	; 0x2a
 80087a8:	d135      	bne.n	8008816 <_vfiprintf_r+0x1ce>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	9203      	str	r2, [sp, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bfb8      	it	lt
 80087b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087ba:	3402      	adds	r4, #2
 80087bc:	9305      	str	r3, [sp, #20]
 80087be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088a4 <_vfiprintf_r+0x25c>
 80087c2:	7821      	ldrb	r1, [r4, #0]
 80087c4:	2203      	movs	r2, #3
 80087c6:	4650      	mov	r0, sl
 80087c8:	f7f7 fd1a 	bl	8000200 <memchr>
 80087cc:	b140      	cbz	r0, 80087e0 <_vfiprintf_r+0x198>
 80087ce:	2340      	movs	r3, #64	; 0x40
 80087d0:	eba0 000a 	sub.w	r0, r0, sl
 80087d4:	fa03 f000 	lsl.w	r0, r3, r0
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	4303      	orrs	r3, r0
 80087dc:	3401      	adds	r4, #1
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e4:	482c      	ldr	r0, [pc, #176]	; (8008898 <_vfiprintf_r+0x250>)
 80087e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ea:	2206      	movs	r2, #6
 80087ec:	f7f7 fd08 	bl	8000200 <memchr>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d03f      	beq.n	8008874 <_vfiprintf_r+0x22c>
 80087f4:	4b29      	ldr	r3, [pc, #164]	; (800889c <_vfiprintf_r+0x254>)
 80087f6:	bb1b      	cbnz	r3, 8008840 <_vfiprintf_r+0x1f8>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	3307      	adds	r3, #7
 80087fc:	f023 0307 	bic.w	r3, r3, #7
 8008800:	3308      	adds	r3, #8
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008806:	443b      	add	r3, r7
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	e767      	b.n	80086dc <_vfiprintf_r+0x94>
 800880c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008810:	460c      	mov	r4, r1
 8008812:	2001      	movs	r0, #1
 8008814:	e7a5      	b.n	8008762 <_vfiprintf_r+0x11a>
 8008816:	2300      	movs	r3, #0
 8008818:	3401      	adds	r4, #1
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	4619      	mov	r1, r3
 800881e:	f04f 0c0a 	mov.w	ip, #10
 8008822:	4620      	mov	r0, r4
 8008824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008828:	3a30      	subs	r2, #48	; 0x30
 800882a:	2a09      	cmp	r2, #9
 800882c:	d903      	bls.n	8008836 <_vfiprintf_r+0x1ee>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0c5      	beq.n	80087be <_vfiprintf_r+0x176>
 8008832:	9105      	str	r1, [sp, #20]
 8008834:	e7c3      	b.n	80087be <_vfiprintf_r+0x176>
 8008836:	fb0c 2101 	mla	r1, ip, r1, r2
 800883a:	4604      	mov	r4, r0
 800883c:	2301      	movs	r3, #1
 800883e:	e7f0      	b.n	8008822 <_vfiprintf_r+0x1da>
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <_vfiprintf_r+0x258>)
 8008848:	a904      	add	r1, sp, #16
 800884a:	4630      	mov	r0, r6
 800884c:	f3af 8000 	nop.w
 8008850:	4607      	mov	r7, r0
 8008852:	1c78      	adds	r0, r7, #1
 8008854:	d1d6      	bne.n	8008804 <_vfiprintf_r+0x1bc>
 8008856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008858:	07d9      	lsls	r1, r3, #31
 800885a:	d405      	bmi.n	8008868 <_vfiprintf_r+0x220>
 800885c:	89ab      	ldrh	r3, [r5, #12]
 800885e:	059a      	lsls	r2, r3, #22
 8008860:	d402      	bmi.n	8008868 <_vfiprintf_r+0x220>
 8008862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008864:	f7ff fcd5 	bl	8008212 <__retarget_lock_release_recursive>
 8008868:	89ab      	ldrh	r3, [r5, #12]
 800886a:	065b      	lsls	r3, r3, #25
 800886c:	f53f af12 	bmi.w	8008694 <_vfiprintf_r+0x4c>
 8008870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008872:	e711      	b.n	8008698 <_vfiprintf_r+0x50>
 8008874:	ab03      	add	r3, sp, #12
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	462a      	mov	r2, r5
 800887a:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <_vfiprintf_r+0x258>)
 800887c:	a904      	add	r1, sp, #16
 800887e:	4630      	mov	r0, r6
 8008880:	f000 f880 	bl	8008984 <_printf_i>
 8008884:	e7e4      	b.n	8008850 <_vfiprintf_r+0x208>
 8008886:	bf00      	nop
 8008888:	080096a4 	.word	0x080096a4
 800888c:	080096c4 	.word	0x080096c4
 8008890:	08009684 	.word	0x08009684
 8008894:	080096e4 	.word	0x080096e4
 8008898:	080096ee 	.word	0x080096ee
 800889c:	00000000 	.word	0x00000000
 80088a0:	08008623 	.word	0x08008623
 80088a4:	080096ea 	.word	0x080096ea

080088a8 <_printf_common>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	4616      	mov	r6, r2
 80088ae:	4699      	mov	r9, r3
 80088b0:	688a      	ldr	r2, [r1, #8]
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bfb8      	it	lt
 80088bc:	4613      	movlt	r3, r2
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088c4:	4607      	mov	r7, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b10a      	cbz	r2, 80088ce <_printf_common+0x26>
 80088ca:	3301      	adds	r3, #1
 80088cc:	6033      	str	r3, [r6, #0]
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	0699      	lsls	r1, r3, #26
 80088d2:	bf42      	ittt	mi
 80088d4:	6833      	ldrmi	r3, [r6, #0]
 80088d6:	3302      	addmi	r3, #2
 80088d8:	6033      	strmi	r3, [r6, #0]
 80088da:	6825      	ldr	r5, [r4, #0]
 80088dc:	f015 0506 	ands.w	r5, r5, #6
 80088e0:	d106      	bne.n	80088f0 <_printf_common+0x48>
 80088e2:	f104 0a19 	add.w	sl, r4, #25
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	6832      	ldr	r2, [r6, #0]
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	dc26      	bgt.n	800893e <_printf_common+0x96>
 80088f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088f4:	1e13      	subs	r3, r2, #0
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	bf18      	it	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	0692      	lsls	r2, r2, #26
 80088fe:	d42b      	bmi.n	8008958 <_printf_common+0xb0>
 8008900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008904:	4649      	mov	r1, r9
 8008906:	4638      	mov	r0, r7
 8008908:	47c0      	blx	r8
 800890a:	3001      	adds	r0, #1
 800890c:	d01e      	beq.n	800894c <_printf_common+0xa4>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	68e5      	ldr	r5, [r4, #12]
 8008912:	6832      	ldr	r2, [r6, #0]
 8008914:	f003 0306 	and.w	r3, r3, #6
 8008918:	2b04      	cmp	r3, #4
 800891a:	bf08      	it	eq
 800891c:	1aad      	subeq	r5, r5, r2
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	6922      	ldr	r2, [r4, #16]
 8008922:	bf0c      	ite	eq
 8008924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008928:	2500      	movne	r5, #0
 800892a:	4293      	cmp	r3, r2
 800892c:	bfc4      	itt	gt
 800892e:	1a9b      	subgt	r3, r3, r2
 8008930:	18ed      	addgt	r5, r5, r3
 8008932:	2600      	movs	r6, #0
 8008934:	341a      	adds	r4, #26
 8008936:	42b5      	cmp	r5, r6
 8008938:	d11a      	bne.n	8008970 <_printf_common+0xc8>
 800893a:	2000      	movs	r0, #0
 800893c:	e008      	b.n	8008950 <_printf_common+0xa8>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4649      	mov	r1, r9
 8008944:	4638      	mov	r0, r7
 8008946:	47c0      	blx	r8
 8008948:	3001      	adds	r0, #1
 800894a:	d103      	bne.n	8008954 <_printf_common+0xac>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008954:	3501      	adds	r5, #1
 8008956:	e7c6      	b.n	80088e6 <_printf_common+0x3e>
 8008958:	18e1      	adds	r1, r4, r3
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	2030      	movs	r0, #48	; 0x30
 800895e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008962:	4422      	add	r2, r4
 8008964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800896c:	3302      	adds	r3, #2
 800896e:	e7c7      	b.n	8008900 <_printf_common+0x58>
 8008970:	2301      	movs	r3, #1
 8008972:	4622      	mov	r2, r4
 8008974:	4649      	mov	r1, r9
 8008976:	4638      	mov	r0, r7
 8008978:	47c0      	blx	r8
 800897a:	3001      	adds	r0, #1
 800897c:	d0e6      	beq.n	800894c <_printf_common+0xa4>
 800897e:	3601      	adds	r6, #1
 8008980:	e7d9      	b.n	8008936 <_printf_common+0x8e>
	...

08008984 <_printf_i>:
 8008984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	7e0f      	ldrb	r7, [r1, #24]
 800898a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800898c:	2f78      	cmp	r7, #120	; 0x78
 800898e:	4691      	mov	r9, r2
 8008990:	4680      	mov	r8, r0
 8008992:	460c      	mov	r4, r1
 8008994:	469a      	mov	sl, r3
 8008996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800899a:	d807      	bhi.n	80089ac <_printf_i+0x28>
 800899c:	2f62      	cmp	r7, #98	; 0x62
 800899e:	d80a      	bhi.n	80089b6 <_printf_i+0x32>
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f000 80d8 	beq.w	8008b56 <_printf_i+0x1d2>
 80089a6:	2f58      	cmp	r7, #88	; 0x58
 80089a8:	f000 80a3 	beq.w	8008af2 <_printf_i+0x16e>
 80089ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089b4:	e03a      	b.n	8008a2c <_printf_i+0xa8>
 80089b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ba:	2b15      	cmp	r3, #21
 80089bc:	d8f6      	bhi.n	80089ac <_printf_i+0x28>
 80089be:	a101      	add	r1, pc, #4	; (adr r1, 80089c4 <_printf_i+0x40>)
 80089c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c4:	08008a1d 	.word	0x08008a1d
 80089c8:	08008a31 	.word	0x08008a31
 80089cc:	080089ad 	.word	0x080089ad
 80089d0:	080089ad 	.word	0x080089ad
 80089d4:	080089ad 	.word	0x080089ad
 80089d8:	080089ad 	.word	0x080089ad
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	080089ad 	.word	0x080089ad
 80089e4:	080089ad 	.word	0x080089ad
 80089e8:	080089ad 	.word	0x080089ad
 80089ec:	080089ad 	.word	0x080089ad
 80089f0:	08008b3d 	.word	0x08008b3d
 80089f4:	08008a61 	.word	0x08008a61
 80089f8:	08008b1f 	.word	0x08008b1f
 80089fc:	080089ad 	.word	0x080089ad
 8008a00:	080089ad 	.word	0x080089ad
 8008a04:	08008b5f 	.word	0x08008b5f
 8008a08:	080089ad 	.word	0x080089ad
 8008a0c:	08008a61 	.word	0x08008a61
 8008a10:	080089ad 	.word	0x080089ad
 8008a14:	080089ad 	.word	0x080089ad
 8008a18:	08008b27 	.word	0x08008b27
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	602a      	str	r2, [r5, #0]
 8008a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e0a3      	b.n	8008b78 <_printf_i+0x1f4>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	6829      	ldr	r1, [r5, #0]
 8008a34:	0606      	lsls	r6, r0, #24
 8008a36:	f101 0304 	add.w	r3, r1, #4
 8008a3a:	d50a      	bpl.n	8008a52 <_printf_i+0xce>
 8008a3c:	680e      	ldr	r6, [r1, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	da03      	bge.n	8008a4c <_printf_i+0xc8>
 8008a44:	232d      	movs	r3, #45	; 0x2d
 8008a46:	4276      	negs	r6, r6
 8008a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a4c:	485e      	ldr	r0, [pc, #376]	; (8008bc8 <_printf_i+0x244>)
 8008a4e:	230a      	movs	r3, #10
 8008a50:	e019      	b.n	8008a86 <_printf_i+0x102>
 8008a52:	680e      	ldr	r6, [r1, #0]
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a5a:	bf18      	it	ne
 8008a5c:	b236      	sxthne	r6, r6
 8008a5e:	e7ef      	b.n	8008a40 <_printf_i+0xbc>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	6029      	str	r1, [r5, #0]
 8008a68:	0601      	lsls	r1, r0, #24
 8008a6a:	d501      	bpl.n	8008a70 <_printf_i+0xec>
 8008a6c:	681e      	ldr	r6, [r3, #0]
 8008a6e:	e002      	b.n	8008a76 <_printf_i+0xf2>
 8008a70:	0646      	lsls	r6, r0, #25
 8008a72:	d5fb      	bpl.n	8008a6c <_printf_i+0xe8>
 8008a74:	881e      	ldrh	r6, [r3, #0]
 8008a76:	4854      	ldr	r0, [pc, #336]	; (8008bc8 <_printf_i+0x244>)
 8008a78:	2f6f      	cmp	r7, #111	; 0x6f
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2308      	moveq	r3, #8
 8008a7e:	230a      	movne	r3, #10
 8008a80:	2100      	movs	r1, #0
 8008a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a86:	6865      	ldr	r5, [r4, #4]
 8008a88:	60a5      	str	r5, [r4, #8]
 8008a8a:	2d00      	cmp	r5, #0
 8008a8c:	bfa2      	ittt	ge
 8008a8e:	6821      	ldrge	r1, [r4, #0]
 8008a90:	f021 0104 	bicge.w	r1, r1, #4
 8008a94:	6021      	strge	r1, [r4, #0]
 8008a96:	b90e      	cbnz	r6, 8008a9c <_printf_i+0x118>
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	d04d      	beq.n	8008b38 <_printf_i+0x1b4>
 8008a9c:	4615      	mov	r5, r2
 8008a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8008aa6:	5dc7      	ldrb	r7, [r0, r7]
 8008aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aac:	4637      	mov	r7, r6
 8008aae:	42bb      	cmp	r3, r7
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	d9f4      	bls.n	8008a9e <_printf_i+0x11a>
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d10b      	bne.n	8008ad0 <_printf_i+0x14c>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	07de      	lsls	r6, r3, #31
 8008abc:	d508      	bpl.n	8008ad0 <_printf_i+0x14c>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	6861      	ldr	r1, [r4, #4]
 8008ac2:	4299      	cmp	r1, r3
 8008ac4:	bfde      	ittt	le
 8008ac6:	2330      	movle	r3, #48	; 0x30
 8008ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008acc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008ad0:	1b52      	subs	r2, r2, r5
 8008ad2:	6122      	str	r2, [r4, #16]
 8008ad4:	f8cd a000 	str.w	sl, [sp]
 8008ad8:	464b      	mov	r3, r9
 8008ada:	aa03      	add	r2, sp, #12
 8008adc:	4621      	mov	r1, r4
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f7ff fee2 	bl	80088a8 <_printf_common>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d14c      	bne.n	8008b82 <_printf_i+0x1fe>
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aec:	b004      	add	sp, #16
 8008aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af2:	4835      	ldr	r0, [pc, #212]	; (8008bc8 <_printf_i+0x244>)
 8008af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008af8:	6829      	ldr	r1, [r5, #0]
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b00:	6029      	str	r1, [r5, #0]
 8008b02:	061d      	lsls	r5, r3, #24
 8008b04:	d514      	bpl.n	8008b30 <_printf_i+0x1ac>
 8008b06:	07df      	lsls	r7, r3, #31
 8008b08:	bf44      	itt	mi
 8008b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b0e:	6023      	strmi	r3, [r4, #0]
 8008b10:	b91e      	cbnz	r6, 8008b1a <_printf_i+0x196>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	f023 0320 	bic.w	r3, r3, #32
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	2310      	movs	r3, #16
 8008b1c:	e7b0      	b.n	8008a80 <_printf_i+0xfc>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	f043 0320 	orr.w	r3, r3, #32
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	2378      	movs	r3, #120	; 0x78
 8008b28:	4828      	ldr	r0, [pc, #160]	; (8008bcc <_printf_i+0x248>)
 8008b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b2e:	e7e3      	b.n	8008af8 <_printf_i+0x174>
 8008b30:	0659      	lsls	r1, r3, #25
 8008b32:	bf48      	it	mi
 8008b34:	b2b6      	uxthmi	r6, r6
 8008b36:	e7e6      	b.n	8008b06 <_printf_i+0x182>
 8008b38:	4615      	mov	r5, r2
 8008b3a:	e7bb      	b.n	8008ab4 <_printf_i+0x130>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	6826      	ldr	r6, [r4, #0]
 8008b40:	6961      	ldr	r1, [r4, #20]
 8008b42:	1d18      	adds	r0, r3, #4
 8008b44:	6028      	str	r0, [r5, #0]
 8008b46:	0635      	lsls	r5, r6, #24
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	d501      	bpl.n	8008b50 <_printf_i+0x1cc>
 8008b4c:	6019      	str	r1, [r3, #0]
 8008b4e:	e002      	b.n	8008b56 <_printf_i+0x1d2>
 8008b50:	0670      	lsls	r0, r6, #25
 8008b52:	d5fb      	bpl.n	8008b4c <_printf_i+0x1c8>
 8008b54:	8019      	strh	r1, [r3, #0]
 8008b56:	2300      	movs	r3, #0
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	4615      	mov	r5, r2
 8008b5c:	e7ba      	b.n	8008ad4 <_printf_i+0x150>
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	1d1a      	adds	r2, r3, #4
 8008b62:	602a      	str	r2, [r5, #0]
 8008b64:	681d      	ldr	r5, [r3, #0]
 8008b66:	6862      	ldr	r2, [r4, #4]
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f7f7 fb48 	bl	8000200 <memchr>
 8008b70:	b108      	cbz	r0, 8008b76 <_printf_i+0x1f2>
 8008b72:	1b40      	subs	r0, r0, r5
 8008b74:	6060      	str	r0, [r4, #4]
 8008b76:	6863      	ldr	r3, [r4, #4]
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b80:	e7a8      	b.n	8008ad4 <_printf_i+0x150>
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	462a      	mov	r2, r5
 8008b86:	4649      	mov	r1, r9
 8008b88:	4640      	mov	r0, r8
 8008b8a:	47d0      	blx	sl
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d0ab      	beq.n	8008ae8 <_printf_i+0x164>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	079b      	lsls	r3, r3, #30
 8008b94:	d413      	bmi.n	8008bbe <_printf_i+0x23a>
 8008b96:	68e0      	ldr	r0, [r4, #12]
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	4298      	cmp	r0, r3
 8008b9c:	bfb8      	it	lt
 8008b9e:	4618      	movlt	r0, r3
 8008ba0:	e7a4      	b.n	8008aec <_printf_i+0x168>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4640      	mov	r0, r8
 8008baa:	47d0      	blx	sl
 8008bac:	3001      	adds	r0, #1
 8008bae:	d09b      	beq.n	8008ae8 <_printf_i+0x164>
 8008bb0:	3501      	adds	r5, #1
 8008bb2:	68e3      	ldr	r3, [r4, #12]
 8008bb4:	9903      	ldr	r1, [sp, #12]
 8008bb6:	1a5b      	subs	r3, r3, r1
 8008bb8:	42ab      	cmp	r3, r5
 8008bba:	dcf2      	bgt.n	8008ba2 <_printf_i+0x21e>
 8008bbc:	e7eb      	b.n	8008b96 <_printf_i+0x212>
 8008bbe:	2500      	movs	r5, #0
 8008bc0:	f104 0619 	add.w	r6, r4, #25
 8008bc4:	e7f5      	b.n	8008bb2 <_printf_i+0x22e>
 8008bc6:	bf00      	nop
 8008bc8:	080096f5 	.word	0x080096f5
 8008bcc:	08009706 	.word	0x08009706

08008bd0 <_sbrk_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d06      	ldr	r5, [pc, #24]	; (8008bec <_sbrk_r+0x1c>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	f7f8 fcc2 	bl	8001564 <_sbrk>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_sbrk_r+0x1a>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_sbrk_r+0x1a>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	20012f9c 	.word	0x20012f9c

08008bf0 <__sread>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf8:	f000 fafc 	bl	80091f4 <_read_r>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	bfab      	itete	ge
 8008c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c02:	89a3      	ldrhlt	r3, [r4, #12]
 8008c04:	181b      	addge	r3, r3, r0
 8008c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c0a:	bfac      	ite	ge
 8008c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c0e:	81a3      	strhlt	r3, [r4, #12]
 8008c10:	bd10      	pop	{r4, pc}

08008c12 <__swrite>:
 8008c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c16:	461f      	mov	r7, r3
 8008c18:	898b      	ldrh	r3, [r1, #12]
 8008c1a:	05db      	lsls	r3, r3, #23
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	4616      	mov	r6, r2
 8008c22:	d505      	bpl.n	8008c30 <__swrite+0x1e>
 8008c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c28:	2302      	movs	r3, #2
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f000 f9c8 	bl	8008fc0 <_lseek_r>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c3a:	81a3      	strh	r3, [r4, #12]
 8008c3c:	4632      	mov	r2, r6
 8008c3e:	463b      	mov	r3, r7
 8008c40:	4628      	mov	r0, r5
 8008c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c46:	f000 b869 	b.w	8008d1c <_write_r>

08008c4a <__sseek>:
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c52:	f000 f9b5 	bl	8008fc0 <_lseek_r>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	bf15      	itete	ne
 8008c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c66:	81a3      	strheq	r3, [r4, #12]
 8008c68:	bf18      	it	ne
 8008c6a:	81a3      	strhne	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__sclose>:
 8008c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c72:	f000 b8d3 	b.w	8008e1c <_close_r>
	...

08008c78 <__swbuf_r>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b118      	cbz	r0, 8008c8a <__swbuf_r+0x12>
 8008c82:	6983      	ldr	r3, [r0, #24]
 8008c84:	b90b      	cbnz	r3, 8008c8a <__swbuf_r+0x12>
 8008c86:	f7ff fa25 	bl	80080d4 <__sinit>
 8008c8a:	4b21      	ldr	r3, [pc, #132]	; (8008d10 <__swbuf_r+0x98>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d12b      	bne.n	8008ce8 <__swbuf_r+0x70>
 8008c90:	686c      	ldr	r4, [r5, #4]
 8008c92:	69a3      	ldr	r3, [r4, #24]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	071a      	lsls	r2, r3, #28
 8008c9a:	d52f      	bpl.n	8008cfc <__swbuf_r+0x84>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	b36b      	cbz	r3, 8008cfc <__swbuf_r+0x84>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	1ac0      	subs	r0, r0, r3
 8008ca6:	6963      	ldr	r3, [r4, #20]
 8008ca8:	b2f6      	uxtb	r6, r6
 8008caa:	4283      	cmp	r3, r0
 8008cac:	4637      	mov	r7, r6
 8008cae:	dc04      	bgt.n	8008cba <__swbuf_r+0x42>
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f948 	bl	8008f48 <_fflush_r>
 8008cb8:	bb30      	cbnz	r0, 8008d08 <__swbuf_r+0x90>
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	60a3      	str	r3, [r4, #8]
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	6022      	str	r2, [r4, #0]
 8008cc6:	701e      	strb	r6, [r3, #0]
 8008cc8:	6963      	ldr	r3, [r4, #20]
 8008cca:	3001      	adds	r0, #1
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	d004      	beq.n	8008cda <__swbuf_r+0x62>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	07db      	lsls	r3, r3, #31
 8008cd4:	d506      	bpl.n	8008ce4 <__swbuf_r+0x6c>
 8008cd6:	2e0a      	cmp	r6, #10
 8008cd8:	d104      	bne.n	8008ce4 <__swbuf_r+0x6c>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f000 f933 	bl	8008f48 <_fflush_r>
 8008ce2:	b988      	cbnz	r0, 8008d08 <__swbuf_r+0x90>
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <__swbuf_r+0x9c>)
 8008cea:	429c      	cmp	r4, r3
 8008cec:	d101      	bne.n	8008cf2 <__swbuf_r+0x7a>
 8008cee:	68ac      	ldr	r4, [r5, #8]
 8008cf0:	e7cf      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <__swbuf_r+0xa0>)
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	bf08      	it	eq
 8008cf8:	68ec      	ldreq	r4, [r5, #12]
 8008cfa:	e7ca      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f81e 	bl	8008d40 <__swsetup_r>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d0cb      	beq.n	8008ca0 <__swbuf_r+0x28>
 8008d08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d0c:	e7ea      	b.n	8008ce4 <__swbuf_r+0x6c>
 8008d0e:	bf00      	nop
 8008d10:	080096a4 	.word	0x080096a4
 8008d14:	080096c4 	.word	0x080096c4
 8008d18:	08009684 	.word	0x08009684

08008d1c <_write_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d07      	ldr	r5, [pc, #28]	; (8008d3c <_write_r+0x20>)
 8008d20:	4604      	mov	r4, r0
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	2200      	movs	r2, #0
 8008d28:	602a      	str	r2, [r5, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7f8 fbc9 	bl	80014c2 <_write>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_write_r+0x1e>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_write_r+0x1e>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	20012f9c 	.word	0x20012f9c

08008d40 <__swsetup_r>:
 8008d40:	4b32      	ldr	r3, [pc, #200]	; (8008e0c <__swsetup_r+0xcc>)
 8008d42:	b570      	push	{r4, r5, r6, lr}
 8008d44:	681d      	ldr	r5, [r3, #0]
 8008d46:	4606      	mov	r6, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	b125      	cbz	r5, 8008d56 <__swsetup_r+0x16>
 8008d4c:	69ab      	ldr	r3, [r5, #24]
 8008d4e:	b913      	cbnz	r3, 8008d56 <__swsetup_r+0x16>
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7ff f9bf 	bl	80080d4 <__sinit>
 8008d56:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <__swsetup_r+0xd0>)
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	d10f      	bne.n	8008d7c <__swsetup_r+0x3c>
 8008d5c:	686c      	ldr	r4, [r5, #4]
 8008d5e:	89a3      	ldrh	r3, [r4, #12]
 8008d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d64:	0719      	lsls	r1, r3, #28
 8008d66:	d42c      	bmi.n	8008dc2 <__swsetup_r+0x82>
 8008d68:	06dd      	lsls	r5, r3, #27
 8008d6a:	d411      	bmi.n	8008d90 <__swsetup_r+0x50>
 8008d6c:	2309      	movs	r3, #9
 8008d6e:	6033      	str	r3, [r6, #0]
 8008d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d7a:	e03e      	b.n	8008dfa <__swsetup_r+0xba>
 8008d7c:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <__swsetup_r+0xd4>)
 8008d7e:	429c      	cmp	r4, r3
 8008d80:	d101      	bne.n	8008d86 <__swsetup_r+0x46>
 8008d82:	68ac      	ldr	r4, [r5, #8]
 8008d84:	e7eb      	b.n	8008d5e <__swsetup_r+0x1e>
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <__swsetup_r+0xd8>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	bf08      	it	eq
 8008d8c:	68ec      	ldreq	r4, [r5, #12]
 8008d8e:	e7e6      	b.n	8008d5e <__swsetup_r+0x1e>
 8008d90:	0758      	lsls	r0, r3, #29
 8008d92:	d512      	bpl.n	8008dba <__swsetup_r+0x7a>
 8008d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d96:	b141      	cbz	r1, 8008daa <__swsetup_r+0x6a>
 8008d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d9c:	4299      	cmp	r1, r3
 8008d9e:	d002      	beq.n	8008da6 <__swsetup_r+0x66>
 8008da0:	4630      	mov	r0, r6
 8008da2:	f000 f9ab 	bl	80090fc <_free_r>
 8008da6:	2300      	movs	r3, #0
 8008da8:	6363      	str	r3, [r4, #52]	; 0x34
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	2300      	movs	r3, #0
 8008db4:	6063      	str	r3, [r4, #4]
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	f043 0308 	orr.w	r3, r3, #8
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b94b      	cbnz	r3, 8008dda <__swsetup_r+0x9a>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dd0:	d003      	beq.n	8008dda <__swsetup_r+0x9a>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f92b 	bl	8009030 <__smakebuf_r>
 8008dda:	89a0      	ldrh	r0, [r4, #12]
 8008ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008de0:	f010 0301 	ands.w	r3, r0, #1
 8008de4:	d00a      	beq.n	8008dfc <__swsetup_r+0xbc>
 8008de6:	2300      	movs	r3, #0
 8008de8:	60a3      	str	r3, [r4, #8]
 8008dea:	6963      	ldr	r3, [r4, #20]
 8008dec:	425b      	negs	r3, r3
 8008dee:	61a3      	str	r3, [r4, #24]
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	b943      	cbnz	r3, 8008e06 <__swsetup_r+0xc6>
 8008df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008df8:	d1ba      	bne.n	8008d70 <__swsetup_r+0x30>
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	0781      	lsls	r1, r0, #30
 8008dfe:	bf58      	it	pl
 8008e00:	6963      	ldrpl	r3, [r4, #20]
 8008e02:	60a3      	str	r3, [r4, #8]
 8008e04:	e7f4      	b.n	8008df0 <__swsetup_r+0xb0>
 8008e06:	2000      	movs	r0, #0
 8008e08:	e7f7      	b.n	8008dfa <__swsetup_r+0xba>
 8008e0a:	bf00      	nop
 8008e0c:	20000028 	.word	0x20000028
 8008e10:	080096a4 	.word	0x080096a4
 8008e14:	080096c4 	.word	0x080096c4
 8008e18:	08009684 	.word	0x08009684

08008e1c <_close_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d06      	ldr	r5, [pc, #24]	; (8008e38 <_close_r+0x1c>)
 8008e20:	2300      	movs	r3, #0
 8008e22:	4604      	mov	r4, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	602b      	str	r3, [r5, #0]
 8008e28:	f7f8 fb67 	bl	80014fa <_close>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_close_r+0x1a>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_close_r+0x1a>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20012f9c 	.word	0x20012f9c

08008e3c <__sflush_r>:
 8008e3c:	898a      	ldrh	r2, [r1, #12]
 8008e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e42:	4605      	mov	r5, r0
 8008e44:	0710      	lsls	r0, r2, #28
 8008e46:	460c      	mov	r4, r1
 8008e48:	d458      	bmi.n	8008efc <__sflush_r+0xc0>
 8008e4a:	684b      	ldr	r3, [r1, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dc05      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc02      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e56:	2000      	movs	r0, #0
 8008e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d0f9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008e62:	2300      	movs	r3, #0
 8008e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e68:	682f      	ldr	r7, [r5, #0]
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	d032      	beq.n	8008ed4 <__sflush_r+0x98>
 8008e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	075a      	lsls	r2, r3, #29
 8008e74:	d505      	bpl.n	8008e82 <__sflush_r+0x46>
 8008e76:	6863      	ldr	r3, [r4, #4]
 8008e78:	1ac0      	subs	r0, r0, r3
 8008e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e7c:	b10b      	cbz	r3, 8008e82 <__sflush_r+0x46>
 8008e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e80:	1ac0      	subs	r0, r0, r3
 8008e82:	2300      	movs	r3, #0
 8008e84:	4602      	mov	r2, r0
 8008e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e88:	6a21      	ldr	r1, [r4, #32]
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b0      	blx	r6
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	d106      	bne.n	8008ea2 <__sflush_r+0x66>
 8008e94:	6829      	ldr	r1, [r5, #0]
 8008e96:	291d      	cmp	r1, #29
 8008e98:	d82c      	bhi.n	8008ef4 <__sflush_r+0xb8>
 8008e9a:	4a2a      	ldr	r2, [pc, #168]	; (8008f44 <__sflush_r+0x108>)
 8008e9c:	40ca      	lsrs	r2, r1
 8008e9e:	07d6      	lsls	r6, r2, #31
 8008ea0:	d528      	bpl.n	8008ef4 <__sflush_r+0xb8>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	6062      	str	r2, [r4, #4]
 8008ea6:	04d9      	lsls	r1, r3, #19
 8008ea8:	6922      	ldr	r2, [r4, #16]
 8008eaa:	6022      	str	r2, [r4, #0]
 8008eac:	d504      	bpl.n	8008eb8 <__sflush_r+0x7c>
 8008eae:	1c42      	adds	r2, r0, #1
 8008eb0:	d101      	bne.n	8008eb6 <__sflush_r+0x7a>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	b903      	cbnz	r3, 8008eb8 <__sflush_r+0x7c>
 8008eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8008eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eba:	602f      	str	r7, [r5, #0]
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d0ca      	beq.n	8008e56 <__sflush_r+0x1a>
 8008ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	d002      	beq.n	8008ece <__sflush_r+0x92>
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f917 	bl	80090fc <_free_r>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ed2:	e7c1      	b.n	8008e58 <__sflush_r+0x1c>
 8008ed4:	6a21      	ldr	r1, [r4, #32]
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b0      	blx	r6
 8008edc:	1c41      	adds	r1, r0, #1
 8008ede:	d1c7      	bne.n	8008e70 <__sflush_r+0x34>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c4      	beq.n	8008e70 <__sflush_r+0x34>
 8008ee6:	2b1d      	cmp	r3, #29
 8008ee8:	d001      	beq.n	8008eee <__sflush_r+0xb2>
 8008eea:	2b16      	cmp	r3, #22
 8008eec:	d101      	bne.n	8008ef2 <__sflush_r+0xb6>
 8008eee:	602f      	str	r7, [r5, #0]
 8008ef0:	e7b1      	b.n	8008e56 <__sflush_r+0x1a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	e7ad      	b.n	8008e58 <__sflush_r+0x1c>
 8008efc:	690f      	ldr	r7, [r1, #16]
 8008efe:	2f00      	cmp	r7, #0
 8008f00:	d0a9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008f02:	0793      	lsls	r3, r2, #30
 8008f04:	680e      	ldr	r6, [r1, #0]
 8008f06:	bf08      	it	eq
 8008f08:	694b      	ldreq	r3, [r1, #20]
 8008f0a:	600f      	str	r7, [r1, #0]
 8008f0c:	bf18      	it	ne
 8008f0e:	2300      	movne	r3, #0
 8008f10:	eba6 0807 	sub.w	r8, r6, r7
 8008f14:	608b      	str	r3, [r1, #8]
 8008f16:	f1b8 0f00 	cmp.w	r8, #0
 8008f1a:	dd9c      	ble.n	8008e56 <__sflush_r+0x1a>
 8008f1c:	6a21      	ldr	r1, [r4, #32]
 8008f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f20:	4643      	mov	r3, r8
 8008f22:	463a      	mov	r2, r7
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b0      	blx	r6
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	dc06      	bgt.n	8008f3a <__sflush_r+0xfe>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f38:	e78e      	b.n	8008e58 <__sflush_r+0x1c>
 8008f3a:	4407      	add	r7, r0
 8008f3c:	eba8 0800 	sub.w	r8, r8, r0
 8008f40:	e7e9      	b.n	8008f16 <__sflush_r+0xda>
 8008f42:	bf00      	nop
 8008f44:	20400001 	.word	0x20400001

08008f48 <_fflush_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	690b      	ldr	r3, [r1, #16]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b913      	cbnz	r3, 8008f58 <_fflush_r+0x10>
 8008f52:	2500      	movs	r5, #0
 8008f54:	4628      	mov	r0, r5
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	b118      	cbz	r0, 8008f62 <_fflush_r+0x1a>
 8008f5a:	6983      	ldr	r3, [r0, #24]
 8008f5c:	b90b      	cbnz	r3, 8008f62 <_fflush_r+0x1a>
 8008f5e:	f7ff f8b9 	bl	80080d4 <__sinit>
 8008f62:	4b14      	ldr	r3, [pc, #80]	; (8008fb4 <_fflush_r+0x6c>)
 8008f64:	429c      	cmp	r4, r3
 8008f66:	d11b      	bne.n	8008fa0 <_fflush_r+0x58>
 8008f68:	686c      	ldr	r4, [r5, #4]
 8008f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0ef      	beq.n	8008f52 <_fflush_r+0xa>
 8008f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f74:	07d0      	lsls	r0, r2, #31
 8008f76:	d404      	bmi.n	8008f82 <_fflush_r+0x3a>
 8008f78:	0599      	lsls	r1, r3, #22
 8008f7a:	d402      	bmi.n	8008f82 <_fflush_r+0x3a>
 8008f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7e:	f7ff f947 	bl	8008210 <__retarget_lock_acquire_recursive>
 8008f82:	4628      	mov	r0, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	f7ff ff59 	bl	8008e3c <__sflush_r>
 8008f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f8c:	07da      	lsls	r2, r3, #31
 8008f8e:	4605      	mov	r5, r0
 8008f90:	d4e0      	bmi.n	8008f54 <_fflush_r+0xc>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	059b      	lsls	r3, r3, #22
 8008f96:	d4dd      	bmi.n	8008f54 <_fflush_r+0xc>
 8008f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9a:	f7ff f93a 	bl	8008212 <__retarget_lock_release_recursive>
 8008f9e:	e7d9      	b.n	8008f54 <_fflush_r+0xc>
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <_fflush_r+0x70>)
 8008fa2:	429c      	cmp	r4, r3
 8008fa4:	d101      	bne.n	8008faa <_fflush_r+0x62>
 8008fa6:	68ac      	ldr	r4, [r5, #8]
 8008fa8:	e7df      	b.n	8008f6a <_fflush_r+0x22>
 8008faa:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <_fflush_r+0x74>)
 8008fac:	429c      	cmp	r4, r3
 8008fae:	bf08      	it	eq
 8008fb0:	68ec      	ldreq	r4, [r5, #12]
 8008fb2:	e7da      	b.n	8008f6a <_fflush_r+0x22>
 8008fb4:	080096a4 	.word	0x080096a4
 8008fb8:	080096c4 	.word	0x080096c4
 8008fbc:	08009684 	.word	0x08009684

08008fc0 <_lseek_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	; (8008fe0 <_lseek_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7f8 faba 	bl	8001548 <_lseek>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_lseek_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_lseek_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20012f9c 	.word	0x20012f9c

08008fe4 <__swhatbuf_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fec:	2900      	cmp	r1, #0
 8008fee:	b096      	sub	sp, #88	; 0x58
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	461d      	mov	r5, r3
 8008ff4:	da08      	bge.n	8009008 <__swhatbuf_r+0x24>
 8008ff6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	061a      	lsls	r2, r3, #24
 8009000:	d410      	bmi.n	8009024 <__swhatbuf_r+0x40>
 8009002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009006:	e00e      	b.n	8009026 <__swhatbuf_r+0x42>
 8009008:	466a      	mov	r2, sp
 800900a:	f000 f905 	bl	8009218 <_fstat_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	dbf1      	blt.n	8008ff6 <__swhatbuf_r+0x12>
 8009012:	9a01      	ldr	r2, [sp, #4]
 8009014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800901c:	425a      	negs	r2, r3
 800901e:	415a      	adcs	r2, r3
 8009020:	602a      	str	r2, [r5, #0]
 8009022:	e7ee      	b.n	8009002 <__swhatbuf_r+0x1e>
 8009024:	2340      	movs	r3, #64	; 0x40
 8009026:	2000      	movs	r0, #0
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	b016      	add	sp, #88	; 0x58
 800902c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009030 <__smakebuf_r>:
 8009030:	898b      	ldrh	r3, [r1, #12]
 8009032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009034:	079d      	lsls	r5, r3, #30
 8009036:	4606      	mov	r6, r0
 8009038:	460c      	mov	r4, r1
 800903a:	d507      	bpl.n	800904c <__smakebuf_r+0x1c>
 800903c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	6123      	str	r3, [r4, #16]
 8009044:	2301      	movs	r3, #1
 8009046:	6163      	str	r3, [r4, #20]
 8009048:	b002      	add	sp, #8
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	ab01      	add	r3, sp, #4
 800904e:	466a      	mov	r2, sp
 8009050:	f7ff ffc8 	bl	8008fe4 <__swhatbuf_r>
 8009054:	9900      	ldr	r1, [sp, #0]
 8009056:	4605      	mov	r5, r0
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff f8fb 	bl	8008254 <_malloc_r>
 800905e:	b948      	cbnz	r0, 8009074 <__smakebuf_r+0x44>
 8009060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009064:	059a      	lsls	r2, r3, #22
 8009066:	d4ef      	bmi.n	8009048 <__smakebuf_r+0x18>
 8009068:	f023 0303 	bic.w	r3, r3, #3
 800906c:	f043 0302 	orr.w	r3, r3, #2
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	e7e3      	b.n	800903c <__smakebuf_r+0xc>
 8009074:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <__smakebuf_r+0x7c>)
 8009076:	62b3      	str	r3, [r6, #40]	; 0x28
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	6020      	str	r0, [r4, #0]
 800907c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009080:	81a3      	strh	r3, [r4, #12]
 8009082:	9b00      	ldr	r3, [sp, #0]
 8009084:	6163      	str	r3, [r4, #20]
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	6120      	str	r0, [r4, #16]
 800908a:	b15b      	cbz	r3, 80090a4 <__smakebuf_r+0x74>
 800908c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009090:	4630      	mov	r0, r6
 8009092:	f000 f8d3 	bl	800923c <_isatty_r>
 8009096:	b128      	cbz	r0, 80090a4 <__smakebuf_r+0x74>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	81a3      	strh	r3, [r4, #12]
 80090a4:	89a0      	ldrh	r0, [r4, #12]
 80090a6:	4305      	orrs	r5, r0
 80090a8:	81a5      	strh	r5, [r4, #12]
 80090aa:	e7cd      	b.n	8009048 <__smakebuf_r+0x18>
 80090ac:	0800806d 	.word	0x0800806d

080090b0 <memmove>:
 80090b0:	4288      	cmp	r0, r1
 80090b2:	b510      	push	{r4, lr}
 80090b4:	eb01 0402 	add.w	r4, r1, r2
 80090b8:	d902      	bls.n	80090c0 <memmove+0x10>
 80090ba:	4284      	cmp	r4, r0
 80090bc:	4623      	mov	r3, r4
 80090be:	d807      	bhi.n	80090d0 <memmove+0x20>
 80090c0:	1e43      	subs	r3, r0, #1
 80090c2:	42a1      	cmp	r1, r4
 80090c4:	d008      	beq.n	80090d8 <memmove+0x28>
 80090c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090ce:	e7f8      	b.n	80090c2 <memmove+0x12>
 80090d0:	4402      	add	r2, r0
 80090d2:	4601      	mov	r1, r0
 80090d4:	428a      	cmp	r2, r1
 80090d6:	d100      	bne.n	80090da <memmove+0x2a>
 80090d8:	bd10      	pop	{r4, pc}
 80090da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090e2:	e7f7      	b.n	80090d4 <memmove+0x24>

080090e4 <__malloc_lock>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__malloc_lock+0x8>)
 80090e6:	f7ff b893 	b.w	8008210 <__retarget_lock_acquire_recursive>
 80090ea:	bf00      	nop
 80090ec:	20012f90 	.word	0x20012f90

080090f0 <__malloc_unlock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__malloc_unlock+0x8>)
 80090f2:	f7ff b88e 	b.w	8008212 <__retarget_lock_release_recursive>
 80090f6:	bf00      	nop
 80090f8:	20012f90 	.word	0x20012f90

080090fc <_free_r>:
 80090fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fe:	2900      	cmp	r1, #0
 8009100:	d044      	beq.n	800918c <_free_r+0x90>
 8009102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009106:	9001      	str	r0, [sp, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f1a1 0404 	sub.w	r4, r1, #4
 800910e:	bfb8      	it	lt
 8009110:	18e4      	addlt	r4, r4, r3
 8009112:	f7ff ffe7 	bl	80090e4 <__malloc_lock>
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <_free_r+0x94>)
 8009118:	9801      	ldr	r0, [sp, #4]
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	b933      	cbnz	r3, 800912c <_free_r+0x30>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	b003      	add	sp, #12
 8009124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009128:	f7ff bfe2 	b.w	80090f0 <__malloc_unlock>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d908      	bls.n	8009142 <_free_r+0x46>
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	1961      	adds	r1, r4, r5
 8009134:	428b      	cmp	r3, r1
 8009136:	bf01      	itttt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	1949      	addeq	r1, r1, r5
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	e7ed      	b.n	800911e <_free_r+0x22>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x50>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x46>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1855      	adds	r5, r2, r1
 8009150:	42a5      	cmp	r5, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x70>
 8009154:	6824      	ldr	r4, [r4, #0]
 8009156:	4421      	add	r1, r4
 8009158:	1854      	adds	r4, r2, r1
 800915a:	42a3      	cmp	r3, r4
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1e0      	bne.n	8009122 <_free_r+0x26>
 8009160:	681c      	ldr	r4, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6053      	str	r3, [r2, #4]
 8009166:	4421      	add	r1, r4
 8009168:	6011      	str	r1, [r2, #0]
 800916a:	e7da      	b.n	8009122 <_free_r+0x26>
 800916c:	d902      	bls.n	8009174 <_free_r+0x78>
 800916e:	230c      	movs	r3, #12
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	e7d6      	b.n	8009122 <_free_r+0x26>
 8009174:	6825      	ldr	r5, [r4, #0]
 8009176:	1961      	adds	r1, r4, r5
 8009178:	428b      	cmp	r3, r1
 800917a:	bf04      	itt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	bf04      	itt	eq
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	6054      	str	r4, [r2, #4]
 800918a:	e7ca      	b.n	8009122 <_free_r+0x26>
 800918c:	b003      	add	sp, #12
 800918e:	bd30      	pop	{r4, r5, pc}
 8009190:	20012f94 	.word	0x20012f94

08009194 <_realloc_r>:
 8009194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009198:	4680      	mov	r8, r0
 800919a:	4614      	mov	r4, r2
 800919c:	460e      	mov	r6, r1
 800919e:	b921      	cbnz	r1, 80091aa <_realloc_r+0x16>
 80091a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091a4:	4611      	mov	r1, r2
 80091a6:	f7ff b855 	b.w	8008254 <_malloc_r>
 80091aa:	b92a      	cbnz	r2, 80091b8 <_realloc_r+0x24>
 80091ac:	f7ff ffa6 	bl	80090fc <_free_r>
 80091b0:	4625      	mov	r5, r4
 80091b2:	4628      	mov	r0, r5
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	f000 f850 	bl	800925c <_malloc_usable_size_r>
 80091bc:	4284      	cmp	r4, r0
 80091be:	4607      	mov	r7, r0
 80091c0:	d802      	bhi.n	80091c8 <_realloc_r+0x34>
 80091c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091c6:	d812      	bhi.n	80091ee <_realloc_r+0x5a>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4640      	mov	r0, r8
 80091cc:	f7ff f842 	bl	8008254 <_malloc_r>
 80091d0:	4605      	mov	r5, r0
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d0ed      	beq.n	80091b2 <_realloc_r+0x1e>
 80091d6:	42bc      	cmp	r4, r7
 80091d8:	4622      	mov	r2, r4
 80091da:	4631      	mov	r1, r6
 80091dc:	bf28      	it	cs
 80091de:	463a      	movcs	r2, r7
 80091e0:	f7fe fed2 	bl	8007f88 <memcpy>
 80091e4:	4631      	mov	r1, r6
 80091e6:	4640      	mov	r0, r8
 80091e8:	f7ff ff88 	bl	80090fc <_free_r>
 80091ec:	e7e1      	b.n	80091b2 <_realloc_r+0x1e>
 80091ee:	4635      	mov	r5, r6
 80091f0:	e7df      	b.n	80091b2 <_realloc_r+0x1e>
	...

080091f4 <_read_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_read_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f8 f940 	bl	8001488 <_read>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_read_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_read_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20012f9c 	.word	0x20012f9c

08009218 <_fstat_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d07      	ldr	r5, [pc, #28]	; (8009238 <_fstat_r+0x20>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	4611      	mov	r1, r2
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	f7f8 f974 	bl	8001512 <_fstat>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	d102      	bne.n	8009234 <_fstat_r+0x1c>
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	b103      	cbz	r3, 8009234 <_fstat_r+0x1c>
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	20012f9c 	.word	0x20012f9c

0800923c <_isatty_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d06      	ldr	r5, [pc, #24]	; (8009258 <_isatty_r+0x1c>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	f7f8 f973 	bl	8001532 <_isatty>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_isatty_r+0x1a>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_isatty_r+0x1a>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	20012f9c 	.word	0x20012f9c

0800925c <_malloc_usable_size_r>:
 800925c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009260:	1f18      	subs	r0, r3, #4
 8009262:	2b00      	cmp	r3, #0
 8009264:	bfbc      	itt	lt
 8009266:	580b      	ldrlt	r3, [r1, r0]
 8009268:	18c0      	addlt	r0, r0, r3
 800926a:	4770      	bx	lr

0800926c <_init>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr

08009278 <_fini>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	bf00      	nop
 800927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927e:	bc08      	pop	{r3}
 8009280:	469e      	mov	lr, r3
 8009282:	4770      	bx	lr
