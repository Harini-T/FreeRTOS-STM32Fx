
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f38  08006f38  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014490  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015974  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003075  00000000  00000000  000359c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00038a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001218  00000000  00000000  00039dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231ef  00000000  00000000  0003aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001627f  00000000  00000000  0005e1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7ef8  00000000  00000000  0007445e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c356  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005200  00000000  00000000  0014c3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dfc 	.word	0x08006dfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006dfc 	.word	0x08006dfc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed8 	.word	0x20012ed8

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fbc1 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f851 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8b9 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800058a:	4821      	ldr	r0, [pc, #132]	; (8000610 <main+0x98>)
 800058c:	f004 fd36 	bl	8004ffc <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <main+0x9c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <main+0x9c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800059c:	f004 fae8 	bl	8004b70 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005a0:	f005 fe46 	bl	8006230 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2302      	movs	r3, #2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	22c8      	movs	r2, #200	; 0xc8
 80005b2:	4919      	ldr	r1, [pc, #100]	; (8000618 <main+0xa0>)
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <main+0xa4>)
 80005b6:	f002 fa29 	bl	8002a0c <xTaskCreate>
 80005ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d00a      	beq.n	80005d8 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c6:	f383 8811 	msr	BASEPRI, r3
 80005ca:	f3bf 8f6f 	isb	sy
 80005ce:	f3bf 8f4f 	dsb	sy
 80005d2:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d4:	bf00      	nop
 80005d6:	e7fe      	b.n	80005d6 <main+0x5e>

  status = xTaskCreate(task2_handler, "Task-2", 200,NULL, 3, &task2_handle);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2303      	movs	r3, #3
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	22c8      	movs	r2, #200	; 0xc8
 80005e4:	490e      	ldr	r1, [pc, #56]	; (8000620 <main+0xa8>)
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <main+0xac>)
 80005e8:	f002 fa10 	bl	8002a0c <xTaskCreate>
 80005ec:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00a      	beq.n	800060a <main+0x92>
        __asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f8:	f383 8811 	msr	BASEPRI, r3
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	60fb      	str	r3, [r7, #12]
    }
 8000606:	bf00      	nop
 8000608:	e7fe      	b.n	8000608 <main+0x90>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800060a:	f002 fc61 	bl	8002ed0 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x96>
 8000610:	0007a120 	.word	0x0007a120
 8000614:	e0001000 	.word	0xe0001000
 8000618:	08006e14 	.word	0x08006e14
 800061c:	08000a59 	.word	0x08000a59
 8000620:	08006e1c 	.word	0x08006e1c
 8000624:	08000a7d 	.word	0x08000a7d

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fbd8 	bl	8006dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069c:	23a8      	movs	r3, #168	; 0xa8
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe65 	bl	800137c <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 fa12 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f8c6 	bl	800186c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f9fb 	bl	8000ae0 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4ba6      	ldr	r3, [pc, #664]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4aa5      	ldr	r2, [pc, #660]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4ba3      	ldr	r3, [pc, #652]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b9f      	ldr	r3, [pc, #636]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a9e      	ldr	r2, [pc, #632]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9c      	ldr	r3, [pc, #624]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b98      	ldr	r3, [pc, #608]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a97      	ldr	r2, [pc, #604]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b95      	ldr	r3, [pc, #596]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b91      	ldr	r3, [pc, #580]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a90      	ldr	r2, [pc, #576]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b8e      	ldr	r3, [pc, #568]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b8a      	ldr	r3, [pc, #552]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a89      	ldr	r2, [pc, #548]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b87      	ldr	r3, [pc, #540]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b83      	ldr	r3, [pc, #524]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a82      	ldr	r2, [pc, #520]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	487d      	ldr	r0, [pc, #500]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80007c0:	f000 fd84 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	487b      	ldr	r0, [pc, #492]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 80007ca:	f000 fd7f 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007d4:	4879      	ldr	r0, [pc, #484]	; (80009bc <MX_GPIO_Init+0x2c0>)
 80007d6:	f000 fd79 	bl	80012cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4870      	ldr	r0, [pc, #448]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80007f2:	f000 fbcf 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486a      	ldr	r0, [pc, #424]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 800080e:	f000 fbc1 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000822:	2305      	movs	r3, #5
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4862      	ldr	r0, [pc, #392]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 800082e:	f000 fbb1 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	485e      	ldr	r0, [pc, #376]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000848:	f000 fba4 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084c:	2310      	movs	r3, #16
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085c:	2306      	movs	r3, #6
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4856      	ldr	r0, [pc, #344]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000868:	f000 fb94 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800086c:	23e0      	movs	r3, #224	; 0xe0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	484e      	ldr	r0, [pc, #312]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000888:	f000 fb84 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088c:	2304      	movs	r3, #4
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4849      	ldr	r0, [pc, #292]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 80008a0:	f000 fb78 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4840      	ldr	r0, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 80008c2:	f000 fb67 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4837      	ldr	r0, [pc, #220]	; (80009bc <MX_GPIO_Init+0x2c0>)
 80008e0:	f000 fb58 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f6:	2306      	movs	r3, #6
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	482d      	ldr	r0, [pc, #180]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 8000902:	f000 fb47 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 800091c:	f000 fb3a 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000920:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4820      	ldr	r0, [pc, #128]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 800093e:	f000 fb29 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4819      	ldr	r0, [pc, #100]	; (80009bc <MX_GPIO_Init+0x2c0>)
 8000956:	f000 fb1d 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096c:	2304      	movs	r3, #4
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 8000978:	f000 fb0c 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000980:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 8000992:	f000 faff 	bl	8000f94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2106      	movs	r1, #6
 800099a:	2006      	movs	r0, #6
 800099c:	f000 fad0 	bl	8000f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009a0:	2006      	movs	r0, #6
 80009a2:	f000 fae9 	bl	8000f78 <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400

080009c8 <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 80009d2:	f003 fdc7 	bl	8004564 <vPortEnterCritical>
	if(status_button){
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <switch_priority+0x84>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <switch_priority+0x20>
		status_button = 0;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <switch_priority+0x84>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 80009e8:	f003 fdec 	bl	80045c4 <vPortExitCritical>

	if(switch_priority){
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d027      	beq.n	8000a42 <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 80009f2:	4817      	ldr	r0, [pc, #92]	; (8000a50 <switch_priority+0x88>)
 80009f4:	f002 fc6c 	bl	80032d0 <xTaskGetHandle>
 80009f8:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <switch_priority+0x8c>)
 80009fc:	f002 fc68 	bl	80032d0 <xTaskGetHandle>
 8000a00:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000a02:	6938      	ldr	r0, [r7, #16]
 8000a04:	f002 f98a 	bl	8002d1c <uxTaskPriorityGet>
 8000a08:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f002 f986 	bl	8002d1c <uxTaskPriorityGet>
 8000a10:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000a12:	f003 f8c5 	bl	8003ba0 <xTaskGetCurrentTaskHandle>
 8000a16:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d108      	bne.n	8000a32 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	6938      	ldr	r0, [r7, #16]
 8000a24:	f002 f994 	bl	8002d50 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f002 f990 	bl	8002d50 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000a30:	e007      	b.n	8000a42 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f002 f98b 	bl	8002d50 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	6938      	ldr	r0, [r7, #16]
 8000a3e:	f002 f987 	bl	8002d50 <vTaskPrioritySet>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000038 	.word	0x20000038
 8000a50:	08006e14 	.word	0x08006e14
 8000a54:	08006e1c 	.word	0x08006e1c

08000a58 <task1_handler>:

static void task1_handler(void* parameters)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <task1_handler+0x20>)
 8000a66:	f000 fc4a 	bl	80012fe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f000 f98c 	bl	8000d88 <HAL_Delay>
		switch_priority();
 8000a70:	f7ff ffaa 	bl	80009c8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a74:	e7f4      	b.n	8000a60 <task1_handler+0x8>
 8000a76:	bf00      	nop
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <task2_handler+0x20>)
 8000a8a:	f000 fc38 	bl	80012fe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f000 f979 	bl	8000d88 <HAL_Delay>
		switch_priority();
 8000a96:	f7ff ff97 	bl	80009c8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a9a:	e7f3      	b.n	8000a84 <task2_handler+0x8>
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000aa4:	f005 fe8e 	bl	80067c4 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <button_interrupt_handler+0x18>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000aae:	f005 fecb 	bl	8006848 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000038 	.word	0x20000038

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ace:	f000 f93b 	bl	8000d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001000 	.word	0x40001000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b2e:	f003 fc9b 	bl	8004468 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a32      	ldr	r2, [pc, #200]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6c:	f107 0210 	add.w	r2, r7, #16
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f884 	bl	8001c84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b86:	f001 f869 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8000b8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b8c:	e004      	b.n	8000b98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b8e:	f001 f865 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8000b92:	4603      	mov	r3, r0
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <HAL_InitTick+0xe8>)
 8000b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba0:	0c9b      	lsrs	r3, r3, #18
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_InitTick+0xec>)
 8000ba8:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <HAL_InitTick+0xf0>)
 8000baa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_InitTick+0xec>)
 8000bae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_InitTick+0xec>)
 8000bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_InitTick+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <HAL_InitTick+0xec>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_InitTick+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <HAL_InitTick+0xec>)
 8000bce:	f001 f88b 	bl	8001ce8 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11b      	bne.n	8000c18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <HAL_InitTick+0xec>)
 8000be2:	f001 f8db 	bl	8001d9c <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d111      	bne.n	8000c18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f000 f9bf 	bl	8000f78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d808      	bhi.n	8000c12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f000 f99b 	bl	8000f40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0xf4>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e002      	b.n	8000c18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	431bde83 	.word	0x431bde83
 8000c2c:	2000003c 	.word	0x2000003c
 8000c30:	40001000 	.word	0x40001000
 8000c34:	20000004 	.word	0x20000004

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000c68:	f7ff ff1a 	bl	8000aa0 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fb61 	bl	8001334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM6_DAC_IRQHandler+0x10>)
 8000c7e:	f001 f8fd 	bl	8001e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000003c 	.word	0x2000003c

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f006 f843 	bl	8006d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fc49 	bl	8000578 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cf4:	08006f40 	.word	0x08006f40
  ldr r2, =_sbss
 8000cf8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cfc:	200144ac 	.word	0x200144ac

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f8fc 	bl	8000f2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff ff04 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff feda 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000084 	.word	0x20000084

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000084 	.word	0x20000084

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff4c 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f52:	f7ff ff61 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f7ff ffb1 	bl	8000ec4 <NVIC_EncodePriority>
 8000f62:	4602      	mov	r2, r0
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff80 	bl	8000e70 <__NVIC_SetPriority>
}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff54 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e16b      	b.n	8001288 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 815a 	bne.w	8001282 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b03      	cmp	r3, #3
 8001052:	d017      	beq.n	8001084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d123      	bne.n	80010d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	69b9      	ldr	r1, [r7, #24]
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80b4 	beq.w	8001282 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <HAL_GPIO_Init+0x30c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a5f      	ldr	r2, [pc, #380]	; (80012a0 <HAL_GPIO_Init+0x30c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <HAL_GPIO_Init+0x30c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001136:	4a5b      	ldr	r2, [pc, #364]	; (80012a4 <HAL_GPIO_Init+0x310>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_GPIO_Init+0x314>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d02b      	beq.n	80011ba <HAL_GPIO_Init+0x226>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a51      	ldr	r2, [pc, #324]	; (80012ac <HAL_GPIO_Init+0x318>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d025      	beq.n	80011b6 <HAL_GPIO_Init+0x222>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a50      	ldr	r2, [pc, #320]	; (80012b0 <HAL_GPIO_Init+0x31c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01f      	beq.n	80011b2 <HAL_GPIO_Init+0x21e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x320>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x21a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x324>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x216>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x328>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x212>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x32c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x20e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_GPIO_Init+0x330>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x20a>
 800119a:	2307      	movs	r3, #7
 800119c:	e00e      	b.n	80011bc <HAL_GPIO_Init+0x228>
 800119e:	2308      	movs	r3, #8
 80011a0:	e00c      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e00a      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011a6:	2305      	movs	r3, #5
 80011a8:	e008      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011ae:	2303      	movs	r3, #3
 80011b0:	e004      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x228>
 80011ba:	2300      	movs	r3, #0
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	f002 0203 	and.w	r2, r2, #3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4093      	lsls	r3, r2
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011cc:	4935      	ldr	r1, [pc, #212]	; (80012a4 <HAL_GPIO_Init+0x310>)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_GPIO_Init+0x334>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <HAL_GPIO_Init+0x334>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_GPIO_Init+0x334>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <HAL_GPIO_Init+0x334>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_GPIO_Init+0x334>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001252:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_GPIO_Init+0x334>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_GPIO_Init+0x334>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_GPIO_Init+0x334>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	f67f ae90 	bls.w	8000fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43d9      	mvns	r1, r3
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	400b      	ands	r3, r1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f806 	bl	8001364 <HAL_GPIO_EXTI_Callback>
  }
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e267      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d075      	beq.n	8001486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139a:	4b88      	ldr	r3, [pc, #544]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d00c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a6:	4b85      	ldr	r3, [pc, #532]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d112      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013be:	d10b      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d05b      	beq.n	8001484 <HAL_RCC_OscConfig+0x108>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d157      	bne.n	8001484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e242      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d106      	bne.n	80013f0 <HAL_RCC_OscConfig+0x74>
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a75      	ldr	r2, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x98>
 80013fa:	4b70      	ldr	r3, [pc, #448]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6f      	ldr	r2, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6c      	ldr	r2, [pc, #432]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 8001414:	4b69      	ldr	r3, [pc, #420]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a68      	ldr	r2, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b66      	ldr	r3, [pc, #408]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a65      	ldr	r2, [pc, #404]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fc9c 	bl	8000d70 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc98 	bl	8000d70 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e207      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xc0>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc88 	bl	8000d70 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc84 	bl	8000d70 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1f3      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0xe8>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d063      	beq.n	800155a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x152>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e1c7      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	e03a      	b.n	800155a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x244>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fc3d 	bl	8000d70 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc39 	bl	8000d70 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1a8      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4925      	ldr	r1, [pc, #148]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x244>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fc1c 	bl	8000d70 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fc18 	bl	8000d70 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e187      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d036      	beq.n	80015d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d016      	beq.n	800159c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_RCC_OscConfig+0x248>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fbfc 	bl	8000d70 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fbf8 	bl	8000d70 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e167      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x200>
 800159a:	e01b      	b.n	80015d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_OscConfig+0x248>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fbe5 	bl	8000d70 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	e00e      	b.n	80015c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fbe1 	bl	8000d70 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d907      	bls.n	80015c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e150      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
 80015bc:	40023800 	.word	0x40023800
 80015c0:	42470000 	.word	0x42470000
 80015c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ea      	bne.n	80015aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8097 	beq.w	8001710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b81      	ldr	r3, [pc, #516]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a7c      	ldr	r2, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b74      	ldr	r3, [pc, #464]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a73      	ldr	r2, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff fba1 	bl	8000d70 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7ff fb9d 	bl	8000d70 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e10c      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x2ea>
 8001658:	4b64      	ldr	r3, [pc, #400]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a63      	ldr	r2, [pc, #396]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
 8001664:	e01c      	b.n	80016a0 <HAL_RCC_OscConfig+0x324>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x30c>
 800166e:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a5e      	ldr	r2, [pc, #376]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a5b      	ldr	r2, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0x324>
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168c:	4a57      	ldr	r2, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6713      	str	r3, [r2, #112]	; 0x70
 8001694:	4b55      	ldr	r3, [pc, #340]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a54      	ldr	r2, [pc, #336]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d015      	beq.n	80016d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fb62 	bl	8000d70 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fb5e 	bl	8000d70 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e0cb      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ee      	beq.n	80016b0 <HAL_RCC_OscConfig+0x334>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb4c 	bl	8000d70 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb48 	bl	8000d70 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0b5      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ee      	bne.n	80016dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	4a38      	ldr	r2, [pc, #224]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80a1 	beq.w	800185c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b08      	cmp	r3, #8
 8001724:	d05c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d141      	bne.n	80017b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <HAL_RCC_OscConfig+0x478>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fb1c 	bl	8000d70 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fb18 	bl	8000d70 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e087      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	019b      	lsls	r3, r3, #6
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	3b01      	subs	r3, #1
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	491b      	ldr	r1, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_RCC_OscConfig+0x478>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff faf1 	bl	8000d70 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff faed 	bl	8000d70 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e05c      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x416>
 80017b0:	e054      	b.n	800185c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_RCC_OscConfig+0x478>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fada 	bl	8000d70 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fad6 	bl	8000d70 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e045      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x444>
 80017de:	e03d      	b.n	800185c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e038      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40007000 	.word	0x40007000
 80017f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x4ec>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d028      	beq.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d121      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d11a      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800182e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001830:	4293      	cmp	r3, r2
 8001832:	d111      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	3b01      	subs	r3, #1
 8001842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0cc      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001880:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d90c      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d044      	beq.n	800198c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d119      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d003      	beq.n	800192a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001926:	2b03      	cmp	r3, #3
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e06f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e067      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f023 0203 	bic.w	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4934      	ldr	r1, [pc, #208]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800195c:	f7ff fa08 	bl	8000d70 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	e00a      	b.n	800197a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff fa04 	bl	8000d70 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e04f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 020c 	and.w	r2, r3, #12
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d1eb      	bne.n	8001964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d20c      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f894 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	08006eec 	.word	0x08006eec
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a3c:	b094      	sub	sp, #80	; 0x50
 8001a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
 8001a44:	2300      	movs	r3, #0
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a48:	2300      	movs	r3, #0
 8001a4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a50:	4b79      	ldr	r3, [pc, #484]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d00d      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x40>
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	f200 80e1 	bhi.w	8001c24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x34>
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6a:	e0db      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a70:	e0db      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a72:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a76:	e0d8      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a78:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a82:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d063      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	2200      	movs	r2, #0
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aaa:	4622      	mov	r2, r4
 8001aac:	462b      	mov	r3, r5
 8001aae:	f04f 0000 	mov.w	r0, #0
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	0159      	lsls	r1, r3, #5
 8001ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001abc:	0150      	lsls	r0, r2, #5
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	1a51      	subs	r1, r2, r1
 8001ac6:	6139      	str	r1, [r7, #16]
 8001ac8:	4629      	mov	r1, r5
 8001aca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001adc:	4659      	mov	r1, fp
 8001ade:	018b      	lsls	r3, r1, #6
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	018a      	lsls	r2, r1, #6
 8001aea:	4651      	mov	r1, sl
 8001aec:	ebb2 0801 	subs.w	r8, r2, r1
 8001af0:	4659      	mov	r1, fp
 8001af2:	eb63 0901 	sbc.w	r9, r3, r1
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b0a:	4690      	mov	r8, r2
 8001b0c:	4699      	mov	r9, r3
 8001b0e:	4623      	mov	r3, r4
 8001b10:	eb18 0303 	adds.w	r3, r8, r3
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	462b      	mov	r3, r5
 8001b18:	eb49 0303 	adc.w	r3, r9, r3
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	024b      	lsls	r3, r1, #9
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b34:	4621      	mov	r1, r4
 8001b36:	024a      	lsls	r2, r1, #9
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b48:	f7fe fb94 	bl	8000274 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b54:	e058      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4611      	mov	r1, r2
 8001b62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b70:	4642      	mov	r2, r8
 8001b72:	464b      	mov	r3, r9
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	0159      	lsls	r1, r3, #5
 8001b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b82:	0150      	lsls	r0, r2, #5
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4641      	mov	r1, r8
 8001b8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b8e:	4649      	mov	r1, r9
 8001b90:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ba8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bac:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	00eb      	lsls	r3, r5, #3
 8001bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bbe:	00e2      	lsls	r2, r4, #3
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	4643      	mov	r3, r8
 8001bc6:	18e3      	adds	r3, r4, r3
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	464b      	mov	r3, r9
 8001bcc:	eb45 0303 	adc.w	r3, r5, r3
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bde:	4629      	mov	r1, r5
 8001be0:	028b      	lsls	r3, r1, #10
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be8:	4621      	mov	r1, r4
 8001bea:	028a      	lsls	r2, r1, #10
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	61fa      	str	r2, [r7, #28]
 8001bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bfc:	f7fe fb3a 	bl	8000274 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c22:	e002      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3750      	adds	r7, #80	; 0x50
 8001c30:	46bd      	mov	sp, r7
 8001c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	007a1200 	.word	0x007a1200

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000000 	.word	0x20000000

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c60:	f7ff fff0 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0a9b      	lsrs	r3, r3, #10
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	08006efc 	.word	0x08006efc

08001c84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	220f      	movs	r2, #15
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_RCC_GetClockConfig+0x60>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0207 	and.w	r2, r3, #7
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	601a      	str	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e041      	b.n	8001d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f839 	bl	8001d86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f000 f9d8 	bl	80020dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d001      	beq.n	8001db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e04e      	b.n	8001e52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dde:	d01d      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d111      	bne.n	8001e40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d010      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3e:	e007      	b.n	8001e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	40010400 	.word	0x40010400
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40001800 	.word	0x40001800

08001e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0202 	mvn.w	r2, #2
 8001ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8ee 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8e0 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8f1 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8c4 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8b6 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8c7 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0208 	mvn.w	r2, #8
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f89a 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f88c 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f89d 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0210 	mvn.w	r2, #16
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f870 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f862 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f873 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0201 	mvn.w	r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fd5e 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b80      	cmp	r3, #128	; 0x80
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f902 	bl	8002230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f838 	bl	80020c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8cc 	bl	800221c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a40      	ldr	r2, [pc, #256]	; (80021f0 <TIM_Base_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fa:	d00f      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3d      	ldr	r2, [pc, #244]	; (80021f4 <TIM_Base_SetConfig+0x118>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00b      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3c      	ldr	r2, [pc, #240]	; (80021f8 <TIM_Base_SetConfig+0x11c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3b      	ldr	r2, [pc, #236]	; (80021fc <TIM_Base_SetConfig+0x120>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3a      	ldr	r2, [pc, #232]	; (8002200 <TIM_Base_SetConfig+0x124>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d108      	bne.n	800212e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <TIM_Base_SetConfig+0x114>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213c:	d027      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2c      	ldr	r2, [pc, #176]	; (80021f4 <TIM_Base_SetConfig+0x118>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d023      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <TIM_Base_SetConfig+0x11c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <TIM_Base_SetConfig+0x120>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a29      	ldr	r2, [pc, #164]	; (8002200 <TIM_Base_SetConfig+0x124>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d017      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <TIM_Base_SetConfig+0x128>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <TIM_Base_SetConfig+0x12c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a26      	ldr	r2, [pc, #152]	; (800220c <TIM_Base_SetConfig+0x130>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a25      	ldr	r2, [pc, #148]	; (8002210 <TIM_Base_SetConfig+0x134>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a24      	ldr	r2, [pc, #144]	; (8002214 <TIM_Base_SetConfig+0x138>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <TIM_Base_SetConfig+0x13c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <TIM_Base_SetConfig+0x114>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0xf8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <TIM_Base_SetConfig+0x124>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	615a      	str	r2, [r3, #20]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40010400 	.word	0x40010400
 8002204:	40014000 	.word	0x40014000
 8002208:	40014400 	.word	0x40014400
 800220c:	40014800 	.word	0x40014800
 8002210:	40001800 	.word	0x40001800
 8002214:	40001c00 	.word	0x40001c00
 8002218:	40002000 	.word	0x40002000

0800221c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 0208 	add.w	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800225c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f103 0208 	add.w	r2, r3, #8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f103 0208 	add.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022fc:	d103      	bne.n	8002306 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e00c      	b.n	8002320 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3308      	adds	r3, #8
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e002      	b.n	8002314 <vListInsert+0x2e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d2f6      	bcs.n	800230e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6892      	ldr	r2, [r2, #8]
 800236e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6852      	ldr	r2, [r2, #4]
 8002378:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d103      	bne.n	800238c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023b6:	2301      	movs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <xQueueGenericReset+0x2e>
        __asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	60fb      	str	r3, [r7, #12]
    }
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d05d      	beq.n	800249c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d059      	beq.n	800249c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	2100      	movs	r1, #0
 80023f2:	fba3 2302 	umull	r2, r3, r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d000      	beq.n	80023fc <xQueueGenericReset+0x50>
 80023fa:	2101      	movs	r1, #1
 80023fc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d14c      	bne.n	800249c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002402:	f002 f8af 	bl	8004564 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	6939      	ldr	r1, [r7, #16]
 8002410:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	441a      	add	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2200      	movs	r2, #0
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	3b01      	subs	r3, #1
 8002434:	6939      	ldr	r1, [r7, #16]
 8002436:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	441a      	add	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d114      	bne.n	8002482 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01a      	beq.n	8002496 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	3310      	adds	r3, #16
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f989 	bl	800377c <xTaskRemoveFromEventList>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <xQueueGenericReset+0x11c>)
 8002472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	e009      	b.n	8002496 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	3310      	adds	r3, #16
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fedc 	bl	8002244 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	3324      	adds	r3, #36	; 0x24
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fed7 	bl	8002244 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002496:	f002 f895 	bl	80045c4 <vPortExitCritical>
 800249a:	e001      	b.n	80024a0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <xQueueGenericReset+0x110>
        __asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	60bb      	str	r3, [r7, #8]
    }
 80024b8:	bf00      	nop
 80024ba:	e7fe      	b.n	80024ba <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024bc:	697b      	ldr	r3, [r7, #20]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000ed04 	.word	0xe000ed04

080024cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02e      	beq.n	8002542 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024e4:	2100      	movs	r1, #0
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	fba3 2302 	umull	r2, r3, r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d000      	beq.n	80024f4 <xQueueGenericCreate+0x28>
 80024f2:	2101      	movs	r1, #1
 80024f4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d123      	bne.n	8002542 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002502:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002506:	d81c      	bhi.n	8002542 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	3350      	adds	r3, #80	; 0x50
 8002516:	4618      	mov	r0, r3
 8002518:	f002 f950 	bl	80047bc <pvPortMalloc>
 800251c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3350      	adds	r3, #80	; 0x50
 800252c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f814 	bl	8002568 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002540:	e00d      	b.n	800255e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <xQueueGenericCreate+0x92>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	613b      	str	r3, [r7, #16]
    }
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800255e:	69fb      	ldr	r3, [r7, #28]
    }
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e002      	b.n	800258a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002596:	2101      	movs	r1, #1
 8002598:	69b8      	ldr	r0, [r7, #24]
 800259a:	f7ff ff07 	bl	80023ac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	2073      	movs	r0, #115	; 0x73
 80025ae:	f003 fd37 	bl	8006020 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b08f      	sub	sp, #60	; 0x3c
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <xQueueReceive+0x30>
        __asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	623b      	str	r3, [r7, #32]
    }
 80025e8:	bf00      	nop
 80025ea:	e7fe      	b.n	80025ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <xQueueReceive+0x3e>
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <xQueueReceive+0x42>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueReceive+0x44>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xQueueReceive+0x5e>
        __asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61fb      	str	r3, [r7, #28]
    }
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800261a:	f001 fad1 	bl	8003bc0 <xTaskGetSchedulerState>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <xQueueReceive+0x6e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <xQueueReceive+0x72>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <xQueueReceive+0x74>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <xQueueReceive+0x8e>
        __asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	61bb      	str	r3, [r7, #24]
    }
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800264a:	f001 ff8b 	bl	8004564 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d02f      	beq.n	80026ba <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800265e:	f000 f8bd 	bl	80027dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	4618      	mov	r0, r3
 8002666:	f004 fa09 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 800266a:	4604      	mov	r4, r0
 800266c:	2000      	movs	r0, #0
 800266e:	f004 fa05 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2101      	movs	r1, #1
 8002678:	9100      	str	r1, [sp, #0]
 800267a:	4621      	mov	r1, r4
 800267c:	205c      	movs	r0, #92	; 0x5c
 800267e:	f003 fd45 	bl	800610c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00f      	beq.n	80026b2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	3310      	adds	r3, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f001 f870 	bl	800377c <xTaskRemoveFromEventList>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026a2:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <xQueueReceive+0x21c>)
 80026a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026b2:	f001 ff87 	bl	80045c4 <vPortExitCritical>
                return pdPASS;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e08a      	b.n	80027d0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d113      	bne.n	80026e8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026c0:	f001 ff80 	bl	80045c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 f9d8 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 80026cc:	4604      	mov	r4, r0
 80026ce:	2000      	movs	r0, #0
 80026d0:	f004 f9d4 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 80026d4:	4602      	mov	r2, r0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2101      	movs	r1, #1
 80026da:	9100      	str	r1, [sp, #0]
 80026dc:	4621      	mov	r1, r4
 80026de:	205c      	movs	r0, #92	; 0x5c
 80026e0:	f003 fd14 	bl	800610c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e073      	b.n	80027d0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 f91a 	bl	800392c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026fc:	f001 ff62 	bl	80045c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002700:	f000 fc48 	bl	8002f94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002704:	f001 ff2e 	bl	8004564 <vPortEnterCritical>
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800270e:	b25b      	sxtb	r3, r3
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002714:	d103      	bne.n	800271e <xQueueReceive+0x162>
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800272a:	d103      	bne.n	8002734 <xQueueReceive+0x178>
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002734:	f001 ff46 	bl	80045c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002738:	1d3a      	adds	r2, r7, #4
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f001 f909 	bl	8003958 <xTaskCheckForTimeOut>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d124      	bne.n	8002796 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800274c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800274e:	f000 f8bd 	bl	80028cc <prvIsQueueEmpty>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d018      	beq.n	800278a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	3324      	adds	r3, #36	; 0x24
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 ff9f 	bl	80036a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002768:	f000 f85e 	bl	8002828 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800276c:	f000 fc20 	bl	8002fb0 <xTaskResumeAll>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f47f af69 	bne.w	800264a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <xQueueReceive+0x21c>)
 800277a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	e75f      	b.n	800264a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800278a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278c:	f000 f84c 	bl	8002828 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002790:	f000 fc0e 	bl	8002fb0 <xTaskResumeAll>
 8002794:	e759      	b.n	800264a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002798:	f000 f846 	bl	8002828 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800279c:	f000 fc08 	bl	8002fb0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a2:	f000 f893 	bl	80028cc <prvIsQueueEmpty>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f43f af4e 	beq.w	800264a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 f963 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 80027b6:	4604      	mov	r4, r0
 80027b8:	2000      	movs	r0, #0
 80027ba:	f004 f95f 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 80027be:	4602      	mov	r2, r0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2101      	movs	r1, #1
 80027c4:	9100      	str	r1, [sp, #0]
 80027c6:	4621      	mov	r1, r4
 80027c8:	205c      	movs	r0, #92	; 0x5c
 80027ca:	f003 fc9f 	bl	800610c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80027ce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3734      	adds	r7, #52	; 0x34
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}
 80027d8:	e000ed04 	.word	0xe000ed04

080027dc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	441a      	add	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d303      	bcc.n	8002810 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68d9      	ldr	r1, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	461a      	mov	r2, r3
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f004 fad8 	bl	8006dd0 <memcpy>
    }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002830:	f001 fe98 	bl	8004564 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800283a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800283c:	e011      	b.n	8002862 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3324      	adds	r3, #36	; 0x24
 800284a:	4618      	mov	r0, r3
 800284c:	f000 ff96 	bl	800377c <xTaskRemoveFromEventList>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002856:	f001 f8e5 	bl	8003a24 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	dce9      	bgt.n	800283e <prvUnlockQueue+0x16>
 800286a:	e000      	b.n	800286e <prvUnlockQueue+0x46>
                    break;
 800286c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002876:	f001 fea5 	bl	80045c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800287a:	f001 fe73 	bl	8004564 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002884:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002886:	e011      	b.n	80028ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3310      	adds	r3, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f000 ff71 	bl	800377c <xTaskRemoveFromEventList>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028a0:	f001 f8c0 	bl	8003a24 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	dce9      	bgt.n	8002888 <prvUnlockQueue+0x60>
 80028b4:	e000      	b.n	80028b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80028c0:	f001 fe80 	bl	80045c4 <vPortExitCritical>
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028d4:	f001 fe46 	bl	8004564 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e001      	b.n	80028ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028ea:	f001 fe6b 	bl	80045c4 <vPortExitCritical>

    return xReturn;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	60fb      	str	r3, [r7, #12]
    }
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d024      	beq.n	8002972 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e01e      	b.n	800296c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <vQueueAddToRegistry+0xa8>)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d105      	bne.n	800294a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <vQueueAddToRegistry+0xa8>)
 8002944:	4413      	add	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
                    break;
 8002948:	e013      	b.n	8002972 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <vQueueAddToRegistry+0x6e>
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <vQueueAddToRegistry+0xa8>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <vQueueAddToRegistry+0xa8>)
 8002962:	4413      	add	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b07      	cmp	r3, #7
 8002970:	d9dd      	bls.n	800292e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00f      	beq.n	8002998 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f004 f878 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 800298c:	4601      	mov	r1, r0
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	2071      	movs	r0, #113	; 0x71
 8002994:	f003 faea 	bl	8005f6c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000088 	.word	0x20000088

080029a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029b4:	f001 fdd6 	bl	8004564 <vPortEnterCritical>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c4:	d103      	bne.n	80029ce <vQueueWaitForMessageRestricted+0x2a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029da:	d103      	bne.n	80029e4 <vQueueWaitForMessageRestricted+0x40>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e4:	f001 fdee 	bl	80045c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3324      	adds	r3, #36	; 0x24
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fe77 	bl	80036ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff12 	bl	8002828 <prvUnlockQueue>
    }
 8002a04:	bf00      	nop
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af04      	add	r7, sp, #16
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 fecb 	bl	80047bc <pvPortMalloc>
 8002a26:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d013      	beq.n	8002a56 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a2e:	2058      	movs	r0, #88	; 0x58
 8002a30:	f001 fec4 	bl	80047bc <pvPortMalloc>
 8002a34:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a3c:	2258      	movs	r2, #88	; 0x58
 8002a3e:	2100      	movs	r1, #0
 8002a40:	69f8      	ldr	r0, [r7, #28]
 8002a42:	f004 f9d3 	bl	8006dec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e005      	b.n	8002a5a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f001 ff6e 	bl	8004930 <vPortFree>
 8002a54:	e001      	b.n	8002a5a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9303      	str	r3, [sp, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	9302      	str	r3, [sp, #8]
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f80e 	bl	8002a98 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a7c:	69f8      	ldr	r0, [r7, #28]
 8002a7e:	f000 f899 	bl	8002bb4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	e002      	b.n	8002a8e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a8c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
    }
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	21a5      	movs	r1, #165	; 0xa5
 8002ab2:	f004 f99b 	bl	8006dec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f023 0307 	bic.w	r3, r3, #7
 8002ace:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	617b      	str	r3, [r7, #20]
    }
 8002aec:	bf00      	nop
 8002aee:	e7fe      	b.n	8002aee <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01e      	beq.n	8002b34 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e012      	b.n	8002b22 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	7819      	ldrb	r1, [r3, #0]
 8002b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3334      	adds	r3, #52	; 0x34
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d9e9      	bls.n	8002afc <prvInitialiseNewTask+0x64>
 8002b28:	e000      	b.n	8002b2c <prvInitialiseNewTask+0x94>
            {
                break;
 8002b2a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d90a      	bls.n	8002b50 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	613b      	str	r3, [r7, #16]
    }
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d901      	bls.n	8002b5a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b56:	2304      	movs	r3, #4
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b64:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fb8a 	bl	8002284 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	3318      	adds	r3, #24
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fb85 	bl	8002284 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	f1c3 0205 	rsb	r2, r3, #5
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	68f9      	ldr	r1, [r7, #12]
 8002b94:	69b8      	ldr	r0, [r7, #24]
 8002b96:	f001 fb35 	bl	8004204 <pxPortInitialiseStack>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002baa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bbc:	f001 fcd2 	bl	8004564 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002bc0:	4b4f      	ldr	r3, [pc, #316]	; (8002d00 <prvAddNewTaskToReadyList+0x14c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	4a4e      	ldr	r2, [pc, #312]	; (8002d00 <prvAddNewTaskToReadyList+0x14c>)
 8002bc8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <prvAddNewTaskToReadyList+0x150>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002bd2:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <prvAddNewTaskToReadyList+0x150>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bd8:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <prvAddNewTaskToReadyList+0x14c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d110      	bne.n	8002c02 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002be0:	f000 ff44 	bl	8003a6c <prvInitialiseTaskLists>
 8002be4:	e00d      	b.n	8002c02 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <prvAddNewTaskToReadyList+0x154>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <prvAddNewTaskToReadyList+0x150>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d802      	bhi.n	8002c02 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bfc:	4a41      	ldr	r2, [pc, #260]	; (8002d04 <prvAddNewTaskToReadyList+0x150>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c02:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <prvAddNewTaskToReadyList+0x158>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a40      	ldr	r2, [pc, #256]	; (8002d0c <prvAddNewTaskToReadyList+0x158>)
 8002c0a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <prvAddNewTaskToReadyList+0x158>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <prvAddNewTaskToReadyList+0x94>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fe67 	bl	80068f0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	461d      	mov	r5, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461c      	mov	r4, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	1ae3      	subs	r3, r4, r3
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	462b      	mov	r3, r5
 8002c44:	f002 f836 	bl	8004cb4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fed4 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <prvAddNewTaskToReadyList+0x15c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <prvAddNewTaskToReadyList+0x15c>)
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	492b      	ldr	r1, [pc, #172]	; (8002d14 <prvAddNewTaskToReadyList+0x160>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3304      	adds	r3, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	3204      	adds	r2, #4
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1d1a      	adds	r2, r3, #4
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <prvAddNewTaskToReadyList+0x160>)
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	615a      	str	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4918      	ldr	r1, [pc, #96]	; (8002d14 <prvAddNewTaskToReadyList+0x160>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	4814      	ldr	r0, [pc, #80]	; (8002d14 <prvAddNewTaskToReadyList+0x160>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4403      	add	r3, r0
 8002ccc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cce:	f001 fc79 	bl	80045c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <prvAddNewTaskToReadyList+0x154>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <prvAddNewTaskToReadyList+0x150>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d207      	bcs.n	8002cf8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <prvAddNewTaskToReadyList+0x164>)
 8002cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8002d00:	200001a0 	.word	0x200001a0
 8002d04:	200000c8 	.word	0x200000c8
 8002d08:	200001ac 	.word	0x200001ac
 8002d0c:	200001bc 	.word	0x200001bc
 8002d10:	200001a8 	.word	0x200001a8
 8002d14:	200000cc 	.word	0x200000cc
 8002d18:	e000ed04 	.word	0xe000ed04

08002d1c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002d24:	f001 fc1e 	bl	8004564 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <uxTaskPriorityGet+0x18>
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <uxTaskPriorityGet+0x30>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e000      	b.n	8002d36 <uxTaskPriorityGet+0x1a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002d3e:	f001 fc41 	bl	80045c4 <vPortExitCritical>

        return uxReturn;
 8002d42:	68bb      	ldr	r3, [r7, #8]
    }
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200000c8 	.word	0x200000c8

08002d50 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d90a      	bls.n	8002d7a <vTaskPrioritySet+0x2a>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	60fb      	str	r3, [r7, #12]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d901      	bls.n	8002d84 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d80:	2304      	movs	r3, #4
 8002d82:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002d84:	f001 fbee 	bl	8004564 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <vTaskPrioritySet+0x44>
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <vTaskPrioritySet+0x170>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e000      	b.n	8002d96 <vTaskPrioritySet+0x46>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fe6e 	bl	8006a7c <SEGGER_SYSVIEW_ShrinkId>
 8002da0:	4603      	mov	r3, r0
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	2028      	movs	r0, #40	; 0x28
 8002da8:	f003 f8e0 	bl	8005f6c <SEGGER_SYSVIEW_RecordU32x2>
 8002dac:	69b8      	ldr	r0, [r7, #24]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	461a      	mov	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	f001 ffdf 	bl	8004d84 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dca:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d06f      	beq.n	8002eb4 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d90d      	bls.n	8002df8 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <vTaskPrioritySet+0x170>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d00f      	beq.n	8002e06 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <vTaskPrioritySet+0x170>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d309      	bcc.n	8002e06 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e006      	b.n	8002e06 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <vTaskPrioritySet+0x170>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d101      	bne.n	8002e06 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d102      	bne.n	8002e1e <vTaskPrioritySet+0xce>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	649a      	str	r2, [r3, #72]	; 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db04      	blt.n	8002e36 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f1c3 0205 	rsb	r2, r3, #5
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6959      	ldr	r1, [r3, #20]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <vTaskPrioritySet+0x174>)
 8002e46:	4413      	add	r3, r2
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	d128      	bne.n	8002e9e <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fa81 	bl	8002358 <uxListRemove>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43da      	mvns	r2, r3
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <vTaskPrioritySet+0x178>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <vTaskPrioritySet+0x178>)
 8002e6e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <vTaskPrioritySet+0x178>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <vTaskPrioritySet+0x178>)
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <vTaskPrioritySet+0x174>)
 8002e90:	441a      	add	r2, r3
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	3304      	adds	r3, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f7ff fa00 	bl	800229e <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <vTaskPrioritySet+0x17c>)
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002eb4:	f001 fb86 	bl	80045c4 <vPortExitCritical>
    }
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200000c8 	.word	0x200000c8
 8002ec4:	200000cc 	.word	0x200000cc
 8002ec8:	200001a8 	.word	0x200001a8
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <vTaskStartScheduler+0xa4>)
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	2300      	movs	r3, #0
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2282      	movs	r2, #130	; 0x82
 8002ee2:	4925      	ldr	r1, [pc, #148]	; (8002f78 <vTaskStartScheduler+0xa8>)
 8002ee4:	4825      	ldr	r0, [pc, #148]	; (8002f7c <vTaskStartScheduler+0xac>)
 8002ee6:	f7ff fd91 	bl	8002a0c <xTaskCreate>
 8002eea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002ef2:	f000 ff03 	bl	8003cfc <xTimerCreateTimerTask>
 8002ef6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d124      	bne.n	8002f48 <vTaskStartScheduler+0x78>
        __asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	60bb      	str	r3, [r7, #8]
    }
 8002f10:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <vTaskStartScheduler+0xb0>)
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <vTaskStartScheduler+0xb4>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <vTaskStartScheduler+0xb8>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <vTaskStartScheduler+0xbc>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <vTaskStartScheduler+0xa4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d102      	bne.n	8002f38 <vTaskStartScheduler+0x68>
 8002f32:	f003 fcc1 	bl	80068b8 <SEGGER_SYSVIEW_OnIdle>
 8002f36:	e004      	b.n	8002f42 <vTaskStartScheduler+0x72>
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <vTaskStartScheduler+0xbc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fd19 	bl	8006974 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002f42:	f001 f9ef 	bl	8004324 <xPortStartScheduler>
 8002f46:	e00e      	b.n	8002f66 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4e:	d10a      	bne.n	8002f66 <vTaskStartScheduler+0x96>
        __asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	607b      	str	r3, [r7, #4]
    }
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <vTaskStartScheduler+0xc0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200001c4 	.word	0x200001c4
 8002f78:	08006e24 	.word	0x08006e24
 8002f7c:	08003a3d 	.word	0x08003a3d
 8002f80:	200001c0 	.word	0x200001c0
 8002f84:	200001ac 	.word	0x200001ac
 8002f88:	200001a4 	.word	0x200001a4
 8002f8c:	200000c8 	.word	0x200000c8
 8002f90:	2000000c 	.word	0x2000000c

08002f94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <vTaskSuspendAll+0x18>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a03      	ldr	r2, [pc, #12]	; (8002fac <vTaskSuspendAll+0x18>)
 8002fa0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	200001c8 	.word	0x200001c8

08002fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fbe:	4b73      	ldr	r3, [pc, #460]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <xTaskResumeAll+0x2c>
        __asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	607b      	str	r3, [r7, #4]
    }
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fdc:	f001 fac2 	bl	8004564 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fe8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fea:	4b68      	ldr	r3, [pc, #416]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 80c4 	bne.w	800317c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ff4:	4b66      	ldr	r3, [pc, #408]	; (8003190 <xTaskResumeAll+0x1e0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80bf 	beq.w	800317c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ffe:	e08e      	b.n	800311e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003000:	4b64      	ldr	r3, [pc, #400]	; (8003194 <xTaskResumeAll+0x1e4>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	6a12      	ldr	r2, [r2, #32]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	69d2      	ldr	r2, [r2, #28]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3318      	adds	r3, #24
 800302a:	429a      	cmp	r2, r3
 800302c:	d103      	bne.n	8003036 <xTaskResumeAll+0x86>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2200      	movs	r2, #0
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	68d2      	ldr	r2, [r2, #12]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	6892      	ldr	r2, [r2, #8]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	3304      	adds	r3, #4
 8003068:	429a      	cmp	r2, r3
 800306a:	d103      	bne.n	8003074 <xTaskResumeAll+0xc4>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4618      	mov	r0, r3
 8003088:	f003 fcb6 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2201      	movs	r2, #1
 8003092:	409a      	lsls	r2, r3
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <xTaskResumeAll+0x1e8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	4a3f      	ldr	r2, [pc, #252]	; (8003198 <xTaskResumeAll+0x1e8>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	493e      	ldr	r1, [pc, #248]	; (800319c <xTaskResumeAll+0x1ec>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3304      	adds	r3, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	3204      	adds	r2, #4
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4a2e      	ldr	r2, [pc, #184]	; (800319c <xTaskResumeAll+0x1ec>)
 80030e2:	441a      	add	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	492b      	ldr	r1, [pc, #172]	; (800319c <xTaskResumeAll+0x1ec>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	1c59      	adds	r1, r3, #1
 80030fc:	4827      	ldr	r0, [pc, #156]	; (800319c <xTaskResumeAll+0x1ec>)
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4403      	add	r3, r0
 8003108:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <xTaskResumeAll+0x1f0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003118:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <xTaskResumeAll+0x1f4>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <xTaskResumeAll+0x1e4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f47f af6c 	bne.w	8003000 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800312e:	f000 fd1b 	bl	8003b68 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <xTaskResumeAll+0x1f8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800313e:	f000 f92d 	bl	800339c <xTaskIncrementTick>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <xTaskResumeAll+0x1f4>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3b01      	subs	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f1      	bne.n	800313e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <xTaskResumeAll+0x1f8>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <xTaskResumeAll+0x1f4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <xTaskResumeAll+0x1fc>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800317c:	f001 fa22 	bl	80045c4 <vPortExitCritical>

    return xAlreadyYielded;
 8003180:	69bb      	ldr	r3, [r7, #24]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200001c8 	.word	0x200001c8
 8003190:	200001a0 	.word	0x200001a0
 8003194:	20000160 	.word	0x20000160
 8003198:	200001a8 	.word	0x200001a8
 800319c:	200000cc 	.word	0x200000cc
 80031a0:	200000c8 	.word	0x200000c8
 80031a4:	200001b4 	.word	0x200001b4
 80031a8:	200001b0 	.word	0x200001b0
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <xTaskGetTickCount+0x1c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031bc:	687b      	ldr	r3, [r7, #4]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	200001a4 	.word	0x200001a4

080031d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031d6:	f001 fab1 	bl	800473c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <xTaskGetTickCountFromISR+0x20>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031e4:	683b      	ldr	r3, [r7, #0]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200001a4 	.word	0x200001a4

080031f4 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80031f4:	b480      	push	{r7}
 80031f6:	b08b      	sub	sp, #44	; 0x2c
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d05b      	beq.n	80032c2 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	3308      	adds	r3, #8
 8003220:	429a      	cmp	r2, r3
 8003222:	d104      	bne.n	800322e <prvSearchForNameWithinSingleList+0x3a>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	3308      	adds	r3, #8
 800324c:	429a      	cmp	r2, r3
 800324e:	d104      	bne.n	800325a <prvSearchForNameWithinSingleList+0x66>
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
 800326a:	e01c      	b.n	80032a6 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	4413      	add	r3, r2
 8003272:	3334      	adds	r3, #52	; 0x34
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	7afa      	ldrb	r2, [r7, #11]
 8003282:	429a      	cmp	r2, r3
 8003284:	d002      	beq.n	800328c <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e006      	b.n	800329a <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8003296:	2301      	movs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	3301      	adds	r3, #1
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	d9df      	bls.n	800326c <prvSearchForNameWithinSingleList+0x78>
 80032ac:	e000      	b.n	80032b0 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 80032ae:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d1bb      	bne.n	8003236 <prvSearchForNameWithinSingleList+0x42>
 80032be:	e000      	b.n	80032c2 <prvSearchForNameWithinSingleList+0xce>
                    break;
 80032c0:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80032c4:	4618      	mov	r0, r3
 80032c6:	372c      	adds	r7, #44	; 0x2c
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 80032d8:	2305      	movs	r3, #5
 80032da:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fc ffc1 	bl	8000264 <strlen>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b09      	cmp	r3, #9
 80032e6:	d90a      	bls.n	80032fe <xTaskGetHandle+0x2e>
        __asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	60fb      	str	r3, [r7, #12]
    }
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 80032fe:	f7ff fe49 	bl	8002f94 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	3b01      	subs	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <xTaskGetHandle+0xb8>)
 8003314:	4413      	add	r3, r2
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff6b 	bl	80031f4 <prvSearchForNameWithinSingleList>
 800331e:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <xTaskGetHandle+0x32>
 800332c:	e000      	b.n	8003330 <xTaskGetHandle+0x60>
                    break;
 800332e:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <xTaskGetHandle+0xbc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff59 	bl	80031f4 <prvSearchForNameWithinSingleList>
 8003342:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <xTaskGetHandle+0xc0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff4f 	bl	80031f4 <prvSearchForNameWithinSingleList>
 8003356:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <xTaskGetHandle+0x98>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	480c      	ldr	r0, [pc, #48]	; (8003394 <xTaskGetHandle+0xc4>)
 8003362:	f7ff ff47 	bl	80031f4 <prvSearchForNameWithinSingleList>
 8003366:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <xTaskGetHandle+0xa8>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4809      	ldr	r0, [pc, #36]	; (8003398 <xTaskGetHandle+0xc8>)
 8003372:	f7ff ff3f 	bl	80031f4 <prvSearchForNameWithinSingleList>
 8003376:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003378:	f7ff fe1a 	bl	8002fb0 <xTaskResumeAll>

        return pxTCB;
 800337c:	693b      	ldr	r3, [r7, #16]
    }
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200000cc 	.word	0x200000cc
 800338c:	20000158 	.word	0x20000158
 8003390:	2000015c 	.word	0x2000015c
 8003394:	2000018c 	.word	0x2000018c
 8003398:	20000174 	.word	0x20000174

0800339c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a6:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <xTaskIncrementTick+0x208>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80f0 	bne.w	8003590 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033b0:	4b7d      	ldr	r3, [pc, #500]	; (80035a8 <xTaskIncrementTick+0x20c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033b8:	4a7b      	ldr	r2, [pc, #492]	; (80035a8 <xTaskIncrementTick+0x20c>)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d120      	bne.n	8003406 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80033c4:	4b79      	ldr	r3, [pc, #484]	; (80035ac <xTaskIncrementTick+0x210>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <xTaskIncrementTick+0x48>
        __asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
    }
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xTaskIncrementTick+0x46>
 80033e4:	4b71      	ldr	r3, [pc, #452]	; (80035ac <xTaskIncrementTick+0x210>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	4b71      	ldr	r3, [pc, #452]	; (80035b0 <xTaskIncrementTick+0x214>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6f      	ldr	r2, [pc, #444]	; (80035ac <xTaskIncrementTick+0x210>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4a6f      	ldr	r2, [pc, #444]	; (80035b0 <xTaskIncrementTick+0x214>)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b6e      	ldr	r3, [pc, #440]	; (80035b4 <xTaskIncrementTick+0x218>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a6d      	ldr	r2, [pc, #436]	; (80035b4 <xTaskIncrementTick+0x218>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	f000 fbb1 	bl	8003b68 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003406:	4b6c      	ldr	r3, [pc, #432]	; (80035b8 <xTaskIncrementTick+0x21c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	429a      	cmp	r2, r3
 800340e:	f0c0 80aa 	bcc.w	8003566 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003412:	4b66      	ldr	r3, [pc, #408]	; (80035ac <xTaskIncrementTick+0x210>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800341c:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <xTaskIncrementTick+0x21c>)
 800341e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003422:	601a      	str	r2, [r3, #0]
                    break;
 8003424:	e09f      	b.n	8003566 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003426:	4b61      	ldr	r3, [pc, #388]	; (80035ac <xTaskIncrementTick+0x210>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	429a      	cmp	r2, r3
 800343c:	d203      	bcs.n	8003446 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800343e:	4a5e      	ldr	r2, [pc, #376]	; (80035b8 <xTaskIncrementTick+0x21c>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003444:	e08f      	b.n	8003566 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	68d2      	ldr	r2, [r2, #12]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	6892      	ldr	r2, [r2, #8]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	3304      	adds	r3, #4
 8003468:	429a      	cmp	r2, r3
 800346a:	d103      	bne.n	8003474 <xTaskIncrementTick+0xd8>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1e5a      	subs	r2, r3, #1
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01e      	beq.n	80034ca <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	6a12      	ldr	r2, [r2, #32]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	69d2      	ldr	r2, [r2, #28]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	3318      	adds	r3, #24
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d103      	bne.n	80034ba <xTaskIncrementTick+0x11e>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2200      	movs	r2, #0
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fa93 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	2201      	movs	r2, #1
 80034d8:	409a      	lsls	r2, r3
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <xTaskIncrementTick+0x220>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	4a36      	ldr	r2, [pc, #216]	; (80035bc <xTaskIncrementTick+0x220>)
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e8:	4935      	ldr	r1, [pc, #212]	; (80035c0 <xTaskIncrementTick+0x224>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3304      	adds	r3, #4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	3204      	adds	r2, #4
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <xTaskIncrementTick+0x224>)
 8003528:	441a      	add	r2, r3
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	615a      	str	r2, [r3, #20]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003532:	4923      	ldr	r1, [pc, #140]	; (80035c0 <xTaskIncrementTick+0x224>)
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c59      	adds	r1, r3, #1
 8003542:	481f      	ldr	r0, [pc, #124]	; (80035c0 <xTaskIncrementTick+0x224>)
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <xTaskIncrementTick+0x228>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	429a      	cmp	r2, r3
 800355c:	f67f af59 	bls.w	8003412 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003564:	e755      	b.n	8003412 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <xTaskIncrementTick+0x228>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	4914      	ldr	r1, [pc, #80]	; (80035c0 <xTaskIncrementTick+0x224>)
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d901      	bls.n	8003582 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800357e:	2301      	movs	r3, #1
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <xTaskIncrementTick+0x22c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e004      	b.n	800359a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <xTaskIncrementTick+0x230>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	4a0d      	ldr	r2, [pc, #52]	; (80035cc <xTaskIncrementTick+0x230>)
 8003598:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	; 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	200001c8 	.word	0x200001c8
 80035a8:	200001a4 	.word	0x200001a4
 80035ac:	20000158 	.word	0x20000158
 80035b0:	2000015c 	.word	0x2000015c
 80035b4:	200001b8 	.word	0x200001b8
 80035b8:	200001c0 	.word	0x200001c0
 80035bc:	200001a8 	.word	0x200001a8
 80035c0:	200000cc 	.word	0x200000cc
 80035c4:	200000c8 	.word	0x200000c8
 80035c8:	200001b4 	.word	0x200001b4
 80035cc:	200001b0 	.word	0x200001b0

080035d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <vTaskSwitchContext+0xbc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <vTaskSwitchContext+0xc0>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80035e4:	e04d      	b.n	8003682 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <vTaskSwitchContext+0xc0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ec:	4b29      	ldr	r3, [pc, #164]	; (8003694 <vTaskSwitchContext+0xc4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	f1c3 031f 	rsb	r3, r3, #31
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	4925      	ldr	r1, [pc, #148]	; (8003698 <vTaskSwitchContext+0xc8>)
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	607b      	str	r3, [r7, #4]
    }
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <vTaskSwitchContext+0x5a>
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <vTaskSwitchContext+0xc8>)
 8003638:	4413      	add	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	3308      	adds	r3, #8
 800364e:	429a      	cmp	r2, r3
 8003650:	d104      	bne.n	800365c <vTaskSwitchContext+0x8c>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4a0e      	ldr	r2, [pc, #56]	; (800369c <vTaskSwitchContext+0xcc>)
 8003664:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <vTaskSwitchContext+0xcc>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <vTaskSwitchContext+0xd0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d102      	bne.n	8003678 <vTaskSwitchContext+0xa8>
 8003672:	f003 f921 	bl	80068b8 <SEGGER_SYSVIEW_OnIdle>
}
 8003676:	e004      	b.n	8003682 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <vTaskSwitchContext+0xcc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 f979 	bl	8006974 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	200001c8 	.word	0x200001c8
 8003690:	200001b4 	.word	0x200001b4
 8003694:	200001a8 	.word	0x200001a8
 8003698:	200000cc 	.word	0x200000cc
 800369c:	200000c8 	.word	0x200000c8
 80036a0:	200001c4 	.word	0x200001c4

080036a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	60fb      	str	r3, [r7, #12]
    }
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <vTaskPlaceOnEventList+0x44>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3318      	adds	r3, #24
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fe fe07 	bl	80022e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036d8:	2101      	movs	r1, #1
 80036da:	6838      	ldr	r0, [r7, #0]
 80036dc:	f000 fa8e 	bl	8003bfc <prvAddCurrentTaskToDelayedList>
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	200000c8 	.word	0x200000c8

080036ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	613b      	str	r3, [r7, #16]
    }
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <vTaskPlaceOnEventListRestricted+0x8c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	61da      	str	r2, [r3, #28]
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	621a      	str	r2, [r3, #32]
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <vTaskPlaceOnEventListRestricted+0x8c>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	3218      	adds	r2, #24
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <vTaskPlaceOnEventListRestricted+0x8c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f103 0218 	add.w	r2, r3, #24
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003760:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003762:	2024      	movs	r0, #36	; 0x24
 8003764:	f002 fba8 	bl	8005eb8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	68b8      	ldr	r0, [r7, #8]
 800376c:	f000 fa46 	bl	8003bfc <prvAddCurrentTaskToDelayedList>
    }
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200000c8 	.word	0x200000c8

0800377c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60fb      	str	r3, [r7, #12]
    }
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	6a12      	ldr	r2, [r2, #32]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	69d2      	ldr	r2, [r2, #28]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	3318      	adds	r3, #24
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d103      	bne.n	80037d6 <xTaskRemoveFromEventList+0x5a>
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	6a1a      	ldr	r2, [r3, #32]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2200      	movs	r2, #0
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	1e5a      	subs	r2, r3, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e6:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <xTaskRemoveFromEventList+0x198>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d162      	bne.n	80038b4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	6a3a      	ldr	r2, [r7, #32]
 80037fa:	68d2      	ldr	r2, [r2, #12]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	6892      	ldr	r2, [r2, #8]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	3304      	adds	r3, #4
 8003810:	429a      	cmp	r2, r3
 8003812:	d103      	bne.n	800381c <xTaskRemoveFromEventList+0xa0>
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2200      	movs	r2, #0
 8003820:	615a      	str	r2, [r3, #20]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1e5a      	subs	r2, r3, #1
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	4618      	mov	r0, r3
 8003830:	f003 f8e2 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <xTaskRemoveFromEventList+0x19c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	4a35      	ldr	r2, [pc, #212]	; (8003918 <xTaskRemoveFromEventList+0x19c>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	4934      	ldr	r1, [pc, #208]	; (800391c <xTaskRemoveFromEventList+0x1a0>)
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3304      	adds	r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	6a3a      	ldr	r2, [r7, #32]
 8003870:	3204      	adds	r2, #4
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4a24      	ldr	r2, [pc, #144]	; (800391c <xTaskRemoveFromEventList+0x1a0>)
 800388a:	441a      	add	r2, r3
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	615a      	str	r2, [r3, #20]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	4921      	ldr	r1, [pc, #132]	; (800391c <xTaskRemoveFromEventList+0x1a0>)
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	481d      	ldr	r0, [pc, #116]	; (800391c <xTaskRemoveFromEventList+0x1a0>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4403      	add	r3, r0
 80038b0:	6019      	str	r1, [r3, #0]
 80038b2:	e01b      	b.n	80038ec <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <xTaskRemoveFromEventList+0x1a4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	61da      	str	r2, [r3, #28]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	621a      	str	r2, [r3, #32]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	3218      	adds	r2, #24
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f103 0218 	add.w	r2, r3, #24
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <xTaskRemoveFromEventList+0x1a4>)
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <xTaskRemoveFromEventList+0x1a4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <xTaskRemoveFromEventList+0x1a4>)
 80038ea:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <xTaskRemoveFromEventList+0x1a8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d905      	bls.n	8003906 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038fa:	2301      	movs	r3, #1
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <xTaskRemoveFromEventList+0x1ac>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e001      	b.n	800390a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800390c:	4618      	mov	r0, r3
 800390e:	3728      	adds	r7, #40	; 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200001c8 	.word	0x200001c8
 8003918:	200001a8 	.word	0x200001a8
 800391c:	200000cc 	.word	0x200000cc
 8003920:	20000160 	.word	0x20000160
 8003924:	200000c8 	.word	0x200000c8
 8003928:	200001b4 	.word	0x200001b4

0800392c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <vTaskInternalSetTimeOutState+0x24>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <vTaskInternalSetTimeOutState+0x28>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	605a      	str	r2, [r3, #4]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	200001b8 	.word	0x200001b8
 8003954:	200001a4 	.word	0x200001a4

08003958 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	613b      	str	r3, [r7, #16]
    }
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	60fb      	str	r3, [r7, #12]
    }
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800399a:	f000 fde3 	bl	8004564 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <xTaskCheckForTimeOut+0xc4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b6:	d102      	bne.n	80039be <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	e026      	b.n	8003a0c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <xTaskCheckForTimeOut+0xc8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d00a      	beq.n	80039e0 <xTaskCheckForTimeOut+0x88>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d305      	bcc.n	80039e0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e015      	b.n	8003a0c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d20b      	bcs.n	8003a02 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ff98 	bl	800392c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	e004      	b.n	8003a0c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a0c:	f000 fdda 	bl	80045c4 <vPortExitCritical>

    return xReturn;
 8003a10:	69fb      	ldr	r3, [r7, #28]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200001a4 	.word	0x200001a4
 8003a20:	200001b8 	.word	0x200001b8

08003a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <vTaskMissedYield+0x14>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
}
 8003a2e:	bf00      	nop
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	200001b4 	.word	0x200001b4

08003a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a44:	f000 f852 	bl	8003aec <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <prvIdleTask+0x28>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d9f9      	bls.n	8003a44 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <prvIdleTask+0x2c>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a60:	e7f0      	b.n	8003a44 <prvIdleTask+0x8>
 8003a62:	bf00      	nop
 8003a64:	200000cc 	.word	0x200000cc
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	e00c      	b.n	8003a92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <prvInitialiseTaskLists+0x60>)
 8003a84:	4413      	add	r3, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fbdc 	bl	8002244 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d9ef      	bls.n	8003a78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a98:	480d      	ldr	r0, [pc, #52]	; (8003ad0 <prvInitialiseTaskLists+0x64>)
 8003a9a:	f7fe fbd3 	bl	8002244 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a9e:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <prvInitialiseTaskLists+0x68>)
 8003aa0:	f7fe fbd0 	bl	8002244 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003aa4:	480c      	ldr	r0, [pc, #48]	; (8003ad8 <prvInitialiseTaskLists+0x6c>)
 8003aa6:	f7fe fbcd 	bl	8002244 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003aaa:	480c      	ldr	r0, [pc, #48]	; (8003adc <prvInitialiseTaskLists+0x70>)
 8003aac:	f7fe fbca 	bl	8002244 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003ab0:	480b      	ldr	r0, [pc, #44]	; (8003ae0 <prvInitialiseTaskLists+0x74>)
 8003ab2:	f7fe fbc7 	bl	8002244 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <prvInitialiseTaskLists+0x78>)
 8003ab8:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <prvInitialiseTaskLists+0x64>)
 8003aba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <prvInitialiseTaskLists+0x7c>)
 8003abe:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <prvInitialiseTaskLists+0x68>)
 8003ac0:	601a      	str	r2, [r3, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200000cc 	.word	0x200000cc
 8003ad0:	20000130 	.word	0x20000130
 8003ad4:	20000144 	.word	0x20000144
 8003ad8:	20000160 	.word	0x20000160
 8003adc:	20000174 	.word	0x20000174
 8003ae0:	2000018c 	.word	0x2000018c
 8003ae4:	20000158 	.word	0x20000158
 8003ae8:	2000015c 	.word	0x2000015c

08003aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003af2:	e019      	b.n	8003b28 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003af4:	f000 fd36 	bl	8004564 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <prvCheckTasksWaitingTermination+0x50>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fc27 	bl	8002358 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <prvCheckTasksWaitingTermination+0x54>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <prvCheckTasksWaitingTermination+0x54>)
 8003b12:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <prvCheckTasksWaitingTermination+0x58>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <prvCheckTasksWaitingTermination+0x58>)
 8003b1c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003b1e:	f000 fd51 	bl	80045c4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f810 	bl	8003b48 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <prvCheckTasksWaitingTermination+0x58>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e1      	bne.n	8003af4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000174 	.word	0x20000174
 8003b40:	200001a0 	.word	0x200001a0
 8003b44:	20000188 	.word	0x20000188

08003b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 feeb 	bl	8004930 <vPortFree>
            vPortFree( pxTCB );
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fee8 	bl	8004930 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <prvResetNextTaskUnblockTime+0x30>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <prvResetNextTaskUnblockTime+0x34>)
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b7e:	e005      	b.n	8003b8c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <prvResetNextTaskUnblockTime+0x30>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <prvResetNextTaskUnblockTime+0x34>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000158 	.word	0x20000158
 8003b9c:	200001c0 	.word	0x200001c0

08003ba0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <xTaskGetCurrentTaskHandle+0x1c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003bac:	687b      	ldr	r3, [r7, #4]
    }
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	200000c8 	.word	0x200000c8

08003bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <xTaskGetSchedulerState+0x34>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e008      	b.n	8003be6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <xTaskGetSchedulerState+0x38>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e001      	b.n	8003be6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003be6:	687b      	ldr	r3, [r7, #4]
    }
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	200001ac 	.word	0x200001ac
 8003bf8:	200001c8 	.word	0x200001c8

08003bfc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c06:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fba0 	bl	8002358 <uxListRemove>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	2201      	movs	r2, #1
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ce8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4013      	ands	r3, r2
 8003c32:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c34:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3c:	d124      	bne.n	8003c88 <prvAddCurrentTaskToDelayedList+0x8c>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d021      	beq.n	8003c88 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c44:	4b29      	ldr	r3, [pc, #164]	; (8003cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	3204      	adds	r2, #4
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1d1a      	adds	r2, r3, #4
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c78:	615a      	str	r2, [r3, #20]
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c86:	e026      	b.n	8003cd6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d209      	bcs.n	8003cb4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fe fb1a 	bl	80022e6 <vListInsert>
}
 8003cb2:	e010      	b.n	8003cd6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fe fb10 	bl	80022e6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d202      	bcs.n	8003cd6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003cd0:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6013      	str	r3, [r2, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200001a4 	.word	0x200001a4
 8003ce4:	200000c8 	.word	0x200000c8
 8003ce8:	200001a8 	.word	0x200001a8
 8003cec:	2000018c 	.word	0x2000018c
 8003cf0:	2000015c 	.word	0x2000015c
 8003cf4:	20000158 	.word	0x20000158
 8003cf8:	200001c0 	.word	0x200001c0

08003cfc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d06:	f000 fa47 	bl	8004198 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <xTimerCreateTimerTask+0x54>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <xTimerCreateTimerTask+0x58>)
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2302      	movs	r3, #2
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d20:	490d      	ldr	r1, [pc, #52]	; (8003d58 <xTimerCreateTimerTask+0x5c>)
 8003d22:	480e      	ldr	r0, [pc, #56]	; (8003d5c <xTimerCreateTimerTask+0x60>)
 8003d24:	f7fe fe72 	bl	8002a0c <xTaskCreate>
 8003d28:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	603b      	str	r3, [r7, #0]
    }
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d46:	687b      	ldr	r3, [r7, #4]
    }
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200001fc 	.word	0x200001fc
 8003d54:	20000200 	.word	0x20000200
 8003d58:	08006e2c 	.word	0x08006e2c
 8003d5c:	08003e05 	.word	0x08003e05

08003d60 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d6c:	e008      	b.n	8003d80 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4413      	add	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	18d1      	adds	r1, r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f8dd 	bl	8003f4c <prvInsertTimerInActiveList>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ea      	bne.n	8003d6e <prvReloadTimer+0xe>
        }
    }
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <prvProcessExpiredTimer+0x5c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe facb 	bl	8002358 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff ffc3 	bl	8003d60 <prvReloadTimer>
 8003dda:	e008      	b.n	8003dee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	4798      	blx	r3
    }
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	200001f4 	.word	0x200001f4

08003e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e0c:	f107 0308 	add.w	r3, r7, #8
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f857 	bl	8003ec4 <prvGetNextExpireTime>
 8003e16:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f803 	bl	8003e28 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e22:	f000 f8d5 	bl	8003fd0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e26:	e7f1      	b.n	8003e0c <prvTimerTask+0x8>

08003e28 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e32:	f7ff f8af 	bl	8002f94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f866 	bl	8003f0c <prvSampleTimeNow>
 8003e40:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d130      	bne.n	8003eaa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <prvProcessTimerOrBlockTask+0x3c>
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d806      	bhi.n	8003e64 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e56:	f7ff f8ab 	bl	8002fb0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ffa1 	bl	8003da4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e62:	e024      	b.n	8003eae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <prvProcessTimerOrBlockTask+0x90>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <prvProcessTimerOrBlockTask+0x50>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <prvProcessTimerOrBlockTask+0x52>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <prvProcessTimerOrBlockTask+0x94>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f7fe fd8b 	bl	80029a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e8e:	f7ff f88f 	bl	8002fb0 <xTaskResumeAll>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <prvProcessTimerOrBlockTask+0x98>)
 8003e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	f3bf 8f6f 	isb	sy
    }
 8003ea8:	e001      	b.n	8003eae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003eaa:	f7ff f881 	bl	8002fb0 <xTaskResumeAll>
    }
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200001f8 	.word	0x200001f8
 8003ebc:	200001fc 	.word	0x200001fc
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <prvGetNextExpireTime+0x44>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <prvGetNextExpireTime+0x16>
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	e000      	b.n	8003edc <prvGetNextExpireTime+0x18>
 8003eda:	2200      	movs	r2, #0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <prvGetNextExpireTime+0x44>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e001      	b.n	8003ef8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
    }
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	200001f4 	.word	0x200001f4

08003f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f14:	f7ff f94c 	bl	80031b0 <xTaskGetTickCount>
 8003f18:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <prvSampleTimeNow+0x3c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d205      	bcs.n	8003f30 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f24:	f000 f912 	bl	800414c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e002      	b.n	8003f36 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <prvSampleTimeNow+0x3c>)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000204 	.word	0x20000204

08003f4c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d812      	bhi.n	8003f98 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e01b      	b.n	8003fbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <prvInsertTimerInActiveList+0x7c>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f7fe f9a8 	bl	80022e6 <vListInsert>
 8003f96:	e012      	b.n	8003fbe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d206      	bcs.n	8003fae <prvInsertTimerInActiveList+0x62>
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e007      	b.n	8003fbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <prvInsertTimerInActiveList+0x80>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fe f994 	bl	80022e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fbe:	697b      	ldr	r3, [r7, #20]
    }
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200001f8 	.word	0x200001f8
 8003fcc:	200001f4 	.word	0x200001f4

08003fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd6:	e0a6      	b.n	8004126 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f2c0 80a2 	blt.w	8004124 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe f9b1 	bl	8002358 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ff87 	bl	8003f0c <prvSampleTimeNow>
 8003ffe:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3b01      	subs	r3, #1
 8004004:	2b08      	cmp	r3, #8
 8004006:	f200 808e 	bhi.w	8004126 <prvProcessReceivedCommands+0x156>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <prvProcessReceivedCommands+0x40>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004035 	.word	0x08004035
 8004014:	08004035 	.word	0x08004035
 8004018:	0800409d 	.word	0x0800409d
 800401c:	080040b1 	.word	0x080040b1
 8004020:	080040fb 	.word	0x080040fb
 8004024:	08004035 	.word	0x08004035
 8004028:	08004035 	.word	0x08004035
 800402c:	0800409d 	.word	0x0800409d
 8004030:	080040b1 	.word	0x080040b1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	18d1      	adds	r1, r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	69f8      	ldr	r0, [r7, #28]
 8004054:	f7ff ff7a 	bl	8003f4c <prvInsertTimerInActiveList>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d063      	beq.n	8004126 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4413      	add	r3, r2
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4619      	mov	r1, r3
 8004078:	69f8      	ldr	r0, [r7, #28]
 800407a:	f7ff fe71 	bl	8003d60 <prvReloadTimer>
 800407e:	e008      	b.n	8004092 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	69f8      	ldr	r0, [r7, #28]
 8004098:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800409a:	e044      	b.n	8004126 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80040ae:	e03a      	b.n	8004126 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	617b      	str	r3, [r7, #20]
    }
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	18d1      	adds	r1, r2, r3
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	69f8      	ldr	r0, [r7, #28]
 80040f4:	f7ff ff2a 	bl	8003f4c <prvInsertTimerInActiveList>
                        break;
 80040f8:	e015      	b.n	8004126 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d103      	bne.n	8004110 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004108:	69f8      	ldr	r0, [r7, #28]
 800410a:	f000 fc11 	bl	8004930 <vPortFree>
 800410e:	e00a      	b.n	8004126 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004122:	e000      	b.n	8004126 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004124:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <prvProcessReceivedCommands+0x178>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f107 0108 	add.w	r1, r7, #8
 800412e:	2200      	movs	r2, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fa43 	bl	80025bc <xQueueReceive>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f af4d 	bne.w	8003fd8 <prvProcessReceivedCommands+0x8>
        }
    }
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200001fc 	.word	0x200001fc

0800414c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004152:	e009      	b.n	8004168 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <prvSwitchTimerLists+0x44>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800415e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004162:	6838      	ldr	r0, [r7, #0]
 8004164:	f7ff fe1e 	bl	8003da4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <prvSwitchTimerLists+0x44>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <prvSwitchTimerLists+0x44>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <prvSwitchTimerLists+0x48>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a04      	ldr	r2, [pc, #16]	; (8004190 <prvSwitchTimerLists+0x44>)
 800417e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <prvSwitchTimerLists+0x48>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6013      	str	r3, [r2, #0]
    }
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200001f4 	.word	0x200001f4
 8004194:	200001f8 	.word	0x200001f8

08004198 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800419c:	f000 f9e2 	bl	8004564 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041a0:	4b12      	ldr	r3, [pc, #72]	; (80041ec <prvCheckForValidListAndQueue+0x54>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041a8:	4811      	ldr	r0, [pc, #68]	; (80041f0 <prvCheckForValidListAndQueue+0x58>)
 80041aa:	f7fe f84b 	bl	8002244 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041ae:	4811      	ldr	r0, [pc, #68]	; (80041f4 <prvCheckForValidListAndQueue+0x5c>)
 80041b0:	f7fe f848 	bl	8002244 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041b4:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <prvCheckForValidListAndQueue+0x60>)
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <prvCheckForValidListAndQueue+0x58>)
 80041b8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <prvCheckForValidListAndQueue+0x64>)
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <prvCheckForValidListAndQueue+0x5c>)
 80041be:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041c0:	2200      	movs	r2, #0
 80041c2:	210c      	movs	r1, #12
 80041c4:	200a      	movs	r0, #10
 80041c6:	f7fe f981 	bl	80024cc <xQueueGenericCreate>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4a07      	ldr	r2, [pc, #28]	; (80041ec <prvCheckForValidListAndQueue+0x54>)
 80041ce:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <prvCheckForValidListAndQueue+0x54>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <prvCheckForValidListAndQueue+0x54>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4908      	ldr	r1, [pc, #32]	; (8004200 <prvCheckForValidListAndQueue+0x68>)
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fb8a 	bl	80028f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041e4:	f000 f9ee 	bl	80045c4 <vPortExitCritical>
    }
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200001fc 	.word	0x200001fc
 80041f0:	200001cc 	.word	0x200001cc
 80041f4:	200001e0 	.word	0x200001e0
 80041f8:	200001f4 	.word	0x200001f4
 80041fc:	200001f8 	.word	0x200001f8
 8004200:	08006e34 	.word	0x08006e34

08004204 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3b04      	subs	r3, #4
 8004214:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800421c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b04      	subs	r3, #4
 8004222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b04      	subs	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004234:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <pxPortInitialiseStack+0x64>)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b14      	subs	r3, #20
 800423e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3b04      	subs	r3, #4
 800424a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f06f 0202 	mvn.w	r2, #2
 8004252:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b20      	subs	r3, #32
 8004258:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	0800426d 	.word	0x0800426d

0800426c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <prvTaskExitError+0x54>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800427e:	d00a      	beq.n	8004296 <prvTaskExitError+0x2a>
        __asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
    }
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <prvTaskExitError+0x28>
        __asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
    }
 80042a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042aa:	bf00      	nop
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0fc      	beq.n	80042ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000010 	.word	0x20000010
	...

080042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <pxCurrentTCBConst2>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	6808      	ldr	r0, [r1, #0]
 80042d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	f380 8809 	msr	PSP, r0
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	4770      	bx	lr
 80042ec:	f3af 8000 	nop.w

080042f0 <pxCurrentTCBConst2>:
 80042f0:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042f8:	4808      	ldr	r0, [pc, #32]	; (800431c <prvPortStartFirstTask+0x24>)
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f380 8808 	msr	MSP, r0
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8814 	msr	CONTROL, r0
 800430a:	b662      	cpsie	i
 800430c:	b661      	cpsie	f
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	df00      	svc	0
 8004318:	bf00      	nop
 800431a:	0000      	.short	0x0000
 800431c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop

08004324 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800432a:	4b46      	ldr	r3, [pc, #280]	; (8004444 <xPortStartScheduler+0x120>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a46      	ldr	r2, [pc, #280]	; (8004448 <xPortStartScheduler+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10a      	bne.n	800434a <xPortStartScheduler+0x26>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
    }
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800434a:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <xPortStartScheduler+0x120>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3f      	ldr	r2, [pc, #252]	; (800444c <xPortStartScheduler+0x128>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10a      	bne.n	800436a <xPortStartScheduler+0x46>
        __asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
    }
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <xPortStartScheduler+0x12c>)
 800436c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <xPortStartScheduler+0x130>)
 8004390:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <xPortStartScheduler+0x134>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004398:	e009      	b.n	80043ae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <xPortStartScheduler+0x134>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <xPortStartScheduler+0x134>)
 80043a2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d0ef      	beq.n	800439a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ba:	4b27      	ldr	r3, [pc, #156]	; (8004458 <xPortStartScheduler+0x134>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1c3 0307 	rsb	r3, r3, #7
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00a      	beq.n	80043dc <xPortStartScheduler+0xb8>
        __asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60bb      	str	r3, [r7, #8]
    }
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <xPortStartScheduler+0x134>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <xPortStartScheduler+0x134>)
 80043e4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043e6:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <xPortStartScheduler+0x134>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <xPortStartScheduler+0x134>)
 80043f0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <xPortStartScheduler+0x138>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <xPortStartScheduler+0x138>)
 8004400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004404:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <xPortStartScheduler+0x138>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <xPortStartScheduler+0x138>)
 800440c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004410:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004412:	f000 f963 	bl	80046dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <xPortStartScheduler+0x13c>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800441c:	f000 f982 	bl	8004724 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <xPortStartScheduler+0x140>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <xPortStartScheduler+0x140>)
 8004426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800442c:	f7ff ff64 	bl	80042f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004430:	f7ff f8ce 	bl	80035d0 <vTaskSwitchContext>
    prvTaskExitError();
 8004434:	f7ff ff1a 	bl	800426c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000ed00 	.word	0xe000ed00
 8004448:	410fc271 	.word	0x410fc271
 800444c:	410fc270 	.word	0x410fc270
 8004450:	e000e400 	.word	0xe000e400
 8004454:	20000208 	.word	0x20000208
 8004458:	2000020c 	.word	0x2000020c
 800445c:	e000ed20 	.word	0xe000ed20
 8004460:	20000010 	.word	0x20000010
 8004464:	e000ef34 	.word	0xe000ef34

08004468 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800446e:	4b37      	ldr	r3, [pc, #220]	; (800454c <vInitPrioGroupValue+0xe4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a37      	ldr	r2, [pc, #220]	; (8004550 <vInitPrioGroupValue+0xe8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10a      	bne.n	800448e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	613b      	str	r3, [r7, #16]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <vInitPrioGroupValue+0xe4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a30      	ldr	r2, [pc, #192]	; (8004554 <vInitPrioGroupValue+0xec>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10a      	bne.n	80044ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	60fb      	str	r3, [r7, #12]
    }
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <vInitPrioGroupValue+0xf0>)
 80044b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b22      	ldr	r3, [pc, #136]	; (800455c <vInitPrioGroupValue+0xf4>)
 80044d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <vInitPrioGroupValue+0xf8>)
 80044d8:	2207      	movs	r2, #7
 80044da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044dc:	e009      	b.n	80044f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <vInitPrioGroupValue+0xf8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <vInitPrioGroupValue+0xf8>)
 80044e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d0ef      	beq.n	80044de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1c3 0307 	rsb	r3, r3, #7
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00a      	beq.n	8004520 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60bb      	str	r3, [r7, #8]
    }
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004528:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800452a:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <vInitPrioGroupValue+0xf8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004532:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <vInitPrioGroupValue+0xf8>)
 8004534:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000ed00 	.word	0xe000ed00
 8004550:	410fc271 	.word	0x410fc271
 8004554:	410fc270 	.word	0x410fc270
 8004558:	e000e400 	.word	0xe000e400
 800455c:	20000208 	.word	0x20000208
 8004560:	2000020c 	.word	0x2000020c

08004564 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
        __asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	607b      	str	r3, [r7, #4]
    }
 800457c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <vPortEnterCritical+0x58>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <vPortEnterCritical+0x58>)
 8004586:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <vPortEnterCritical+0x58>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10f      	bne.n	80045b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <vPortEnterCritical+0x5c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	603b      	str	r3, [r7, #0]
    }
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <vPortEnterCritical+0x4a>
    }
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000010 	.word	0x20000010
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <vPortExitCritical+0x50>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <vPortExitCritical+0x24>
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	607b      	str	r3, [r7, #4]
    }
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <vPortExitCritical+0x50>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <vPortExitCritical+0x50>)
 80045f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <vPortExitCritical+0x50>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <vPortExitCritical+0x42>
 80045fa:	2300      	movs	r3, #0
 80045fc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004604:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000010 	.word	0x20000010
	...

08004620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004620:	f3ef 8009 	mrs	r0, PSP
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <pxCurrentTCBConst>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f01e 0f10 	tst.w	lr, #16
 8004630:	bf08      	it	eq
 8004632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004644:	f380 8811 	msr	BASEPRI, r0
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f7fe ffbe 	bl	80035d0 <vTaskSwitchContext>
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	f380 8811 	msr	BASEPRI, r0
 800465c:	bc09      	pop	{r0, r3}
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	6808      	ldr	r0, [r1, #0]
 8004662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004666:	f01e 0f10 	tst.w	lr, #16
 800466a:	bf08      	it	eq
 800466c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004670:	f380 8809 	msr	PSP, r0
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst>:
 8004680:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
        __asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
    }
 80046a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80046a2:	f002 f88f 	bl	80067c4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80046a6:	f7fe fe79 	bl	800339c <xTaskIncrementTick>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80046b0:	f002 f8e6 	bl	8006880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <SysTick_Handler+0x50>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e001      	b.n	80046c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80046be:	f002 f8c3 	bl	8006848 <SEGGER_SYSVIEW_RecordExitISR>
 80046c2:	2300      	movs	r3, #0
 80046c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f383 8811 	msr	BASEPRI, r3
    }
 80046cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <vPortSetupTimerInterrupt+0x38>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <vPortSetupTimerInterrupt+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <vPortSetupTimerInterrupt+0x40>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	4a09      	ldr	r2, [pc, #36]	; (8004720 <vPortSetupTimerInterrupt+0x44>)
 80046fa:	3b01      	subs	r3, #1
 80046fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010
 8004714:	e000e018 	.word	0xe000e018
 8004718:	20000000 	.word	0x20000000
 800471c:	10624dd3 	.word	0x10624dd3
 8004720:	e000e014 	.word	0xe000e014

08004724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004734 <vPortEnableVFP+0x10>
 8004728:	6801      	ldr	r1, [r0, #0]
 800472a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800472e:	6001      	str	r1, [r0, #0]
 8004730:	4770      	bx	lr
 8004732:	0000      	.short	0x0000
 8004734:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop

0800473c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004742:	f3ef 8305 	mrs	r3, IPSR
 8004746:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d914      	bls.n	8004778 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <vPortValidateInterruptPriority+0x70>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <vPortValidateInterruptPriority+0x74>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	7afa      	ldrb	r2, [r7, #11]
 800475e:	429a      	cmp	r2, r3
 8004760:	d20a      	bcs.n	8004778 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	607b      	str	r3, [r7, #4]
    }
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <vPortValidateInterruptPriority+0x78>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <vPortValidateInterruptPriority+0x7c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d90a      	bls.n	800479e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	603b      	str	r3, [r7, #0]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <vPortValidateInterruptPriority+0x60>
    }
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e3f0 	.word	0xe000e3f0
 80047b0:	20000208 	.word	0x20000208
 80047b4:	e000ed0c 	.word	0xe000ed0c
 80047b8:	2000020c 	.word	0x2000020c

080047bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	; 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80047c8:	f7fe fbe4 	bl	8002f94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <pvPortMalloc+0x160>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80047d4:	f000 f908 	bl	80049e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80047de:	2208      	movs	r2, #8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	3308      	adds	r3, #8
 80047ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d804      	bhi.n	8004800 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	4413      	add	r3, r2
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	e001      	b.n	8004804 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	db70      	blt.n	80048ec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d06d      	beq.n	80048ec <pvPortMalloc+0x130>
 8004810:	4b43      	ldr	r3, [pc, #268]	; (8004920 <pvPortMalloc+0x164>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d868      	bhi.n	80048ec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800481a:	4b42      	ldr	r3, [pc, #264]	; (8004924 <pvPortMalloc+0x168>)
 800481c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <pvPortMalloc+0x168>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004824:	e004      	b.n	8004830 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d903      	bls.n	8004842 <pvPortMalloc+0x86>
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f1      	bne.n	8004826 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004842:	4b36      	ldr	r3, [pc, #216]	; (800491c <pvPortMalloc+0x160>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	429a      	cmp	r2, r3
 800484a:	d04f      	beq.n	80048ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2208      	movs	r2, #8
 8004852:	4413      	add	r3, r2
 8004854:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	1ad2      	subs	r2, r2, r3
 8004866:	2308      	movs	r3, #8
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	429a      	cmp	r2, r3
 800486c:	d91f      	bls.n	80048ae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4413      	add	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <pvPortMalloc+0xda>
        __asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
    }
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	1ad2      	subs	r2, r2, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f000 f8f9 	bl	8004aa0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048ae:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <pvPortMalloc+0x164>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	4a19      	ldr	r2, [pc, #100]	; (8004920 <pvPortMalloc+0x164>)
 80048ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048bc:	4b18      	ldr	r3, [pc, #96]	; (8004920 <pvPortMalloc+0x164>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <pvPortMalloc+0x16c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d203      	bcs.n	80048d0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <pvPortMalloc+0x164>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <pvPortMalloc+0x16c>)
 80048ce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <pvPortMalloc+0x170>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	4a10      	ldr	r2, [pc, #64]	; (800492c <pvPortMalloc+0x170>)
 80048ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048ec:	f7fe fb60 	bl	8002fb0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <pvPortMalloc+0x154>
        __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60fb      	str	r3, [r7, #12]
    }
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <pvPortMalloc+0x152>
    return pvReturn;
 8004910:	69fb      	ldr	r3, [r7, #28]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3728      	adds	r7, #40	; 0x28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20012e18 	.word	0x20012e18
 8004920:	20012e1c 	.word	0x20012e1c
 8004924:	20012e10 	.word	0x20012e10
 8004928:	20012e20 	.word	0x20012e20
 800492c:	20012e24 	.word	0x20012e24

08004930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d049      	beq.n	80049d6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004942:	2308      	movs	r3, #8
 8004944:	425b      	negs	r3, r3
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	db0a      	blt.n	800496e <vPortFree+0x3e>
        __asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	60fb      	str	r3, [r7, #12]
    }
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <vPortFree+0x5c>
        __asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	60bb      	str	r3, [r7, #8]
    }
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0fdb      	lsrs	r3, r3, #31
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01c      	beq.n	80049d6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d118      	bne.n	80049d6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80049b0:	f7fe faf0 	bl	8002f94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <vPortFree+0xb0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4413      	add	r3, r2
 80049be:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <vPortFree+0xb0>)
 80049c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049c2:	6938      	ldr	r0, [r7, #16]
 80049c4:	f000 f86c 	bl	8004aa0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <vPortFree+0xb4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <vPortFree+0xb4>)
 80049d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049d2:	f7fe faed 	bl	8002fb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20012e1c 	.word	0x20012e1c
 80049e4:	20012e28 	.word	0x20012e28

080049e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <prvHeapInit+0xa4>)
 80049f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00c      	beq.n	8004a1c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3307      	adds	r3, #7
 8004a06:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0307 	bic.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <prvHeapInit+0xa4>)
 8004a18:	4413      	add	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a20:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <prvHeapInit+0xa8>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <prvHeapInit+0xa8>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	4413      	add	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a34:	2208      	movs	r2, #8
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <prvHeapInit+0xac>)
 8004a48:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <prvHeapInit+0xac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <prvHeapInit+0xac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <prvHeapInit+0xac>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <prvHeapInit+0xb0>)
 8004a76:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <prvHeapInit+0xb4>)
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000210 	.word	0x20000210
 8004a90:	20012e10 	.word	0x20012e10
 8004a94:	20012e18 	.word	0x20012e18
 8004a98:	20012e20 	.word	0x20012e20
 8004a9c:	20012e1c 	.word	0x20012e1c

08004aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aa8:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <prvInsertBlockIntoFreeList+0xac>)
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e002      	b.n	8004ab4 <prvInsertBlockIntoFreeList+0x14>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d8f7      	bhi.n	8004aae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d108      	bne.n	8004ae2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	441a      	add	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d118      	bne.n	8004b28 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <prvInsertBlockIntoFreeList+0xb0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d00d      	beq.n	8004b1e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	441a      	add	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e008      	b.n	8004b30 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <prvInsertBlockIntoFreeList+0xb0>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e003      	b.n	8004b30 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d002      	beq.n	8004b3e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20012e10 	.word	0x20012e10
 8004b50:	20012e18 	.word	0x20012e18

08004b54 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b58:	4803      	ldr	r0, [pc, #12]	; (8004b68 <_cbSendSystemDesc+0x14>)
 8004b5a:	f001 fddd 	bl	8006718 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b5e:	4803      	ldr	r0, [pc, #12]	; (8004b6c <_cbSendSystemDesc+0x18>)
 8004b60:	f001 fdda 	bl	8006718 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	08006e3c 	.word	0x08006e3c
 8004b6c:	08006e70 	.word	0x08006e70

08004b70 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b7e:	4a06      	ldr	r2, [pc, #24]	; (8004b98 <SEGGER_SYSVIEW_Conf+0x28>)
 8004b80:	f001 f946 	bl	8005e10 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004b88:	f001 f986 	bl	8005e98 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b8c:	bf00      	nop
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000000 	.word	0x20000000
 8004b94:	08004b55 	.word	0x08004b55
 8004b98:	08006f04 	.word	0x08006f04

08004b9c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	e033      	b.n	8004c10 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ba8:	491e      	ldr	r1, [pc, #120]	; (8004c24 <_cbSendTaskList+0x88>)
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	491a      	ldr	r1, [pc, #104]	; (8004c24 <_cbSendTaskList+0x88>)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	4c16      	ldr	r4, [pc, #88]	; (8004c24 <_cbSendTaskList+0x88>)
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4423      	add	r3, r4
 8004bd8:	3308      	adds	r3, #8
 8004bda:	681c      	ldr	r4, [r3, #0]
 8004bdc:	4d11      	ldr	r5, [pc, #68]	; (8004c24 <_cbSendTaskList+0x88>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	442b      	add	r3, r5
 8004bea:	330c      	adds	r3, #12
 8004bec:	681d      	ldr	r5, [r3, #0]
 8004bee:	4e0d      	ldr	r6, [pc, #52]	; (8004c24 <_cbSendTaskList+0x88>)
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4433      	add	r3, r6
 8004bfc:	3310      	adds	r3, #16
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	462b      	mov	r3, r5
 8004c04:	4622      	mov	r2, r4
 8004c06:	f000 f92d 	bl	8004e64 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <_cbSendTaskList+0x8c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d3c6      	bcc.n	8004ba8 <_cbSendTaskList+0xc>
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c24:	20012e2c 	.word	0x20012e2c
 8004c28:	20012ecc 	.word	0x20012ecc

08004c2c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c34:	f7fe facc 	bl	80031d0 <xTaskGetTickCountFromISR>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	469a      	mov	sl, r3
 8004c3e:	4693      	mov	fp, r2
 8004c40:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	f04f 0a00 	mov.w	sl, #0
 8004c50:	f04f 0b00 	mov.w	fp, #0
 8004c54:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c58:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c5c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c60:	4652      	mov	r2, sl
 8004c62:	465b      	mov	r3, fp
 8004c64:	1a14      	subs	r4, r2, r0
 8004c66:	eb63 0501 	sbc.w	r5, r3, r1
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	00ab      	lsls	r3, r5, #2
 8004c74:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c78:	00a2      	lsls	r2, r4, #2
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	eb14 0800 	adds.w	r8, r4, r0
 8004c82:	eb45 0901 	adc.w	r9, r5, r1
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c9a:	4690      	mov	r8, r2
 8004c9c:	4699      	mov	r9, r3
 8004c9e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004cb4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cc2:	2205      	movs	r2, #5
 8004cc4:	492b      	ldr	r1, [pc, #172]	; (8004d74 <SYSVIEW_AddTask+0xc0>)
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f002 f872 	bl	8006db0 <memcmp>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d04b      	beq.n	8004d6a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b07      	cmp	r3, #7
 8004cd8:	d903      	bls.n	8004ce2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cda:	4828      	ldr	r0, [pc, #160]	; (8004d7c <SYSVIEW_AddTask+0xc8>)
 8004cdc:	f001 ffba 	bl	8006c54 <SEGGER_SYSVIEW_Warn>
    return;
 8004ce0:	e044      	b.n	8004d6c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ce2:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4926      	ldr	r1, [pc, #152]	; (8004d80 <SYSVIEW_AddTask+0xcc>)
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4921      	ldr	r1, [pc, #132]	; (8004d80 <SYSVIEW_AddTask+0xcc>)
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	3304      	adds	r3, #4
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	491b      	ldr	r1, [pc, #108]	; (8004d80 <SYSVIEW_AddTask+0xcc>)
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4916      	ldr	r1, [pc, #88]	; (8004d80 <SYSVIEW_AddTask+0xcc>)
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	330c      	adds	r3, #12
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4910      	ldr	r1, [pc, #64]	; (8004d80 <SYSVIEW_AddTask+0xcc>)
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3310      	adds	r3, #16
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <SYSVIEW_AddTask+0xc4>)
 8004d56:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f87e 	bl	8004e64 <SYSVIEW_SendTaskInfo>
 8004d68:	e000      	b.n	8004d6c <SYSVIEW_AddTask+0xb8>
    return;
 8004d6a:	bf00      	nop

}
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	08006e80 	.word	0x08006e80
 8004d78:	20012ecc 	.word	0x20012ecc
 8004d7c:	08006e88 	.word	0x08006e88
 8004d80:	20012e2c 	.word	0x20012e2c

08004d84 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d92:	2205      	movs	r2, #5
 8004d94:	4930      	ldr	r1, [pc, #192]	; (8004e58 <SYSVIEW_UpdateTask+0xd4>)
 8004d96:	68b8      	ldr	r0, [r7, #8]
 8004d98:	f002 f80a 	bl	8006db0 <memcmp>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d056      	beq.n	8004e50 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	e00d      	b.n	8004dc4 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004da8:	492c      	ldr	r1, [pc, #176]	; (8004e5c <SYSVIEW_UpdateTask+0xd8>)
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d008      	beq.n	8004dd0 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <SYSVIEW_UpdateTask+0xdc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d3ec      	bcc.n	8004da8 <SYSVIEW_UpdateTask+0x24>
 8004dce:	e000      	b.n	8004dd2 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004dd0:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <SYSVIEW_UpdateTask+0xdc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d230      	bcs.n	8004e3e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004ddc:	491f      	ldr	r1, [pc, #124]	; (8004e5c <SYSVIEW_UpdateTask+0xd8>)
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	3304      	adds	r3, #4
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004df0:	491a      	ldr	r1, [pc, #104]	; (8004e5c <SYSVIEW_UpdateTask+0xd8>)
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3308      	adds	r3, #8
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004e04:	4915      	ldr	r1, [pc, #84]	; (8004e5c <SYSVIEW_UpdateTask+0xd8>)
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	330c      	adds	r3, #12
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004e18:	4910      	ldr	r1, [pc, #64]	; (8004e5c <SYSVIEW_UpdateTask+0xd8>)
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3310      	adds	r3, #16
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f814 	bl	8004e64 <SYSVIEW_SendTaskInfo>
 8004e3c:	e009      	b.n	8004e52 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff ff33 	bl	8004cb4 <SYSVIEW_AddTask>
 8004e4e:	e000      	b.n	8004e52 <SYSVIEW_UpdateTask+0xce>
    return;
 8004e50:	bf00      	nop
  }
}
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	08006e80 	.word	0x08006e80
 8004e5c:	20012e2c 	.word	0x20012e2c
 8004e60:	20012ecc 	.word	0x20012ecc

08004e64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	2214      	movs	r2, #20
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 ffb6 	bl	8006dec <memset>
  TaskInfo.TaskID     = TaskID;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 fb45 	bl	8006528 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e9e:	bf00      	nop
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <__NVIC_EnableIRQ>:
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	db0b      	blt.n	8004ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	f003 021f 	and.w	r2, r3, #31
 8004ec0:	4907      	ldr	r1, [pc, #28]	; (8004ee0 <__NVIC_EnableIRQ+0x38>)
 8004ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2001      	movs	r0, #1
 8004eca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	e000e100 	.word	0xe000e100

08004ee4 <__NVIC_SetPriority>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	6039      	str	r1, [r7, #0]
 8004eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	db0a      	blt.n	8004f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	490c      	ldr	r1, [pc, #48]	; (8004f30 <__NVIC_SetPriority+0x4c>)
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	0112      	lsls	r2, r2, #4
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	440b      	add	r3, r1
 8004f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f0c:	e00a      	b.n	8004f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4908      	ldr	r1, [pc, #32]	; (8004f34 <__NVIC_SetPriority+0x50>)
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	3b04      	subs	r3, #4
 8004f1c:	0112      	lsls	r2, r2, #4
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	440b      	add	r3, r1
 8004f22:	761a      	strb	r2, [r3, #24]
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000e100 	.word	0xe000e100
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004f3e:	f001 fee5 	bl	8006d0c <SEGGER_SYSVIEW_IsStarted>
 8004f42:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004f4a:	f001 f971 	bl	8006230 <SEGGER_SYSVIEW_Start>
  }
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004f62:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <_cbOnUARTRx+0x3c>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d806      	bhi.n	8004f78 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <_cbOnUARTRx+0x3c>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <_cbOnUARTRx+0x3c>)
 8004f74:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004f76:	e009      	b.n	8004f8c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004f78:	f7ff ffde 	bl	8004f38 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <_cbOnUARTRx+0x3c>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	1dfb      	adds	r3, r7, #7
 8004f84:	2201      	movs	r2, #1
 8004f86:	4619      	mov	r1, r3
 8004f88:	f000 fb9c 	bl	80056c4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004f8c:	bf00      	nop
}
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000014 	.word	0x20000014

08004f98 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004fa0:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <_cbOnUARTTx+0x5c>)
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d80f      	bhi.n	8004fc8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <_cbOnUARTTx+0x5c>)
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	461a      	mov	r2, r3
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <_cbOnUARTTx+0x60>)
 8004fb0:	5c9a      	ldrb	r2, [r3, r2]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <_cbOnUARTTx+0x5c>)
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <_cbOnUARTTx+0x5c>)
 8004fc0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004fc6:	e00f      	b.n	8004fe8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <_cbOnUARTTx+0x5c>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fa1b 	bl	800540c <SEGGER_RTT_ReadUpBufferNoLock>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da02      	bge.n	8004fe6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e000      	b.n	8004fe8 <_cbOnUARTTx+0x50>
  }
Done:
 8004fe6:	bf00      	nop
  return r;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000014 	.word	0x20000014
 8004ff8:	08006f0c 	.word	0x08006f0c

08004ffc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <SEGGER_UART_init+0x1c>)
 8005006:	4905      	ldr	r1, [pc, #20]	; (800501c <SEGGER_UART_init+0x20>)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f863 	bl	80050d4 <HIF_UART_Init>
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	08004f59 	.word	0x08004f59
 800501c:	08004f99 	.word	0x08004f99

08005020 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <USART2_IRQHandler+0x80>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d011      	beq.n	800505a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005036:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <USART2_IRQHandler+0x84>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 030b 	and.w	r3, r3, #11
 8005044:	2b00      	cmp	r3, #0
 8005046:	d108      	bne.n	800505a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <USART2_IRQHandler+0x88>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <USART2_IRQHandler+0x88>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	79fa      	ldrb	r2, [r7, #7]
 8005056:	4610      	mov	r0, r2
 8005058:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01a      	beq.n	800509a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <USART2_IRQHandler+0x8c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <USART2_IRQHandler+0x8c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1dfa      	adds	r2, r7, #7
 8005072:	4610      	mov	r0, r2
 8005074:	4798      	blx	r3
 8005076:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <USART2_IRQHandler+0x90>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a0b      	ldr	r2, [pc, #44]	; (80050b0 <USART2_IRQHandler+0x90>)
 8005084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e006      	b.n	800509a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <USART2_IRQHandler+0x80>)
 800508e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005090:	79fa      	ldrb	r2, [r7, #7]
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <USART2_IRQHandler+0x84>)
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e000      	b.n	800509a <USART2_IRQHandler+0x7a>
      return;
 8005098:	bf00      	nop
    }
  }
}
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40004404 	.word	0x40004404
 80050a8:	20012ed0 	.word	0x20012ed0
 80050ac:	20012ed4 	.word	0x20012ed4
 80050b0:	4000440c 	.word	0x4000440c

080050b4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	4000440c 	.word	0x4000440c

080050d4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80050e0:	4b2e      	ldr	r3, [pc, #184]	; (800519c <HIF_UART_Init+0xc8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HIF_UART_Init+0xc8>)
 80050e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ea:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80050ec:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <HIF_UART_Init+0xcc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <HIF_UART_Init+0xcc>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HIF_UART_Init+0xd0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005104:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800510c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800510e:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <HIF_UART_Init+0xd0>)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HIF_UART_Init+0xd4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005120:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005128:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800512a:	4a1f      	ldr	r2, [pc, #124]	; (80051a8 <HIF_UART_Init+0xd4>)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005130:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <HIF_UART_Init+0xd8>)
 8005132:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8005136:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HIF_UART_Init+0xdc>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800513e:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <HIF_UART_Init+0xe0>)
 8005140:	2280      	movs	r2, #128	; 0x80
 8005142:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800514a:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <HIF_UART_Init+0xe4>)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	3301      	adds	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d302      	bcc.n	800516a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005164:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005168:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <HIF_UART_Init+0xe8>)
 8005176:	b29b      	uxth	r3, r3
 8005178:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800517a:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <HIF_UART_Init+0xec>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <HIF_UART_Init+0xf0>)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005186:	2106      	movs	r1, #6
 8005188:	2026      	movs	r0, #38	; 0x26
 800518a:	f7ff feab 	bl	8004ee4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800518e:	2026      	movs	r0, #38	; 0x26
 8005190:	f7ff fe8a 	bl	8004ea8 <__NVIC_EnableIRQ>
}
 8005194:	bf00      	nop
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023840 	.word	0x40023840
 80051a0:	40023830 	.word	0x40023830
 80051a4:	40020020 	.word	0x40020020
 80051a8:	40020000 	.word	0x40020000
 80051ac:	4000440c 	.word	0x4000440c
 80051b0:	40004410 	.word	0x40004410
 80051b4:	40004414 	.word	0x40004414
 80051b8:	0501bd00 	.word	0x0501bd00
 80051bc:	40004408 	.word	0x40004408
 80051c0:	20012ed0 	.word	0x20012ed0
 80051c4:	20012ed4 	.word	0x20012ed4

080051c8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <_DoInit+0xa0>)
 80051d0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80051d2:	22a8      	movs	r2, #168	; 0xa8
 80051d4:	2100      	movs	r1, #0
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	f001 fe08 	bl	8006dec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2203      	movs	r2, #3
 80051e0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2203      	movs	r2, #3
 80051e6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4a20      	ldr	r2, [pc, #128]	; (800526c <_DoInit+0xa4>)
 80051ec:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <_DoInit+0xa8>)
 80051f2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051fa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	; (800526c <_DoInit+0xa4>)
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4a17      	ldr	r2, [pc, #92]	; (8005274 <_DoInit+0xac>)
 8005218:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2210      	movs	r2, #16
 800521e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2200      	movs	r2, #0
 800522a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005232:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005236:	2300      	movs	r3, #0
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	e00c      	b.n	8005256 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f1c3 030f 	rsb	r3, r3, #15
 8005242:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <_DoInit+0xb0>)
 8005244:	5cd1      	ldrb	r1, [r2, r3]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	460a      	mov	r2, r1
 800524e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3301      	adds	r3, #1
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d9ef      	bls.n	800523c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800525c:	f3bf 8f5f 	dmb	sy
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20012ed8 	.word	0x20012ed8
 800526c:	08006ed8 	.word	0x08006ed8
 8005270:	20012f80 	.word	0x20012f80
 8005274:	20013380 	.word	0x20013380
 8005278:	08006f10 	.word	0x08006f10

0800527c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005288:	2300      	movs	r3, #0
 800528a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	429a      	cmp	r2, r3
 800529e:	d905      	bls.n	80052ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	e007      	b.n	80052bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	1acb      	subs	r3, r1, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	3b01      	subs	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bf28      	it	cs
 80052ca:	4613      	movcs	r3, r2
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	bf28      	it	cs
 80052d6:	4613      	movcs	r3, r2
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80052e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	f001 fd71 	bl	8006dd0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80052ee:	6a3a      	ldr	r2, [r7, #32]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	4413      	add	r3, r2
 80052f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	4413      	add	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	4413      	add	r3, r2
 800530c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	429a      	cmp	r2, r3
 8005316:	d101      	bne.n	800531c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800531c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1b2      	bne.n	8005292 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800532c:	6a3b      	ldr	r3, [r7, #32]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005336:	b580      	push	{r7, lr}
 8005338:	b088      	sub	sp, #32
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d911      	bls.n	800537e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	6938      	ldr	r0, [r7, #16]
 800536a:	f001 fd31 	bl	8006dd0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800536e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	441a      	add	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800537c:	e01f      	b.n	80053be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	6938      	ldr	r0, [r7, #16]
 8005392:	f001 fd1d 	bl	8006dd0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4413      	add	r3, r2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4619      	mov	r1, r3
 80053ae:	6938      	ldr	r0, [r7, #16]
 80053b0:	f001 fd0e 	bl	8006dd0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	60da      	str	r2, [r3, #12]
}
 80053be:	bf00      	nop
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80053c6:	b480      	push	{r7}
 80053c8:	b087      	sub	sp, #28
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d808      	bhi.n	80053f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad2      	subs	r2, r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4413      	add	r3, r2
 80053ee:	3b01      	subs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e004      	b.n	80053fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80053fe:	697b      	ldr	r3, [r7, #20]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b08c      	sub	sp, #48	; 0x30
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005418:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005426:	f7ff fecf 	bl	80051c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4a37      	ldr	r2, [pc, #220]	; (8005514 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005438:	4413      	add	r3, r2
 800543a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d92b      	bls.n	80054b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4293      	cmp	r3, r2
 8005468:	bf28      	it	cs
 800546a:	4613      	movcs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	4413      	add	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	6939      	ldr	r1, [r7, #16]
 800547c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800547e:	f001 fca7 	bl	8006dd0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4413      	add	r3, r2
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800549a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d101      	bne.n	80054b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80054ac:	2300      	movs	r3, #0
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4293      	cmp	r3, r2
 80054be:	bf28      	it	cs
 80054c0:	4613      	movcs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d019      	beq.n	80054fe <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	4413      	add	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054da:	f001 fc79 	bl	8006dd0 <memcpy>
    NumBytesRead += NumBytesRem;
 80054de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005508:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800550c:	4618      	mov	r0, r3
 800550e:	3730      	adds	r7, #48	; 0x30
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20012ed8 	.word	0x20012ed8

08005518 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	; 0x30
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005524:	4b3e      	ldr	r3, [pc, #248]	; (8005620 <SEGGER_RTT_ReadNoLock+0x108>)
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <SEGGER_RTT_ReadNoLock+0x1e>
 8005532:	f7ff fe49 	bl	80051c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4613      	mov	r3, r2
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	3360      	adds	r3, #96	; 0x60
 8005542:	4a37      	ldr	r2, [pc, #220]	; (8005620 <SEGGER_RTT_ReadNoLock+0x108>)
 8005544:	4413      	add	r3, r2
 8005546:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005558:	2300      	movs	r3, #0
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800555c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	429a      	cmp	r2, r3
 8005562:	d92b      	bls.n	80055bc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4293      	cmp	r3, r2
 8005574:	bf28      	it	cs
 8005576:	4613      	movcs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	4413      	add	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	6939      	ldr	r1, [r7, #16]
 8005588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800558a:	f001 fc21 	bl	8006dd0 <memcpy>
    NumBytesRead += NumBytesRem;
 800558e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	4413      	add	r3, r2
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4413      	add	r3, r2
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d101      	bne.n	80055bc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80055b8:	2300      	movs	r3, #0
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bf28      	it	cs
 80055cc:	4613      	movcs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d019      	beq.n	800560a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	4413      	add	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055e6:	f001 fbf3 	bl	8006dd0 <memcpy>
    NumBytesRead += NumBytesRem;
 80055ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4413      	add	r3, r2
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	4413      	add	r3, r2
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005614:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005618:	4618      	mov	r0, r3
 800561a:	3730      	adds	r7, #48	; 0x30
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20012ed8 	.word	0x20012ed8

08005624 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	3360      	adds	r3, #96	; 0x60
 8005640:	4a1f      	ldr	r2, [pc, #124]	; (80056c0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005642:	4413      	add	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d029      	beq.n	80056a2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800564e:	2b02      	cmp	r3, #2
 8005650:	d82e      	bhi.n	80056b0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005656:	2b01      	cmp	r3, #1
 8005658:	d013      	beq.n	8005682 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800565a:	e029      	b.n	80056b0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800565c:	6978      	ldr	r0, [r7, #20]
 800565e:	f7ff feb2 	bl	80053c6 <_GetAvailWriteSpace>
 8005662:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	429a      	cmp	r2, r3
 800566a:	d202      	bcs.n	8005672 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800566c:	2300      	movs	r3, #0
 800566e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005670:	e021      	b.n	80056b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	69b9      	ldr	r1, [r7, #24]
 800567a:	6978      	ldr	r0, [r7, #20]
 800567c:	f7ff fe5b 	bl	8005336 <_WriteNoCheck>
    break;
 8005680:	e019      	b.n	80056b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005682:	6978      	ldr	r0, [r7, #20]
 8005684:	f7ff fe9f 	bl	80053c6 <_GetAvailWriteSpace>
 8005688:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4293      	cmp	r3, r2
 8005690:	bf28      	it	cs
 8005692:	4613      	movcs	r3, r2
 8005694:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	69b9      	ldr	r1, [r7, #24]
 800569a:	6978      	ldr	r0, [r7, #20]
 800569c:	f7ff fe4b 	bl	8005336 <_WriteNoCheck>
    break;
 80056a0:	e009      	b.n	80056b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	69b9      	ldr	r1, [r7, #24]
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f7ff fde8 	bl	800527c <_WriteBlocking>
 80056ac:	61f8      	str	r0, [r7, #28]
    break;
 80056ae:	e002      	b.n	80056b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
    break;
 80056b4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80056b6:	69fb      	ldr	r3, [r7, #28]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20012ed8 	.word	0x20012ed8

080056c4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80056d0:	4b0e      	ldr	r3, [pc, #56]	; (800570c <SEGGER_RTT_WriteDownBuffer+0x48>)
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80056de:	f7ff fd73 	bl	80051c8 <_DoInit>
  SEGGER_RTT_LOCK();
 80056e2:	f3ef 8311 	mrs	r3, BASEPRI
 80056e6:	f04f 0120 	mov.w	r1, #32
 80056ea:	f381 8811 	msr	BASEPRI, r1
 80056ee:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ff95 	bl	8005624 <SEGGER_RTT_WriteDownBufferNoLock>
 80056fa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005702:	697b      	ldr	r3, [r7, #20]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20012ed8 	.word	0x20012ed8

08005710 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800571e:	4b3d      	ldr	r3, [pc, #244]	; (8005814 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <SEGGER_RTT_AllocUpBuffer+0x20>
 800572c:	f7ff fd4c 	bl	80051c8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005730:	f3ef 8311 	mrs	r3, BASEPRI
 8005734:	f04f 0120 	mov.w	r1, #32
 8005738:	f381 8811 	msr	BASEPRI, r1
 800573c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800573e:	4b35      	ldr	r3, [pc, #212]	; (8005814 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005740:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005746:	6939      	ldr	r1, [r7, #16]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	4613      	mov	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	440b      	add	r3, r1
 8005756:	3304      	adds	r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3301      	adds	r3, #1
 8005762:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	429a      	cmp	r2, r3
 800576c:	dbeb      	blt.n	8005746 <SEGGER_RTT_AllocUpBuffer+0x36>
 800576e:	e000      	b.n	8005772 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005770:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	429a      	cmp	r2, r3
 800577a:	da3f      	bge.n	80057fc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800577c:	6939      	ldr	r1, [r7, #16]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	4613      	mov	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	440b      	add	r3, r1
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005790:	6939      	ldr	r1, [r7, #16]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	4613      	mov	r3, r2
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	4413      	add	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	440b      	add	r3, r1
 80057a0:	3304      	adds	r3, #4
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80057a6:	6939      	ldr	r1, [r7, #16]
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	3320      	adds	r3, #32
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80057ba:	6939      	ldr	r1, [r7, #16]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	3328      	adds	r3, #40	; 0x28
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80057ce:	6939      	ldr	r1, [r7, #16]
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	440b      	add	r3, r1
 80057dc:	3324      	adds	r3, #36	; 0x24
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80057e2:	6939      	ldr	r1, [r7, #16]
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	4613      	mov	r3, r2
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4413      	add	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	440b      	add	r3, r1
 80057f0:	332c      	adds	r3, #44	; 0x2c
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80057f6:	f3bf 8f5f 	dmb	sy
 80057fa:	e002      	b.n	8005802 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005800:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005808:	69fb      	ldr	r3, [r7, #28]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20012ed8 	.word	0x20012ed8

08005818 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005834:	f7ff fcc8 	bl	80051c8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005838:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800583a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d82c      	bhi.n	800589c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005842:	f3ef 8311 	mrs	r3, BASEPRI
 8005846:	f04f 0120 	mov.w	r1, #32
 800584a:	f381 8811 	msr	BASEPRI, r1
 800584e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4613      	mov	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	4413      	add	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	3360      	adds	r3, #96	; 0x60
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800588c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005896:	2300      	movs	r3, #0
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	e002      	b.n	80058a2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800589c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3728      	adds	r7, #40	; 0x28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20012ed8 	.word	0x20012ed8

080058b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00f      	beq.n	80058e6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80058c6:	e002      	b.n	80058ce <_EncodeStr+0x1e>
      Len++;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	3301      	adds	r3, #1
 80058cc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f6      	bne.n	80058c8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d901      	bls.n	80058e6 <_EncodeStr+0x36>
      Len = Limit;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2bfe      	cmp	r3, #254	; 0xfe
 80058ea:	d806      	bhi.n	80058fa <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	60fa      	str	r2, [r7, #12]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e011      	b.n	800591e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	60fa      	str	r2, [r7, #12]
 8005900:	22ff      	movs	r2, #255	; 0xff
 8005902:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	60fa      	str	r2, [r7, #12]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	0a19      	lsrs	r1, r3, #8
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	60fa      	str	r2, [r7, #12]
 800591a:	b2ca      	uxtb	r2, r1
 800591c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005922:	e00a      	b.n	800593a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	1c53      	adds	r3, r2, #1
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	60f9      	str	r1, [r7, #12]
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	701a      	strb	r2, [r3, #0]
    n++;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3301      	adds	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d3f0      	bcc.n	8005924 <_EncodeStr+0x74>
  }
  return pPayload;
 8005942:	68fb      	ldr	r3, [r7, #12]
}
 8005944:	4618      	mov	r0, r3
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3307      	adds	r3, #7
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800596e:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <_HandleIncomingPacket+0xdc>)
 8005970:	7e1b      	ldrb	r3, [r3, #24]
 8005972:	4618      	mov	r0, r3
 8005974:	1cfb      	adds	r3, r7, #3
 8005976:	2201      	movs	r2, #1
 8005978:	4619      	mov	r1, r3
 800597a:	f7ff fdcd 	bl	8005518 <SEGGER_RTT_ReadNoLock>
 800597e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d052      	beq.n	8005a2c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d031      	beq.n	80059f0 <_HandleIncomingPacket+0x88>
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	dc40      	bgt.n	8005a12 <_HandleIncomingPacket+0xaa>
 8005990:	2b07      	cmp	r3, #7
 8005992:	dc15      	bgt.n	80059c0 <_HandleIncomingPacket+0x58>
 8005994:	2b00      	cmp	r3, #0
 8005996:	dd3c      	ble.n	8005a12 <_HandleIncomingPacket+0xaa>
 8005998:	3b01      	subs	r3, #1
 800599a:	2b06      	cmp	r3, #6
 800599c:	d839      	bhi.n	8005a12 <_HandleIncomingPacket+0xaa>
 800599e:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <_HandleIncomingPacket+0x3c>)
 80059a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a4:	080059c7 	.word	0x080059c7
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d3 	.word	0x080059d3
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059df 	.word	0x080059df
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059eb 	.word	0x080059eb
 80059c0:	2b7f      	cmp	r3, #127	; 0x7f
 80059c2:	d035      	beq.n	8005a30 <_HandleIncomingPacket+0xc8>
 80059c4:	e025      	b.n	8005a12 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80059c6:	f000 fc33 	bl	8006230 <SEGGER_SYSVIEW_Start>
      break;
 80059ca:	e036      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80059cc:	f000 fcec 	bl	80063a8 <SEGGER_SYSVIEW_Stop>
      break;
 80059d0:	e033      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80059d2:	f000 fec5 	bl	8006760 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80059d6:	e030      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80059d8:	f000 fe8a 	bl	80066f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80059dc:	e02d      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80059de:	f000 fd09 	bl	80063f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80059e2:	e02a      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80059e4:	f001 f8f8 	bl	8006bd8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80059e8:	e027      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80059ea:	f001 f8d7 	bl	8006b9c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80059ee:	e024      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059f0:	4b14      	ldr	r3, [pc, #80]	; (8005a44 <_HandleIncomingPacket+0xdc>)
 80059f2:	7e1b      	ldrb	r3, [r3, #24]
 80059f4:	4618      	mov	r0, r3
 80059f6:	1cfb      	adds	r3, r7, #3
 80059f8:	2201      	movs	r2, #1
 80059fa:	4619      	mov	r1, r3
 80059fc:	f7ff fd8c 	bl	8005518 <SEGGER_RTT_ReadNoLock>
 8005a00:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d015      	beq.n	8005a34 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f001 f846 	bl	8006a9c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005a10:	e010      	b.n	8005a34 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da0e      	bge.n	8005a38 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <_HandleIncomingPacket+0xdc>)
 8005a1c:	7e1b      	ldrb	r3, [r3, #24]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	1cfb      	adds	r3, r7, #3
 8005a22:	2201      	movs	r2, #1
 8005a24:	4619      	mov	r1, r3
 8005a26:	f7ff fd77 	bl	8005518 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005a2a:	e005      	b.n	8005a38 <_HandleIncomingPacket+0xd0>
    }
  }
 8005a2c:	bf00      	nop
 8005a2e:	e004      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
      break;
 8005a30:	bf00      	nop
 8005a32:	e002      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
      break;
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <_HandleIncomingPacket+0xd2>
      break;
 8005a38:	bf00      	nop
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20014398 	.word	0x20014398

08005a48 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	; 0x30
 8005a4c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005a4e:	2301      	movs	r3, #1
 8005a50:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	3301      	adds	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5c:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a62:	e00b      	b.n	8005a7c <_TrySendOverflowPacket+0x34>
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	09db      	lsrs	r3, r3, #7
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a80:	d8f0      	bhi.n	8005a64 <_TrySendOverflowPacket+0x1c>
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a92:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <_TrySendOverflowPacket+0xe4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a98:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	e00b      	b.n	8005ac4 <_TrySendOverflowPacket+0x7c>
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	1c59      	adds	r1, r3, #1
 8005ab4:	6279      	str	r1, [r7, #36]	; 0x24
 8005ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	09db      	lsrs	r3, r3, #7
 8005ac2:	623b      	str	r3, [r7, #32]
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac8:	d8f0      	bhi.n	8005aac <_TrySendOverflowPacket+0x64>
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	627a      	str	r2, [r7, #36]	; 0x24
 8005ad0:	6a3a      	ldr	r2, [r7, #32]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005ada:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	1d3b      	adds	r3, r7, #4
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	1d3b      	adds	r3, r7, #4
 8005aea:	4619      	mov	r1, r3
 8005aec:	f7fa fb70 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005af0:	4603      	mov	r3, r0
 8005af2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005af4:	f7ff fade 	bl	80050b4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005b04:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e004      	b.n	8005b1c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	3301      	adds	r3, #1
 8005b18:	4a03      	ldr	r2, [pc, #12]	; (8005b28 <_TrySendOverflowPacket+0xe0>)
 8005b1a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005b1c:	693b      	ldr	r3, [r7, #16]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3730      	adds	r7, #48	; 0x30
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20014398 	.word	0x20014398
 8005b2c:	e0001004 	.word	0xe0001004

08005b30 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005b3c:	4b96      	ldr	r3, [pc, #600]	; (8005d98 <_SendPacket+0x268>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d010      	beq.n	8005b66 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005b44:	4b94      	ldr	r3, [pc, #592]	; (8005d98 <_SendPacket+0x268>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8130 	beq.w	8005dae <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005b4e:	4b92      	ldr	r3, [pc, #584]	; (8005d98 <_SendPacket+0x268>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d109      	bne.n	8005b6a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005b56:	f7ff ff77 	bl	8005a48 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005b5a:	4b8f      	ldr	r3, [pc, #572]	; (8005d98 <_SendPacket+0x268>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	f040 8127 	bne.w	8005db2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005b64:	e001      	b.n	8005b6a <_SendPacket+0x3a>
    goto Send;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <_SendPacket+0x3c>
Send:
 8005b6a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b1f      	cmp	r3, #31
 8005b70:	d809      	bhi.n	8005b86 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005b72:	4b89      	ldr	r3, [pc, #548]	; (8005d98 <_SendPacket+0x268>)
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 8118 	bne.w	8005db6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b17      	cmp	r3, #23
 8005b8a:	d807      	bhi.n	8005b9c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e0c4      	b.n	8005d26 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba8:	d912      	bls.n	8005bd0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	09da      	lsrs	r2, r3, #7
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	3a01      	subs	r2, #1
 8005bc2:	60fa      	str	r2, [r7, #12]
 8005bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e006      	b.n	8005bde <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b7e      	cmp	r3, #126	; 0x7e
 8005be2:	d807      	bhi.n	8005bf4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e098      	b.n	8005d26 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfa:	d212      	bcs.n	8005c22 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	09da      	lsrs	r2, r3, #7
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	3a01      	subs	r2, #1
 8005c14:	60fa      	str	r2, [r7, #12]
 8005c16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e081      	b.n	8005d26 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c28:	d21d      	bcs.n	8005c66 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0b9a      	lsrs	r2, r3, #14
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	09db      	lsrs	r3, r3, #7
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	3a01      	subs	r2, #1
 8005c44:	60fa      	str	r2, [r7, #12]
 8005c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	3a01      	subs	r2, #1
 8005c58:	60fa      	str	r2, [r7, #12]
 8005c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e05f      	b.n	8005d26 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6c:	d228      	bcs.n	8005cc0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	0d5a      	lsrs	r2, r3, #21
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0b9b      	lsrs	r3, r3, #14
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	3a01      	subs	r2, #1
 8005c88:	60fa      	str	r2, [r7, #12]
 8005c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	09db      	lsrs	r3, r3, #7
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	3a01      	subs	r2, #1
 8005c9e:	60fa      	str	r2, [r7, #12]
 8005ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	3a01      	subs	r2, #1
 8005cb2:	60fa      	str	r2, [r7, #12]
 8005cb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e032      	b.n	8005d26 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	0f1a      	lsrs	r2, r3, #28
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	0d5b      	lsrs	r3, r3, #21
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	60fa      	str	r2, [r7, #12]
 8005cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0b9b      	lsrs	r3, r3, #14
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	3a01      	subs	r2, #1
 8005cf0:	60fa      	str	r2, [r7, #12]
 8005cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	09db      	lsrs	r3, r3, #7
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	3a01      	subs	r2, #1
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	3a01      	subs	r2, #1
 8005d1a:	60fa      	str	r2, [r7, #12]
 8005d1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <_SendPacket+0x26c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <_SendPacket+0x268>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	e00b      	b.n	8005d58 <_SendPacket+0x228>
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	6279      	str	r1, [r7, #36]	; 0x24
 8005d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	09db      	lsrs	r3, r3, #7
 8005d56:	623b      	str	r3, [r7, #32]
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5c:	d8f0      	bhi.n	8005d40 <_SendPacket+0x210>
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	627a      	str	r2, [r7, #36]	; 0x24
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <_SendPacket+0x268>)
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	4618      	mov	r0, r3
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68f9      	ldr	r1, [r7, #12]
 8005d7e:	f7fa fa27 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d82:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005d84:	f7ff f996 	bl	80050b4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d8e:	4a02      	ldr	r2, [pc, #8]	; (8005d98 <_SendPacket+0x268>)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	60d3      	str	r3, [r2, #12]
 8005d94:	e010      	b.n	8005db8 <_SendPacket+0x288>
 8005d96:	bf00      	nop
 8005d98:	20014398 	.word	0x20014398
 8005d9c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <_SendPacket+0x2d8>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <_SendPacket+0x2d8>)
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e004      	b.n	8005db8 <_SendPacket+0x288>
    goto SendDone;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <_SendPacket+0x288>
      goto SendDone;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <_SendPacket+0x288>
      goto SendDone;
 8005db6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005db8:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <_SendPacket+0x2d8>)
 8005dba:	7e1b      	ldrb	r3, [r3, #24]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <_SendPacket+0x2dc>)
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	440b      	add	r3, r1
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	4413      	add	r3, r2
 8005dca:	336c      	adds	r3, #108	; 0x6c
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <_SendPacket+0x2d8>)
 8005dd0:	7e1b      	ldrb	r3, [r3, #24]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	490d      	ldr	r1, [pc, #52]	; (8005e0c <_SendPacket+0x2dc>)
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4403      	add	r3, r0
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	440b      	add	r3, r1
 8005de0:	3370      	adds	r3, #112	; 0x70
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d00b      	beq.n	8005e00 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <_SendPacket+0x2d8>)
 8005dea:	789b      	ldrb	r3, [r3, #2]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d107      	bne.n	8005e00 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <_SendPacket+0x2d8>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005df6:	f7ff fdb7 	bl	8005968 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005dfa:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <_SendPacket+0x2d8>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005e00:	bf00      	nop
 8005e02:	3728      	adds	r7, #40	; 0x28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20014398 	.word	0x20014398
 8005e0c:	20012ed8 	.word	0x20012ed8

08005e10 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e24:	4917      	ldr	r1, [pc, #92]	; (8005e84 <SEGGER_SYSVIEW_Init+0x74>)
 8005e26:	4818      	ldr	r0, [pc, #96]	; (8005e88 <SEGGER_SYSVIEW_Init+0x78>)
 8005e28:	f7ff fc72 	bl	8005710 <SEGGER_RTT_AllocUpBuffer>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e32:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e34:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e36:	785a      	ldrb	r2, [r3, #1]
 8005e38:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e3a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e3c:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e3e:	7e1b      	ldrb	r3, [r3, #24]
 8005e40:	4618      	mov	r0, r3
 8005e42:	2300      	movs	r3, #0
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2308      	movs	r3, #8
 8005e48:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <SEGGER_SYSVIEW_Init+0x80>)
 8005e4a:	490f      	ldr	r1, [pc, #60]	; (8005e88 <SEGGER_SYSVIEW_Init+0x78>)
 8005e4c:	f7ff fce4 	bl	8005818 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e56:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <SEGGER_SYSVIEW_Init+0x84>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e5c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e5e:	4a0b      	ldr	r2, [pc, #44]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e6a:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e70:	4a06      	ldr	r2, [pc, #24]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20013390 	.word	0x20013390
 8005e88:	08006ee4 	.word	0x08006ee4
 8005e8c:	20014398 	.word	0x20014398
 8005e90:	20014390 	.word	0x20014390
 8005e94:	e0001004 	.word	0xe0001004

08005e98 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ea0:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6113      	str	r3, [r2, #16]
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20014398 	.word	0x20014398

08005eb8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec4:	f04f 0120 	mov.w	r1, #32
 8005ec8:	f381 8811 	msr	BASEPRI, r1
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	4808      	ldr	r0, [pc, #32]	; (8005ef0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ed0:	f7ff fd3e 	bl	8005950 <_PreparePacket>
 8005ed4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68b8      	ldr	r0, [r7, #8]
 8005edc:	f7ff fe28 	bl	8005b30 <_SendPacket>
  RECORD_END();
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f383 8811 	msr	BASEPRI, r3
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200143c8 	.word	0x200143c8

08005ef4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005efe:	f3ef 8311 	mrs	r3, BASEPRI
 8005f02:	f04f 0120 	mov.w	r1, #32
 8005f06:	f381 8811 	msr	BASEPRI, r1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	4816      	ldr	r0, [pc, #88]	; (8005f68 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f0e:	f7ff fd1f 	bl	8005950 <_PreparePacket>
 8005f12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e00b      	b.n	8005f3a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	1c59      	adds	r1, r3, #1
 8005f2a:	61f9      	str	r1, [r7, #28]
 8005f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	09db      	lsrs	r3, r3, #7
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3e:	d8f0      	bhi.n	8005f22 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	61fa      	str	r2, [r7, #28]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	6938      	ldr	r0, [r7, #16]
 8005f56:	f7ff fdeb 	bl	8005b30 <_SendPacket>
  RECORD_END();
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f383 8811 	msr	BASEPRI, r3
}
 8005f60:	bf00      	nop
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	200143c8 	.word	0x200143c8

08005f6c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08c      	sub	sp, #48	; 0x30
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f78:	f3ef 8311 	mrs	r3, BASEPRI
 8005f7c:	f04f 0120 	mov.w	r1, #32
 8005f80:	f381 8811 	msr	BASEPRI, r1
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	4825      	ldr	r0, [pc, #148]	; (800601c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f88:	f7ff fce2 	bl	8005950 <_PreparePacket>
 8005f8c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f9a:	e00b      	b.n	8005fb4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	1c59      	adds	r1, r3, #1
 8005fa4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	09db      	lsrs	r3, r3, #7
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb8:	d8f0      	bhi.n	8005f9c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	623b      	str	r3, [r7, #32]
 8005fd2:	e00b      	b.n	8005fec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	6279      	str	r1, [r7, #36]	; 0x24
 8005fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	09db      	lsrs	r3, r3, #7
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff0:	d8f0      	bhi.n	8005fd4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	6979      	ldr	r1, [r7, #20]
 8006006:	69b8      	ldr	r0, [r7, #24]
 8006008:	f7ff fd92 	bl	8005b30 <_SendPacket>
  RECORD_END();
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f383 8811 	msr	BASEPRI, r3
}
 8006012:	bf00      	nop
 8006014:	3730      	adds	r7, #48	; 0x30
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200143c8 	.word	0x200143c8

08006020 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b08e      	sub	sp, #56	; 0x38
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800602e:	f3ef 8311 	mrs	r3, BASEPRI
 8006032:	f04f 0120 	mov.w	r1, #32
 8006036:	f381 8811 	msr	BASEPRI, r1
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	4832      	ldr	r0, [pc, #200]	; (8006108 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800603e:	f7ff fc87 	bl	8005950 <_PreparePacket>
 8006042:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	633b      	str	r3, [r7, #48]	; 0x30
 8006050:	e00b      	b.n	800606a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	b2da      	uxtb	r2, r3
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	1c59      	adds	r1, r3, #1
 800605a:	6379      	str	r1, [r7, #52]	; 0x34
 800605c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	09db      	lsrs	r3, r3, #7
 8006068:	633b      	str	r3, [r7, #48]	; 0x30
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	2b7f      	cmp	r3, #127	; 0x7f
 800606e:	d8f0      	bhi.n	8006052 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	637a      	str	r2, [r7, #52]	; 0x34
 8006076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	2b7f      	cmp	r3, #127	; 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	e00b      	b.n	80060da <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	6279      	str	r1, [r7, #36]	; 0x24
 80060cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	2b7f      	cmp	r3, #127	; 0x7f
 80060de:	d8f0      	bhi.n	80060c2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	627a      	str	r2, [r7, #36]	; 0x24
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	6979      	ldr	r1, [r7, #20]
 80060f4:	69b8      	ldr	r0, [r7, #24]
 80060f6:	f7ff fd1b 	bl	8005b30 <_SendPacket>
  RECORD_END();
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f383 8811 	msr	BASEPRI, r3
}
 8006100:	bf00      	nop
 8006102:	3738      	adds	r7, #56	; 0x38
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200143c8 	.word	0x200143c8

0800610c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b090      	sub	sp, #64	; 0x40
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800611a:	f3ef 8311 	mrs	r3, BASEPRI
 800611e:	f04f 0120 	mov.w	r1, #32
 8006122:	f381 8811 	msr	BASEPRI, r1
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	4840      	ldr	r0, [pc, #256]	; (800622c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800612a:	f7ff fc11 	bl	8005950 <_PreparePacket>
 800612e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	63bb      	str	r3, [r7, #56]	; 0x38
 800613c:	e00b      	b.n	8006156 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	b2da      	uxtb	r2, r3
 8006142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006144:	1c59      	adds	r1, r3, #1
 8006146:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	09db      	lsrs	r3, r3, #7
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	2b7f      	cmp	r3, #127	; 0x7f
 800615a:	d8f0      	bhi.n	800613e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
 8006174:	e00b      	b.n	800618e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	b2da      	uxtb	r2, r3
 800617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	6379      	str	r1, [r7, #52]	; 0x34
 8006180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	09db      	lsrs	r3, r3, #7
 800618c:	633b      	str	r3, [r7, #48]	; 0x30
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	2b7f      	cmp	r3, #127	; 0x7f
 8006192:	d8f0      	bhi.n	8006176 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	637a      	str	r2, [r7, #52]	; 0x34
 800619a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ac:	e00b      	b.n	80061c6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	1c59      	adds	r1, r3, #1
 80061b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	09db      	lsrs	r3, r3, #7
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ca:	d8f0      	bhi.n	80061ae <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
 80061e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e2:	623b      	str	r3, [r7, #32]
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	6279      	str	r1, [r7, #36]	; 0x24
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	627a      	str	r2, [r7, #36]	; 0x24
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	69b8      	ldr	r0, [r7, #24]
 800621a:	f7ff fc89 	bl	8005b30 <_SendPacket>
  RECORD_END();
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f383 8811 	msr	BASEPRI, r3
}
 8006224:	bf00      	nop
 8006226:	3740      	adds	r7, #64	; 0x40
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	200143c8 	.word	0x200143c8

08006230 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006236:	4b59      	ldr	r3, [pc, #356]	; (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800623c:	f3ef 8311 	mrs	r3, BASEPRI
 8006240:	f04f 0120 	mov.w	r1, #32
 8006244:	f381 8811 	msr	BASEPRI, r1
 8006248:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800624a:	4b54      	ldr	r3, [pc, #336]	; (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	220a      	movs	r2, #10
 8006250:	4953      	ldr	r1, [pc, #332]	; (80063a0 <SEGGER_SYSVIEW_Start+0x170>)
 8006252:	4618      	mov	r0, r3
 8006254:	f7f9 ffbc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800625e:	f7fe ff29 	bl	80050b4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006262:	200a      	movs	r0, #10
 8006264:	f7ff fe28 	bl	8005eb8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006268:	f3ef 8311 	mrs	r3, BASEPRI
 800626c:	f04f 0120 	mov.w	r1, #32
 8006270:	f381 8811 	msr	BASEPRI, r1
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	484b      	ldr	r0, [pc, #300]	; (80063a4 <SEGGER_SYSVIEW_Start+0x174>)
 8006278:	f7ff fb6a 	bl	8005950 <_PreparePacket>
 800627c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006286:	4b45      	ldr	r3, [pc, #276]	; (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_Start+0x76>
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_Start+0x5e>
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
 80062c0:	4b36      	ldr	r3, [pc, #216]	; (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	e00b      	b.n	80062e0 <SEGGER_SYSVIEW_Start+0xb0>
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	6279      	str	r1, [r7, #36]	; 0x24
 80062d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b7f      	cmp	r3, #127	; 0x7f
 80062e4:	d8f0      	bhi.n	80062c8 <SEGGER_SYSVIEW_Start+0x98>
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	627a      	str	r2, [r7, #36]	; 0x24
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	4b28      	ldr	r3, [pc, #160]	; (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_Start+0xea>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	61f9      	str	r1, [r7, #28]
 800630c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b7f      	cmp	r3, #127	; 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_Start+0xd2>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_Start+0x122>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	6179      	str	r1, [r7, #20]
 8006344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_Start+0x10a>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	617a      	str	r2, [r7, #20]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006368:	2218      	movs	r2, #24
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff fbdf 	bl	8005b30 <_SendPacket>
      RECORD_END();
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006386:	f000 f9eb 	bl	8006760 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800638a:	f000 f9b1 	bl	80066f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800638e:	f000 fc23 	bl	8006bd8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006392:	bf00      	nop
 8006394:	3730      	adds	r7, #48	; 0x30
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20014398 	.word	0x20014398
 80063a0:	08006f24 	.word	0x08006f24
 80063a4:	200143c8 	.word	0x200143c8

080063a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063ae:	f3ef 8311 	mrs	r3, BASEPRI
 80063b2:	f04f 0120 	mov.w	r1, #32
 80063b6:	f381 8811 	msr	BASEPRI, r1
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	480b      	ldr	r0, [pc, #44]	; (80063ec <SEGGER_SYSVIEW_Stop+0x44>)
 80063be:	f7ff fac7 	bl	8005950 <_PreparePacket>
 80063c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063cc:	220b      	movs	r2, #11
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6838      	ldr	r0, [r7, #0]
 80063d2:	f7ff fbad 	bl	8005b30 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f383 8811 	msr	BASEPRI, r3
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200143c8 	.word	0x200143c8
 80063f0:	20014398 	.word	0x20014398

080063f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	; 0x30
 80063f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063fa:	f3ef 8311 	mrs	r3, BASEPRI
 80063fe:	f04f 0120 	mov.w	r1, #32
 8006402:	f381 8811 	msr	BASEPRI, r1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	4845      	ldr	r0, [pc, #276]	; (8006520 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800640a:	f7ff faa1 	bl	8005950 <_PreparePacket>
 800640e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006418:	4b42      	ldr	r3, [pc, #264]	; (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
 800641e:	e00b      	b.n	8006438 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	62f9      	str	r1, [r7, #44]	; 0x2c
 800642a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	2b7f      	cmp	r3, #127	; 0x7f
 800643c:	d8f0      	bhi.n	8006420 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
 8006452:	4b34      	ldr	r3, [pc, #208]	; (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	e00b      	b.n	8006472 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	1c59      	adds	r1, r3, #1
 8006462:	6279      	str	r1, [r7, #36]	; 0x24
 8006464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	09db      	lsrs	r3, r3, #7
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	2b7f      	cmp	r3, #127	; 0x7f
 8006476:	d8f0      	bhi.n	800645a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	627a      	str	r2, [r7, #36]	; 0x24
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	4b25      	ldr	r3, [pc, #148]	; (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e00b      	b.n	80064ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	61f9      	str	r1, [r7, #28]
 800649e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	09db      	lsrs	r3, r3, #7
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b7f      	cmp	r3, #127	; 0x7f
 80064b0:	d8f0      	bhi.n	8006494 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	61fa      	str	r2, [r7, #28]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e00b      	b.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	6179      	str	r1, [r7, #20]
 80064d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b7f      	cmp	r3, #127	; 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	617a      	str	r2, [r7, #20]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064fa:	2218      	movs	r2, #24
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68b8      	ldr	r0, [r7, #8]
 8006500:	f7ff fb16 	bl	8005b30 <_SendPacket>
  RECORD_END();
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800650a:	4b06      	ldr	r3, [pc, #24]	; (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006512:	4b04      	ldr	r3, [pc, #16]	; (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	4798      	blx	r3
  }
}
 8006518:	bf00      	nop
 800651a:	3730      	adds	r7, #48	; 0x30
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	200143c8 	.word	0x200143c8
 8006524:	20014398 	.word	0x20014398

08006528 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b092      	sub	sp, #72	; 0x48
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006530:	f3ef 8311 	mrs	r3, BASEPRI
 8006534:	f04f 0120 	mov.w	r1, #32
 8006538:	f381 8811 	msr	BASEPRI, r1
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	486a      	ldr	r0, [pc, #424]	; (80066e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006540:	f7ff fa06 	bl	8005950 <_PreparePacket>
 8006544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	647b      	str	r3, [r7, #68]	; 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b66      	ldr	r3, [pc, #408]	; (80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	643b      	str	r3, [r7, #64]	; 0x40
 800655a:	e00b      	b.n	8006574 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800655c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655e:	b2da      	uxtb	r2, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	6479      	str	r1, [r7, #68]	; 0x44
 8006566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006570:	09db      	lsrs	r3, r3, #7
 8006572:	643b      	str	r3, [r7, #64]	; 0x40
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	2b7f      	cmp	r3, #127	; 0x7f
 8006578:	d8f0      	bhi.n	800655c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800657a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	647a      	str	r2, [r7, #68]	; 0x44
 8006580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	63bb      	str	r3, [r7, #56]	; 0x38
 8006594:	e00b      	b.n	80065ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	b2da      	uxtb	r2, r3
 800659a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	09db      	lsrs	r3, r3, #7
 80065ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	2b7f      	cmp	r3, #127	; 0x7f
 80065b2:	d8f0      	bhi.n	8006596 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff f96f 	bl	80058b0 <_EncodeStr>
 80065d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065d4:	2209      	movs	r2, #9
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f7ff faa9 	bl	8005b30 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b40      	ldr	r3, [pc, #256]	; (80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	633b      	str	r3, [r7, #48]	; 0x30
 80065f2:	e00b      	b.n	800660c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	6379      	str	r1, [r7, #52]	; 0x34
 80065fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	09db      	lsrs	r3, r3, #7
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	2b7f      	cmp	r3, #127	; 0x7f
 8006610:	d8f0      	bhi.n	80065f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	637a      	str	r2, [r7, #52]	; 0x34
 8006618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
 800662c:	e00b      	b.n	8006646 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	09db      	lsrs	r3, r3, #7
 8006644:	62bb      	str	r3, [r7, #40]	; 0x28
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	2b7f      	cmp	r3, #127	; 0x7f
 800664a:	d8f0      	bhi.n	800662e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	e00b      	b.n	8006680 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	1c59      	adds	r1, r3, #1
 8006670:	6279      	str	r1, [r7, #36]	; 0x24
 8006672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	09db      	lsrs	r3, r3, #7
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	2b7f      	cmp	r3, #127	; 0x7f
 8006684:	d8f0      	bhi.n	8006668 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	627a      	str	r2, [r7, #36]	; 0x24
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	e00b      	b.n	80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	61f9      	str	r1, [r7, #28]
 80066aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	09db      	lsrs	r3, r3, #7
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b7f      	cmp	r3, #127	; 0x7f
 80066bc:	d8f0      	bhi.n	80066a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	61fa      	str	r2, [r7, #28]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066ce:	2215      	movs	r2, #21
 80066d0:	68f9      	ldr	r1, [r7, #12]
 80066d2:	6938      	ldr	r0, [r7, #16]
 80066d4:	f7ff fa2c 	bl	8005b30 <_SendPacket>
  RECORD_END();
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bf00      	nop
 80066e0:	3748      	adds	r7, #72	; 0x48
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200143c8 	.word	0x200143c8
 80066ec:	20014398 	.word	0x20014398

080066f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006706:	4b03      	ldr	r3, [pc, #12]	; (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4798      	blx	r3
  }
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20014398 	.word	0x20014398

08006718 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006720:	f3ef 8311 	mrs	r3, BASEPRI
 8006724:	f04f 0120 	mov.w	r1, #32
 8006728:	f381 8811 	msr	BASEPRI, r1
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	480b      	ldr	r0, [pc, #44]	; (800675c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006730:	f7ff f90e 	bl	8005950 <_PreparePacket>
 8006734:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006736:	2280      	movs	r2, #128	; 0x80
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	6938      	ldr	r0, [r7, #16]
 800673c:	f7ff f8b8 	bl	80058b0 <_EncodeStr>
 8006740:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006742:	220e      	movs	r2, #14
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f7ff f9f2 	bl	8005b30 <_SendPacket>
  RECORD_END();
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f383 8811 	msr	BASEPRI, r3
}
 8006752:	bf00      	nop
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200143c8 	.word	0x200143c8

08006760 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006766:	4b15      	ldr	r3, [pc, #84]	; (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01a      	beq.n	80067a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006778:	4b10      	ldr	r3, [pc, #64]	; (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4798      	blx	r3
 8006780:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006784:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	000a      	movs	r2, r1
 8006794:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006796:	4613      	mov	r3, r2
 8006798:	461a      	mov	r2, r3
 800679a:	4621      	mov	r1, r4
 800679c:	200d      	movs	r0, #13
 800679e:	f7ff fbe5 	bl	8005f6c <SEGGER_SYSVIEW_RecordU32x2>
 80067a2:	e006      	b.n	80067b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	200c      	movs	r0, #12
 80067ac:	f7ff fba2 	bl	8005ef4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd90      	pop	{r4, r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20014398 	.word	0x20014398
 80067c0:	e0001004 	.word	0xe0001004

080067c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067ca:	f3ef 8311 	mrs	r3, BASEPRI
 80067ce:	f04f 0120 	mov.w	r1, #32
 80067d2:	f381 8811 	msr	BASEPRI, r1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	4819      	ldr	r0, [pc, #100]	; (8006840 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80067da:	f7ff f8b9 	bl	8005950 <_PreparePacket>
 80067de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80067e4:	4b17      	ldr	r3, [pc, #92]	; (8006844 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e00b      	b.n	8006810 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	6179      	str	r1, [r7, #20]
 8006802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b7f      	cmp	r3, #127	; 0x7f
 8006814:	d8f0      	bhi.n	80067f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	617a      	str	r2, [r7, #20]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006826:	2202      	movs	r2, #2
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	68b8      	ldr	r0, [r7, #8]
 800682c:	f7ff f980 	bl	8005b30 <_SendPacket>
  RECORD_END();
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f383 8811 	msr	BASEPRI, r3
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200143c8 	.word	0x200143c8
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800684e:	f3ef 8311 	mrs	r3, BASEPRI
 8006852:	f04f 0120 	mov.w	r1, #32
 8006856:	f381 8811 	msr	BASEPRI, r1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	4807      	ldr	r0, [pc, #28]	; (800687c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800685e:	f7ff f877 	bl	8005950 <_PreparePacket>
 8006862:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006864:	2203      	movs	r2, #3
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6838      	ldr	r0, [r7, #0]
 800686a:	f7ff f961 	bl	8005b30 <_SendPacket>
  RECORD_END();
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f383 8811 	msr	BASEPRI, r3
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200143c8 	.word	0x200143c8

08006880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006886:	f3ef 8311 	mrs	r3, BASEPRI
 800688a:	f04f 0120 	mov.w	r1, #32
 800688e:	f381 8811 	msr	BASEPRI, r1
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	4807      	ldr	r0, [pc, #28]	; (80068b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006896:	f7ff f85b 	bl	8005950 <_PreparePacket>
 800689a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800689c:	2212      	movs	r2, #18
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f7ff f945 	bl	8005b30 <_SendPacket>
  RECORD_END();
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200143c8 	.word	0x200143c8

080068b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068be:	f3ef 8311 	mrs	r3, BASEPRI
 80068c2:	f04f 0120 	mov.w	r1, #32
 80068c6:	f381 8811 	msr	BASEPRI, r1
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	4807      	ldr	r0, [pc, #28]	; (80068ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80068ce:	f7ff f83f 	bl	8005950 <_PreparePacket>
 80068d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80068d4:	2211      	movs	r2, #17
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	f7ff f929 	bl	8005b30 <_SendPacket>
  RECORD_END();
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f383 8811 	msr	BASEPRI, r3
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200143c8 	.word	0x200143c8

080068f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068f8:	f3ef 8311 	mrs	r3, BASEPRI
 80068fc:	f04f 0120 	mov.w	r1, #32
 8006900:	f381 8811 	msr	BASEPRI, r1
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	4819      	ldr	r0, [pc, #100]	; (800696c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006908:	f7ff f822 	bl	8005950 <_PreparePacket>
 800690c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006912:	4b17      	ldr	r3, [pc, #92]	; (8006970 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e00b      	b.n	800693e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	61f9      	str	r1, [r7, #28]
 8006930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	09db      	lsrs	r3, r3, #7
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b7f      	cmp	r3, #127	; 0x7f
 8006942:	d8f0      	bhi.n	8006926 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	61fa      	str	r2, [r7, #28]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006954:	2208      	movs	r2, #8
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6938      	ldr	r0, [r7, #16]
 800695a:	f7ff f8e9 	bl	8005b30 <_SendPacket>
  RECORD_END();
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f383 8811 	msr	BASEPRI, r3
}
 8006964:	bf00      	nop
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200143c8 	.word	0x200143c8
 8006970:	20014398 	.word	0x20014398

08006974 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
 8006980:	f04f 0120 	mov.w	r1, #32
 8006984:	f381 8811 	msr	BASEPRI, r1
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	4819      	ldr	r0, [pc, #100]	; (80069f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800698c:	f7fe ffe0 	bl	8005950 <_PreparePacket>
 8006990:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006996:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e00b      	b.n	80069c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	61f9      	str	r1, [r7, #28]
 80069b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	09db      	lsrs	r3, r3, #7
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b7f      	cmp	r3, #127	; 0x7f
 80069c6:	d8f0      	bhi.n	80069aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80069d8:	2204      	movs	r2, #4
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6938      	ldr	r0, [r7, #16]
 80069de:	f7ff f8a7 	bl	8005b30 <_SendPacket>
  RECORD_END();
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f383 8811 	msr	BASEPRI, r3
}
 80069e8:	bf00      	nop
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200143c8 	.word	0x200143c8
 80069f4:	20014398 	.word	0x20014398

080069f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a00:	f3ef 8311 	mrs	r3, BASEPRI
 8006a04:	f04f 0120 	mov.w	r1, #32
 8006a08:	f381 8811 	msr	BASEPRI, r1
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	4819      	ldr	r0, [pc, #100]	; (8006a74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a10:	f7fe ff9e 	bl	8005950 <_PreparePacket>
 8006a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a1a:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e00b      	b.n	8006a46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1c59      	adds	r1, r3, #1
 8006a36:	61f9      	str	r1, [r7, #28]
 8006a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	09db      	lsrs	r3, r3, #7
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b7f      	cmp	r3, #127	; 0x7f
 8006a4a:	d8f0      	bhi.n	8006a2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	61fa      	str	r2, [r7, #28]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a5c:	2206      	movs	r2, #6
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	6938      	ldr	r0, [r7, #16]
 8006a62:	f7ff f865 	bl	8005b30 <_SendPacket>
  RECORD_END();
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f383 8811 	msr	BASEPRI, r3
}
 8006a6c:	bf00      	nop
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	200143c8 	.word	0x200143c8
 8006a78:	20014398 	.word	0x20014398

08006a7c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	1ad3      	subs	r3, r2, r3
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	20014398 	.word	0x20014398

08006a9c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08c      	sub	sp, #48	; 0x30
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d06d      	beq.n	8006b8a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006aae:	4b39      	ldr	r3, [pc, #228]	; (8006b94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab8:	e008      	b.n	8006acc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	3301      	adds	r3, #1
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d3f2      	bcc.n	8006aba <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ad4:	e000      	b.n	8006ad8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ad6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d055      	beq.n	8006b8a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ade:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae2:	f04f 0120 	mov.w	r1, #32
 8006ae6:	f381 8811 	msr	BASEPRI, r1
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	482a      	ldr	r0, [pc, #168]	; (8006b98 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006aee:	f7fe ff2f 	bl	8005950 <_PreparePacket>
 8006af2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	e00b      	b.n	8006b1a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	1c59      	adds	r1, r3, #1
 8006b0a:	6279      	str	r1, [r7, #36]	; 0x24
 8006b0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	09db      	lsrs	r3, r3, #7
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1e:	d8f0      	bhi.n	8006b02 <SEGGER_SYSVIEW_SendModule+0x66>
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	627a      	str	r2, [r7, #36]	; 0x24
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	e00b      	b.n	8006b54 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	1c59      	adds	r1, r3, #1
 8006b44:	61f9      	str	r1, [r7, #28]
 8006b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	09db      	lsrs	r3, r3, #7
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b7f      	cmp	r3, #127	; 0x7f
 8006b58:	d8f0      	bhi.n	8006b3c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	61fa      	str	r2, [r7, #28]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2280      	movs	r2, #128	; 0x80
 8006b70:	4619      	mov	r1, r3
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7fe fe9c 	bl	80058b0 <_EncodeStr>
 8006b78:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b7a:	2216      	movs	r2, #22
 8006b7c:	68f9      	ldr	r1, [r7, #12]
 8006b7e:	6938      	ldr	r0, [r7, #16]
 8006b80:	f7fe ffd6 	bl	8005b30 <_SendPacket>
      RECORD_END();
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3730      	adds	r7, #48	; 0x30
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200143c0 	.word	0x200143c0
 8006b98:	200143c8 	.word	0x200143c8

08006b9c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00f      	beq.n	8006bca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f2      	bne.n	8006bb0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200143c0 	.word	0x200143c0

08006bd8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006bde:	f3ef 8311 	mrs	r3, BASEPRI
 8006be2:	f04f 0120 	mov.w	r1, #32
 8006be6:	f381 8811 	msr	BASEPRI, r1
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	4817      	ldr	r0, [pc, #92]	; (8006c4c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006bee:	f7fe feaf 	bl	8005950 <_PreparePacket>
 8006bf2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	e00b      	b.n	8006c1c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	6179      	str	r1, [r7, #20]
 8006c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	09db      	lsrs	r3, r3, #7
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c20:	d8f0      	bhi.n	8006c04 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	617a      	str	r2, [r7, #20]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c32:	221b      	movs	r2, #27
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	68b8      	ldr	r0, [r7, #8]
 8006c38:	f7fe ff7a 	bl	8005b30 <_SendPacket>
  RECORD_END();
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f383 8811 	msr	BASEPRI, r3
}
 8006c42:	bf00      	nop
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200143c8 	.word	0x200143c8
 8006c50:	200143c4 	.word	0x200143c4

08006c54 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c60:	f04f 0120 	mov.w	r1, #32
 8006c64:	f381 8811 	msr	BASEPRI, r1
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	4827      	ldr	r0, [pc, #156]	; (8006d08 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c6c:	f7fe fe70 	bl	8005950 <_PreparePacket>
 8006c70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c72:	2280      	movs	r2, #128	; 0x80
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	6938      	ldr	r0, [r7, #16]
 8006c78:	f7fe fe1a 	bl	80058b0 <_EncodeStr>
 8006c7c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
 8006c82:	2301      	movs	r3, #1
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	e00b      	b.n	8006ca0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	6279      	str	r1, [r7, #36]	; 0x24
 8006c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	09db      	lsrs	r3, r3, #7
 8006c9e:	623b      	str	r3, [r7, #32]
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca4:	d8f0      	bhi.n	8006c88 <SEGGER_SYSVIEW_Warn+0x34>
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	627a      	str	r2, [r7, #36]	; 0x24
 8006cac:	6a3a      	ldr	r2, [r7, #32]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e00b      	b.n	8006cd8 <SEGGER_SYSVIEW_Warn+0x84>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	61f9      	str	r1, [r7, #28]
 8006cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	09db      	lsrs	r3, r3, #7
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b7f      	cmp	r3, #127	; 0x7f
 8006cdc:	d8f0      	bhi.n	8006cc0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	61fa      	str	r2, [r7, #28]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006cee:	221a      	movs	r2, #26
 8006cf0:	68f9      	ldr	r1, [r7, #12]
 8006cf2:	6938      	ldr	r0, [r7, #16]
 8006cf4:	f7fe ff1c 	bl	8005b30 <_SendPacket>
  RECORD_END();
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f383 8811 	msr	BASEPRI, r3
}
 8006cfe:	bf00      	nop
 8006d00:	3728      	adds	r7, #40	; 0x28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	200143c8 	.word	0x200143c8

08006d0c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006d10:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006d12:	7e1b      	ldrb	r3, [r3, #24]
 8006d14:	4619      	mov	r1, r3
 8006d16:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006d18:	460b      	mov	r3, r1
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	440b      	add	r3, r1
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	4413      	add	r3, r2
 8006d22:	336c      	adds	r3, #108	; 0x6c
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b0e      	ldr	r3, [pc, #56]	; (8006d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006d28:	7e1b      	ldrb	r3, [r3, #24]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	490d      	ldr	r1, [pc, #52]	; (8006d64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006d2e:	4603      	mov	r3, r0
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4403      	add	r3, r0
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	440b      	add	r3, r1
 8006d38:	3370      	adds	r3, #112	; 0x70
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d00b      	beq.n	8006d58 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006d42:	789b      	ldrb	r3, [r3, #2]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d107      	bne.n	8006d58 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006d4e:	f7fe fe0b 	bl	8005968 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006d52:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006d58:	4b01      	ldr	r3, [pc, #4]	; (8006d60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20014398 	.word	0x20014398
 8006d64:	20012ed8 	.word	0x20012ed8

08006d68 <__libc_init_array>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4d0d      	ldr	r5, [pc, #52]	; (8006da0 <__libc_init_array+0x38>)
 8006d6c:	4c0d      	ldr	r4, [pc, #52]	; (8006da4 <__libc_init_array+0x3c>)
 8006d6e:	1b64      	subs	r4, r4, r5
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	2600      	movs	r6, #0
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	d109      	bne.n	8006d8c <__libc_init_array+0x24>
 8006d78:	4d0b      	ldr	r5, [pc, #44]	; (8006da8 <__libc_init_array+0x40>)
 8006d7a:	4c0c      	ldr	r4, [pc, #48]	; (8006dac <__libc_init_array+0x44>)
 8006d7c:	f000 f83e 	bl	8006dfc <_init>
 8006d80:	1b64      	subs	r4, r4, r5
 8006d82:	10a4      	asrs	r4, r4, #2
 8006d84:	2600      	movs	r6, #0
 8006d86:	42a6      	cmp	r6, r4
 8006d88:	d105      	bne.n	8006d96 <__libc_init_array+0x2e>
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d90:	4798      	blx	r3
 8006d92:	3601      	adds	r6, #1
 8006d94:	e7ee      	b.n	8006d74 <__libc_init_array+0xc>
 8006d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9a:	4798      	blx	r3
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	e7f2      	b.n	8006d86 <__libc_init_array+0x1e>
 8006da0:	08006f38 	.word	0x08006f38
 8006da4:	08006f38 	.word	0x08006f38
 8006da8:	08006f38 	.word	0x08006f38
 8006dac:	08006f3c 	.word	0x08006f3c

08006db0 <memcmp>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	3901      	subs	r1, #1
 8006db4:	4402      	add	r2, r0
 8006db6:	4290      	cmp	r0, r2
 8006db8:	d101      	bne.n	8006dbe <memcmp+0xe>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e005      	b.n	8006dca <memcmp+0x1a>
 8006dbe:	7803      	ldrb	r3, [r0, #0]
 8006dc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	d001      	beq.n	8006dcc <memcmp+0x1c>
 8006dc8:	1b18      	subs	r0, r3, r4
 8006dca:	bd10      	pop	{r4, pc}
 8006dcc:	3001      	adds	r0, #1
 8006dce:	e7f2      	b.n	8006db6 <memcmp+0x6>

08006dd0 <memcpy>:
 8006dd0:	440a      	add	r2, r1
 8006dd2:	4291      	cmp	r1, r2
 8006dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006dd8:	d100      	bne.n	8006ddc <memcpy+0xc>
 8006dda:	4770      	bx	lr
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de6:	4291      	cmp	r1, r2
 8006de8:	d1f9      	bne.n	8006dde <memcpy+0xe>
 8006dea:	bd10      	pop	{r4, pc}

08006dec <memset>:
 8006dec:	4402      	add	r2, r0
 8006dee:	4603      	mov	r3, r0
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d100      	bne.n	8006df6 <memset+0xa>
 8006df4:	4770      	bx	lr
 8006df6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfa:	e7f9      	b.n	8006df0 <memset+0x4>

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
