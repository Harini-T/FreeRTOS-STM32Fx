
006LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f2c  08007f2c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f34  08007f34  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f34  08007f34  00017f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144a0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144bc  200144bc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015729  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003048  00000000  00000000  00035775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  000387c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  00039b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231f0  00000000  00000000  0003ad68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161f5  00000000  00000000  0005df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7ef6  00000000  00000000  0007414d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c043  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051d8  00000000  00000000  0014c094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d3c 	.word	0x08007d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007d3c 	.word	0x08007d3c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee8 	.word	0x20012ee8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc7d 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f897 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ff 	bl	8000778 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	483b      	ldr	r0, [pc, #236]	; (8000668 <main+0x100>)
 800057c:	f005 f882 	bl	8005684 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b3a      	ldr	r3, [pc, #232]	; (800066c <main+0x104>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a39      	ldr	r2, [pc, #228]	; (800066c <main+0x104>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 fde8 	bl	8005160 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <main+0x108>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4935      	ldr	r1, [pc, #212]	; (8000674 <main+0x10c>)
 800059e:	4836      	ldr	r0, [pc, #216]	; (8000678 <main+0x110>)
 80005a0:	f002 fadc 	bl	8002b5c <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>

  next_task_handle = ledg_task_handle;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <main+0x108>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	; (800067c <main+0x114>)
 80005c8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0x118>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	492b      	ldr	r1, [pc, #172]	; (8000684 <main+0x11c>)
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <main+0x120>)
 80005da:	f002 fabf 	bl	8002b5c <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x94>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x92>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0x124>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	4921      	ldr	r1, [pc, #132]	; (8000690 <main+0x128>)
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <main+0x12c>)
 800060c:	f002 faa6 	bl	8002b5c <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xc6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60bb      	str	r3, [r7, #8]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xc4>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <main+0x130>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	4918      	ldr	r1, [pc, #96]	; (800069c <main+0x134>)
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <main+0x138>)
 800063e:	f002 fa8d 	bl	8002b5c <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xf8>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xf6>



  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000660:	f002 fcea 	bl	8003038 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0xfc>
 8000666:	bf00      	nop
 8000668:	0007a120 	.word	0x0007a120
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000038 	.word	0x20000038
 8000674:	08007d54 	.word	0x08007d54
 8000678:	08000a85 	.word	0x08000a85
 800067c:	20000048 	.word	0x20000048
 8000680:	2000003c 	.word	0x2000003c
 8000684:	08007d64 	.word	0x08007d64
 8000688:	08000af5 	.word	0x08000af5
 800068c:	20000040 	.word	0x20000040
 8000690:	08007d74 	.word	0x08007d74
 8000694:	08000b65 	.word	0x08000b65
 8000698:	20000044 	.word	0x20000044
 800069c:	08007d84 	.word	0x08007d84
 80006a0:	08000bd5 	.word	0x08000bd5

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 fb3a 	bl	8007d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000718:	2332      	movs	r3, #50	; 0x32
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071c:	2304      	movs	r3, #4
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fecf 	bl	80014cc <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 fa88 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f930 	bl	80019bc <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 fa71 	bl	8000c48 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4ba2      	ldr	r3, [pc, #648]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa1      	ldr	r2, [pc, #644]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9f      	ldr	r3, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a9a      	ldr	r2, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a85      	ldr	r2, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4879      	ldr	r0, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 fdee 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fde9 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4875      	ldr	r0, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 8000852:	f000 fde3 	bl	800141c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	486c      	ldr	r0, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800086e:	f000 fc21 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4866      	ldr	r0, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800088a:	f000 fc13 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	485e      	ldr	r0, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fc03 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fbf6 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4852      	ldr	r0, [pc, #328]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fbe6 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e8:	23e0      	movs	r3, #224	; 0xe0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fbd6 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4845      	ldr	r0, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800091c:	f000 fbca 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 fbb9 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000946:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 fbaa 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000960:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000972:	2306      	movs	r3, #6
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800097e:	f000 fb99 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000998:	f000 fb8c 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800099c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ae:	230a      	movs	r3, #10
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 fb7b 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 80009d2:	f000 fb6f 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 80009f4:	f000 fb5e 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000a0e:	f000 fb51 	bl	80010b4 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
	traceISR_ENTER();
 8000a3e:	f006 fe4d 	bl	80076dc <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction,&pxHigherPriorityTaskWoken);
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <button_interrupt_handler+0x48>)
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 fa5e 	bl	8003f14 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <button_interrupt_handler+0x3a>
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <button_interrupt_handler+0x4c>)
 8000a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	f3bf 8f6f 	isb	sy
	traceISR_EXIT();
 8000a6e:	f006 fe77 	bl	8007760 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000048 	.word	0x20000048
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <led_green_handler>:

static void led_green_handler(void* parameters)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a8c:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <led_green_handler+0x5c>)
 8000a8e:	f007 f86d 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <led_green_handler+0x60>)
 8000a98:	f000 fcd9 	bl	800144e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f003 f877 	bl	8003b9c <xTaskGenericNotifyWait>
 8000aae:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d1ea      	bne.n	8000a8c <led_green_handler+0x8>
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 8000ab6:	f004 f84d 	bl	8004b54 <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <led_green_handler+0x64>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <led_green_handler+0x68>)
 8000ac0:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <led_green_handler+0x60>)
 8000aca:	f000 fca7 	bl	800141c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <led_green_handler+0x6c>)
 8000ad0:	f007 f84c 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000ad4:	f004 f86e 	bl	8004bb4 <vPortExitCritical>
			vTaskDelete(NULL);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f002 f9c7 	bl	8002e6c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000ade:	e7d5      	b.n	8000a8c <led_green_handler+0x8>
 8000ae0:	08007d90 	.word	0x08007d90
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	2000003c 	.word	0x2000003c
 8000aec:	20000048 	.word	0x20000048
 8000af0:	08007da4 	.word	0x08007da4

08000af4 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <led_orange_handler+0x5c>)
 8000afe:	f007 f835 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <led_orange_handler+0x60>)
 8000b08:	f000 fca1 	bl	800144e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000b0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2300      	movs	r3, #0
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f003 f83f 	bl	8003b9c <xTaskGenericNotifyWait>
 8000b1e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d1ea      	bne.n	8000afc <led_orange_handler+0x8>
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 8000b26:	f004 f815 	bl	8004b54 <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <led_orange_handler+0x64>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <led_orange_handler+0x68>)
 8000b30:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <led_orange_handler+0x60>)
 8000b3a:	f000 fc6f 	bl	800141c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <led_orange_handler+0x6c>)
 8000b40:	f007 f814 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000b44:	f004 f836 	bl	8004bb4 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f002 f98f 	bl	8002e6c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b4e:	e7d5      	b.n	8000afc <led_orange_handler+0x8>
 8000b50:	08007dbc 	.word	0x08007dbc
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	2000003c 	.word	0x2000003c
 8000b5c:	20000048 	.word	0x20000048
 8000b60:	08007dd0 	.word	0x08007dd0

08000b64 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <led_red_handler+0x5c>)
 8000b6e:	f006 fffd 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <led_red_handler+0x60>)
 8000b78:	f000 fc69 	bl	800144e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b7c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f003 f807 	bl	8003b9c <xTaskGenericNotifyWait>
 8000b8e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d1ea      	bne.n	8000b6c <led_red_handler+0x8>
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 8000b96:	f003 ffdd 	bl	8004b54 <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <led_red_handler+0x64>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <led_red_handler+0x68>)
 8000ba0:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba8:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <led_red_handler+0x60>)
 8000baa:	f000 fc37 	bl	800141c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <led_red_handler+0x6c>)
 8000bb0:	f006 ffdc 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000bb4:	f003 fffe 	bl	8004bb4 <vPortExitCritical>
			//vTaskDelete(btn_task_handle);

			vTaskDelete(NULL);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f002 f957 	bl	8002e6c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000bbe:	e7d5      	b.n	8000b6c <led_red_handler+0x8>
 8000bc0:	08007de8 	.word	0x08007de8
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	2000003c 	.word	0x2000003c
 8000bcc:	20000048 	.word	0x20000048
 8000bd0:	08007dfc 	.word	0x08007dfc

08000bd4 <button_handler>:

}


static void button_handler(void* parameters)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000be4:	2101      	movs	r1, #1
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <button_handler+0x48>)
 8000be8:	f000 fc00 	bl	80013ec <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00b      	beq.n	8000c0e <button_handler+0x3a>
		{
			if(! prev_read)
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d108      	bne.n	8000c0e <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <button_handler+0x4c>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f003 f84f 	bl	8003cac <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000c12:	200a      	movs	r0, #10
 8000c14:	f002 f9d8 	bl	8002fc8 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c18:	e7e4      	b.n	8000be4 <button_handler+0x10>
 8000c1a:	bf00      	nop
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	20000048 	.word	0x20000048

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c36:	f000 f93b 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40001000 	.word	0x40001000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c96:	f003 fedf 	bl	8004a58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd4:	f107 0210 	add.w	r2, r7, #16
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f878 	bl	8001dd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d103      	bne.n	8000cf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cee:	f001 f85d 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8000cf2:	6378      	str	r0, [r7, #52]	; 0x34
 8000cf4:	e004      	b.n	8000d00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cf6:	f001 f859 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <HAL_InitTick+0xe8>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	0c9b      	lsrs	r3, r3, #18
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_InitTick+0xec>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <HAL_InitTick+0xf0>)
 8000d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_InitTick+0xec>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <HAL_InitTick+0xec>)
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_InitTick+0xec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_InitTick+0xec>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_InitTick+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d34:	4817      	ldr	r0, [pc, #92]	; (8000d94 <HAL_InitTick+0xec>)
 8000d36:	f001 f87f 	bl	8001e38 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11b      	bne.n	8000d80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <HAL_InitTick+0xec>)
 8000d4a:	f001 f8cf 	bl	8001eec <HAL_TIM_Base_Start_IT>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d5c:	2036      	movs	r0, #54	; 0x36
 8000d5e:	f000 f99b 	bl	8001098 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d808      	bhi.n	8000d7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2036      	movs	r0, #54	; 0x36
 8000d6e:	f000 f977 	bl	8001060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_InitTick+0xf4>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e002      	b.n	8000d80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	2000004c 	.word	0x2000004c
 8000d98:	40001000 	.word	0x40001000
 8000d9c:	20000004 	.word	0x20000004

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000dd0:	f7ff fe30 	bl	8000a34 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
	//clear EXTI 0 pending bit in the exti pending register
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fb55 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <TIM6_DAC_IRQHandler+0x10>)
 8000de6:	f001 f8f1 	bl	8001fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000004c 	.word	0x2000004c

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	; (8000e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e42:	f7ff ffd7 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f006 ff2f 	bl	8007ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb8d 	bl	8000568 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e5c:	08007f3c 	.word	0x08007f3c
  ldr r2, =_sbss
 8000e60:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e64:	200144bc 	.word	0x200144bc

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8d8 	bl	800104a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff ff04 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff feda 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000094 	.word	0x20000094

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000094 	.word	0x20000094

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff4c 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001072:	f7ff ff61 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff ffb1 	bl	8000fe4 <NVIC_EncodePriority>
 8001082:	4602      	mov	r2, r0
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff80 	bl	8000f90 <__NVIC_SetPriority>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff54 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e16b      	b.n	80013a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 815a 	bne.w	80013a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	2b02      	cmp	r3, #2
 8001104:	d130      	bne.n	8001168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 0201 	and.w	r2, r3, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b03      	cmp	r3, #3
 8001172:	d017      	beq.n	80011a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80b4 	beq.w	80013a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a5f      	ldr	r2, [pc, #380]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a5b      	ldr	r2, [pc, #364]	; (80013c4 <HAL_GPIO_Init+0x310>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_GPIO_Init+0x314>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d02b      	beq.n	80012da <HAL_GPIO_Init+0x226>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a51      	ldr	r2, [pc, #324]	; (80013cc <HAL_GPIO_Init+0x318>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x222>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a50      	ldr	r2, [pc, #320]	; (80013d0 <HAL_GPIO_Init+0x31c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x21e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4e      	ldr	r2, [pc, #312]	; (80013d8 <HAL_GPIO_Init+0x324>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x216>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4d      	ldr	r2, [pc, #308]	; (80013dc <HAL_GPIO_Init+0x328>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x212>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4c      	ldr	r2, [pc, #304]	; (80013e0 <HAL_GPIO_Init+0x32c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x20e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <HAL_GPIO_Init+0x330>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x20a>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e00e      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012be:	2308      	movs	r3, #8
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	; (80013c4 <HAL_GPIO_Init+0x310>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_GPIO_Init+0x334>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae90 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e001      	b.n	800140e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001438:	e003      	b.n	8001442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	041a      	lsls	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	619a      	str	r2, [r3, #24]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001460:	887a      	ldrh	r2, [r7, #2]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	041a      	lsls	r2, r3, #16
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43d9      	mvns	r1, r3
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	400b      	ands	r3, r1
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f806 	bl	80014b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e267      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b82      	ldr	r3, [pc, #520]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b7e      	ldr	r3, [pc, #504]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e242      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a75      	ldr	r2, [pc, #468]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b70      	ldr	r3, [pc, #448]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6f      	ldr	r2, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6d      	ldr	r3, [pc, #436]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6c      	ldr	r2, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b69      	ldr	r3, [pc, #420]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a68      	ldr	r2, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b66      	ldr	r3, [pc, #408]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a65      	ldr	r2, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fca8 	bl	8000ed8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fca4 	bl	8000ed8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e207      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fc94 	bl	8000ed8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fc90 	bl	8000ed8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1f3      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1c7      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4937      	ldr	r1, [pc, #220]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_OscConfig+0x244>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fc49 	bl	8000ed8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fc45 	bl	8000ed8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1a8      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4925      	ldr	r1, [pc, #148]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_OscConfig+0x244>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc28 	bl	8000ed8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fc24 	bl	8000ed8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e187      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d036      	beq.n	8001724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_RCC_OscConfig+0x248>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc08 	bl	8000ed8 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc04 	bl	8000ed8 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e167      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
 80016ea:	e01b      	b.n	8001724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x248>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fbf1 	bl	8000ed8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e00e      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fbed 	bl	8000ed8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d907      	bls.n	8001718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e150      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b88      	ldr	r3, [pc, #544]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ea      	bne.n	80016fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8097 	beq.w	8001860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b81      	ldr	r3, [pc, #516]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b7d      	ldr	r3, [pc, #500]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a7c      	ldr	r2, [pc, #496]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b7a      	ldr	r3, [pc, #488]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b74      	ldr	r3, [pc, #464]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a73      	ldr	r2, [pc, #460]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fbad 	bl	8000ed8 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fba9 	bl	8000ed8 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e10c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x2ea>
 80017a8:	4b64      	ldr	r3, [pc, #400]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a63      	ldr	r2, [pc, #396]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x30c>
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	4a5e      	ldr	r2, [pc, #376]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	4a5b      	ldr	r2, [pc, #364]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017d8:	4b58      	ldr	r3, [pc, #352]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a57      	ldr	r2, [pc, #348]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb6e 	bl	8000ed8 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fb6a 	bl	8000ed8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0cb      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0ee      	beq.n	8001800 <HAL_RCC_OscConfig+0x334>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff fb58 	bl	8000ed8 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fb54 	bl	8000ed8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0b5      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ee      	bne.n	800182c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a38      	ldr	r2, [pc, #224]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a1 	beq.w	80019ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d05c      	beq.n	8001930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d141      	bne.n	8001902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCC_OscConfig+0x478>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fb28 	bl	8000ed8 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fb24 	bl	8000ed8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e087      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	491b      	ldr	r1, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x478>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fafd 	bl	8000ed8 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff faf9 	bl	8000ed8 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e05c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x416>
 8001900:	e054      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_RCC_OscConfig+0x478>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fae6 	bl	8000ed8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff fae2 	bl	8000ed8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e045      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x444>
 800192e:	e03d      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e038      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000
 8001944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d121      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800197e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001980:	4293      	cmp	r3, r2
 8001982:	d111      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cc      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90c      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d044      	beq.n	8001adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e067      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fa14 	bl	8000ed8 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff fa10 	bl	8000ed8 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f8a0 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08007ed8 	.word	0x08007ed8
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b8c:	b094      	sub	sp, #80	; 0x50
 8001b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
 8001b94:	2300      	movs	r3, #0
 8001b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b98:	2300      	movs	r3, #0
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba0:	4b79      	ldr	r3, [pc, #484]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d00d      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	f200 80e1 	bhi.w	8001d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x34>
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bba:	e0db      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bc0:	e0db      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc6:	e0d8      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc8:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd2:	4b6d      	ldr	r3, [pc, #436]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	2200      	movs	r2, #0
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001be8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0159      	lsls	r1, r3, #5
 8001c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0c:	0150      	lsls	r0, r2, #5
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4621      	mov	r1, r4
 8001c14:	1a51      	subs	r1, r2, r1
 8001c16:	6139      	str	r1, [r7, #16]
 8001c18:	4629      	mov	r1, r5
 8001c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c2c:	4659      	mov	r1, fp
 8001c2e:	018b      	lsls	r3, r1, #6
 8001c30:	4651      	mov	r1, sl
 8001c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c36:	4651      	mov	r1, sl
 8001c38:	018a      	lsls	r2, r1, #6
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c40:	4659      	mov	r1, fp
 8001c42:	eb63 0901 	sbc.w	r9, r3, r1
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c5a:	4690      	mov	r8, r2
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	eb18 0303 	adds.w	r3, r8, r3
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	462b      	mov	r3, r5
 8001c68:	eb49 0303 	adc.w	r3, r9, r3
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	024b      	lsls	r3, r1, #9
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c84:	4621      	mov	r1, r4
 8001c86:	024a      	lsls	r2, r1, #9
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8e:	2200      	movs	r2, #0
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c98:	f7fe fae4 	bl	8000264 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca4:	e058      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	2200      	movs	r2, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cc0:	4642      	mov	r2, r8
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0159      	lsls	r1, r3, #5
 8001cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd2:	0150      	lsls	r0, r2, #5
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4641      	mov	r1, r8
 8001cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	00eb      	lsls	r3, r5, #3
 8001d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0e:	00e2      	lsls	r2, r4, #3
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	4643      	mov	r3, r8
 8001d16:	18e3      	adds	r3, r4, r3
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	eb45 0303 	adc.w	r3, r5, r3
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	028b      	lsls	r3, r1, #10
 8001d32:	4621      	mov	r1, r4
 8001d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d38:	4621      	mov	r1, r4
 8001d3a:	028a      	lsls	r2, r1, #10
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d42:	2200      	movs	r2, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	61fa      	str	r2, [r7, #28]
 8001d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d4c:	f7fe fa8a 	bl	8000264 <__aeabi_uldivmod>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4613      	mov	r3, r2
 8001d56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d72:	e002      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3750      	adds	r7, #80	; 0x50
 8001d80:	46bd      	mov	sp, r7
 8001d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	007a1200 	.word	0x007a1200

08001d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a9b      	lsrs	r3, r3, #10
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08007ee8 	.word	0x08007ee8

08001dd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	220f      	movs	r2, #15
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_RCC_GetClockConfig+0x60>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0207 	and.w	r2, r3, #7
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	601a      	str	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e041      	b.n	8001ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f839 	bl	8001ed6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f000 f9d8 	bl	800222c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e04e      	b.n	8001fa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d01d      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d018      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00e      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d111      	bne.n	8001f90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d010      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8e:	e007      	b.n	8001fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00
 8001fc0:	40010400 	.word	0x40010400
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40001800 	.word	0x40001800

08001fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0202 	mvn.w	r2, #2
 8001ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8ee 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8e0 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f8f1 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0204 	mvn.w	r2, #4
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8c4 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8b6 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8c7 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0208 	mvn.w	r2, #8
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f89a 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f88c 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f89d 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0210 	mvn.w	r2, #16
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2208      	movs	r2, #8
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f870 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f862 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f873 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0201 	mvn.w	r2, #1
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fd6a 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f902 	bl	8002380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b40      	cmp	r3, #64	; 0x40
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f838 	bl	8002218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0220 	mvn.w	r2, #32
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8cc 	bl	800236c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a40      	ldr	r2, [pc, #256]	; (8002340 <TIM_Base_SetConfig+0x114>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224a:	d00f      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <TIM_Base_SetConfig+0x118>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00b      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <TIM_Base_SetConfig+0x11c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3b      	ldr	r2, [pc, #236]	; (800234c <TIM_Base_SetConfig+0x120>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d003      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3a      	ldr	r2, [pc, #232]	; (8002350 <TIM_Base_SetConfig+0x124>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d108      	bne.n	800227e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <TIM_Base_SetConfig+0x114>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02b      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228c:	d027      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <TIM_Base_SetConfig+0x118>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d023      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <TIM_Base_SetConfig+0x11c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <TIM_Base_SetConfig+0x120>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01b      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a29      	ldr	r2, [pc, #164]	; (8002350 <TIM_Base_SetConfig+0x124>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d017      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <TIM_Base_SetConfig+0x128>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <TIM_Base_SetConfig+0x12c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00f      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <TIM_Base_SetConfig+0x130>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00b      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <TIM_Base_SetConfig+0x134>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <TIM_Base_SetConfig+0x138>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a23      	ldr	r2, [pc, #140]	; (8002368 <TIM_Base_SetConfig+0x13c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d108      	bne.n	80022f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <TIM_Base_SetConfig+0x114>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <TIM_Base_SetConfig+0xf8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <TIM_Base_SetConfig+0x124>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d103      	bne.n	800232c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	615a      	str	r2, [r3, #20]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40010000 	.word	0x40010000
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800
 800234c:	40000c00 	.word	0x40000c00
 8002350:	40010400 	.word	0x40010400
 8002354:	40014000 	.word	0x40014000
 8002358:	40014400 	.word	0x40014400
 800235c:	40014800 	.word	0x40014800
 8002360:	40001800 	.word	0x40001800
 8002364:	40001c00 	.word	0x40001c00
 8002368:	40002000 	.word	0x40002000

0800236c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 0208 	add.w	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f103 0208 	add.w	r2, r3, #8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f103 0208 	add.w	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244c:	d103      	bne.n	8002456 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e00c      	b.n	8002470 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3308      	adds	r3, #8
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e002      	b.n	8002464 <vListInsert+0x2e>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d2f6      	bcs.n	800245e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6892      	ldr	r2, [r2, #8]
 80024be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6852      	ldr	r2, [r2, #4]
 80024c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d103      	bne.n	80024dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1e5a      	subs	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002506:	2301      	movs	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueGenericReset+0x2e>
        __asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	60fb      	str	r3, [r7, #12]
    }
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05d      	beq.n	80025ec <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002534:	2b00      	cmp	r3, #0
 8002536:	d059      	beq.n	80025ec <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	2100      	movs	r1, #0
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d000      	beq.n	800254c <xQueueGenericReset+0x50>
 800254a:	2101      	movs	r1, #1
 800254c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d14c      	bne.n	80025ec <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002552:	f002 faff 	bl	8004b54 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	6939      	ldr	r1, [r7, #16]
 8002560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	441a      	add	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2200      	movs	r2, #0
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	3b01      	subs	r3, #1
 8002584:	6939      	ldr	r1, [r7, #16]
 8002586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	441a      	add	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	22ff      	movs	r2, #255	; 0xff
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d114      	bne.n	80025d2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01a      	beq.n	80025e6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	3310      	adds	r3, #16
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 f8c1 	bl	800373c <xTaskRemoveFromEventList>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d012      	beq.n	80025e6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <xQueueGenericReset+0x11c>)
 80025c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	e009      	b.n	80025e6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	3310      	adds	r3, #16
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fedc 	bl	8002394 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	3324      	adds	r3, #36	; 0x24
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fed7 	bl	8002394 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80025e6:	f002 fae5 	bl	8004bb4 <vPortExitCritical>
 80025ea:	e001      	b.n	80025f0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <xQueueGenericReset+0x110>
        __asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	60bb      	str	r3, [r7, #8]
    }
 8002608:	bf00      	nop
 800260a:	e7fe      	b.n	800260a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800260c:	697b      	ldr	r3, [r7, #20]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000ed04 	.word	0xe000ed04

0800261c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	4613      	mov	r3, r2
 8002628:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02e      	beq.n	8002692 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002634:	2100      	movs	r1, #0
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	fba3 2302 	umull	r2, r3, r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d000      	beq.n	8002644 <xQueueGenericCreate+0x28>
 8002642:	2101      	movs	r1, #1
 8002644:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	d123      	bne.n	8002692 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002652:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002656:	d81c      	bhi.n	8002692 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	3350      	adds	r3, #80	; 0x50
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fba0 	bl	8004dac <pvPortMalloc>
 800266c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01c      	beq.n	80026ae <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3350      	adds	r3, #80	; 0x50
 800267c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f814 	bl	80026b8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002690:	e00d      	b.n	80026ae <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <xQueueGenericCreate+0x92>
        __asm volatile
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	613b      	str	r3, [r7, #16]
    }
 80026aa:	bf00      	nop
 80026ac:	e7fe      	b.n	80026ac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026ae:	69fb      	ldr	r3, [r7, #28]
    }
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026e6:	2101      	movs	r1, #1
 80026e8:	69b8      	ldr	r0, [r7, #24]
 80026ea:	f7ff ff07 	bl	80024fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	2073      	movs	r0, #115	; 0x73
 80026fe:	f004 fb6d 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b08f      	sub	sp, #60	; 0x3c
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <xQueueReceive+0x30>
        __asm volatile
 8002726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	623b      	str	r3, [r7, #32]
    }
 8002738:	bf00      	nop
 800273a:	e7fe      	b.n	800273a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <xQueueReceive+0x3e>
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <xQueueReceive+0x42>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueReceive+0x44>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <xQueueReceive+0x5e>
        __asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61fb      	str	r3, [r7, #28]
    }
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800276a:	f001 f9f9 	bl	8003b60 <xTaskGetSchedulerState>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <xQueueReceive+0x6e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <xQueueReceive+0x72>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <xQueueReceive+0x74>
 800277e:	2300      	movs	r3, #0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <xQueueReceive+0x8e>
        __asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	61bb      	str	r3, [r7, #24]
    }
 8002796:	bf00      	nop
 8002798:	e7fe      	b.n	8002798 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800279a:	f002 f9db 	bl	8004b54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02f      	beq.n	800280a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ae:	f000 f8bd 	bl	800292c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	4618      	mov	r0, r3
 80027b6:	f005 f8ed 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 80027ba:	4604      	mov	r4, r0
 80027bc:	2000      	movs	r0, #0
 80027be:	f005 f8e9 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2101      	movs	r1, #1
 80027c8:	9100      	str	r1, [sp, #0]
 80027ca:	4621      	mov	r1, r4
 80027cc:	205c      	movs	r0, #92	; 0x5c
 80027ce:	f004 fb7b 	bl	8006ec8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00f      	beq.n	8002802 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	3310      	adds	r3, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 ffa8 	bl	800373c <xTaskRemoveFromEventList>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027f2:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <xQueueReceive+0x21c>)
 80027f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002802:	f002 f9d7 	bl	8004bb4 <vPortExitCritical>
                return pdPASS;
 8002806:	2301      	movs	r3, #1
 8002808:	e08a      	b.n	8002920 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d113      	bne.n	8002838 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002810:	f002 f9d0 	bl	8004bb4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	4618      	mov	r0, r3
 8002818:	f005 f8bc 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 800281c:	4604      	mov	r4, r0
 800281e:	2000      	movs	r0, #0
 8002820:	f005 f8b8 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002824:	4602      	mov	r2, r0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2101      	movs	r1, #1
 800282a:	9100      	str	r1, [sp, #0]
 800282c:	4621      	mov	r1, r4
 800282e:	205c      	movs	r0, #92	; 0x5c
 8002830:	f004 fb4a 	bl	8006ec8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002834:	2300      	movs	r3, #0
 8002836:	e073      	b.n	8002920 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f852 	bl	80038ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002848:	2301      	movs	r3, #1
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800284c:	f002 f9b2 	bl	8004bb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002850:	f000 fc54 	bl	80030fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002854:	f002 f97e 	bl	8004b54 <vPortEnterCritical>
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800285e:	b25b      	sxtb	r3, r3
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002864:	d103      	bne.n	800286e <xQueueReceive+0x162>
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002874:	b25b      	sxtb	r3, r3
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287a:	d103      	bne.n	8002884 <xQueueReceive+0x178>
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002884:	f002 f996 	bl	8004bb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002888:	1d3a      	adds	r2, r7, #4
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f001 f841 	bl	8003918 <xTaskCheckForTimeOut>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d124      	bne.n	80028e6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800289c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289e:	f000 f8bd 	bl	8002a1c <prvIsQueueEmpty>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d018      	beq.n	80028da <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	3324      	adds	r3, #36	; 0x24
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fed7 	bl	8003664 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b8:	f000 f85e 	bl	8002978 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028bc:	f000 fc2c 	bl	8003118 <xTaskResumeAll>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f af69 	bne.w	800279a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <xQueueReceive+0x21c>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	e75f      	b.n	800279a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028dc:	f000 f84c 	bl	8002978 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028e0:	f000 fc1a 	bl	8003118 <xTaskResumeAll>
 80028e4:	e759      	b.n	800279a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e8:	f000 f846 	bl	8002978 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028ec:	f000 fc14 	bl	8003118 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f2:	f000 f893 	bl	8002a1c <prvIsQueueEmpty>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f43f af4e 	beq.w	800279a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	4618      	mov	r0, r3
 8002902:	f005 f847 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002906:	4604      	mov	r4, r0
 8002908:	2000      	movs	r0, #0
 800290a:	f005 f843 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2101      	movs	r1, #1
 8002914:	9100      	str	r1, [sp, #0]
 8002916:	4621      	mov	r1, r4
 8002918:	205c      	movs	r0, #92	; 0x5c
 800291a:	f004 fad5 	bl	8006ec8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800291e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002920:	4618      	mov	r0, r3
 8002922:	3734      	adds	r7, #52	; 0x34
 8002924:	46bd      	mov	sp, r7
 8002926:	bd90      	pop	{r4, r7, pc}
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d018      	beq.n	8002970 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	441a      	add	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	d303      	bcc.n	8002960 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68d9      	ldr	r1, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	461a      	mov	r2, r3
 800296a:	6838      	ldr	r0, [r7, #0]
 800296c:	f005 f9d0 	bl	8007d10 <memcpy>
    }
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002980:	f002 f8e8 	bl	8004b54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800298c:	e011      	b.n	80029b2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3324      	adds	r3, #36	; 0x24
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fece 	bl	800373c <xTaskRemoveFromEventList>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80029a6:	f001 f81d 	bl	80039e4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	dce9      	bgt.n	800298e <prvUnlockQueue+0x16>
 80029ba:	e000      	b.n	80029be <prvUnlockQueue+0x46>
                    break;
 80029bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	22ff      	movs	r2, #255	; 0xff
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80029c6:	f002 f8f5 	bl	8004bb4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80029ca:	f002 f8c3 	bl	8004b54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d6:	e011      	b.n	80029fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3310      	adds	r3, #16
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fea9 	bl	800373c <xTaskRemoveFromEventList>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80029f0:	f000 fff8 	bl	80039e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80029f4:	7bbb      	ldrb	r3, [r7, #14]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	dce9      	bgt.n	80029d8 <prvUnlockQueue+0x60>
 8002a04:	e000      	b.n	8002a08 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a06:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	22ff      	movs	r2, #255	; 0xff
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a10:	f002 f8d0 	bl	8004bb4 <vPortExitCritical>
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a24:	f002 f896 	bl	8004b54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e001      	b.n	8002a3a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a3a:	f002 f8bb 	bl	8004bb4 <vPortExitCritical>

    return xReturn;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	60fb      	str	r3, [r7, #12]
    }
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d024      	beq.n	8002ac2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e01e      	b.n	8002abc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <vQueueAddToRegistry+0xa8>)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d105      	bne.n	8002a9a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <vQueueAddToRegistry+0xa8>)
 8002a94:	4413      	add	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
                    break;
 8002a98:	e013      	b.n	8002ac2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <vQueueAddToRegistry+0x6e>
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <vQueueAddToRegistry+0xa8>)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <vQueueAddToRegistry+0xa8>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b07      	cmp	r3, #7
 8002ac0:	d9dd      	bls.n	8002a7e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00f      	beq.n	8002ae8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 ff5c 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002adc:	4601      	mov	r1, r0
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2071      	movs	r0, #113	; 0x71
 8002ae4:	f004 f920 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000098 	.word	0x20000098

08002af4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b04:	f002 f826 	bl	8004b54 <vPortEnterCritical>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b14:	d103      	bne.n	8002b1e <vQueueWaitForMessageRestricted+0x2a>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2a:	d103      	bne.n	8002b34 <vQueueWaitForMessageRestricted+0x40>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b34:	f002 f83e 	bl	8004bb4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3324      	adds	r3, #36	; 0x24
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fdaf 	bl	80036ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff12 	bl	8002978 <prvUnlockQueue>
    }
 8002b54:	bf00      	nop
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af04      	add	r7, sp, #16
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f002 f91b 	bl	8004dac <pvPortMalloc>
 8002b76:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b7e:	2058      	movs	r0, #88	; 0x58
 8002b80:	f002 f914 	bl	8004dac <pvPortMalloc>
 8002b84:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b8c:	2258      	movs	r2, #88	; 0x58
 8002b8e:	2100      	movs	r1, #0
 8002b90:	69f8      	ldr	r0, [r7, #28]
 8002b92:	f005 f8cb 	bl	8007d2c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9c:	e005      	b.n	8002baa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f002 f9be 	bl	8004f20 <vPortFree>
 8002ba4:	e001      	b.n	8002baa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9303      	str	r3, [sp, #12]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f80e 	bl	8002be8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bcc:	69f8      	ldr	r0, [r7, #28]
 8002bce:	f000 f899 	bl	8002d04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	e002      	b.n	8002bde <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bdc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bde:	69bb      	ldr	r3, [r7, #24]
    }
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	21a5      	movs	r1, #165	; 0xa5
 8002c02:	f005 f893 	bl	8007d2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c10:	3b01      	subs	r3, #1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	617b      	str	r3, [r7, #20]
    }
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01e      	beq.n	8002c84 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e012      	b.n	8002c72 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	7819      	ldrb	r1, [r3, #0]
 8002c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	3334      	adds	r3, #52	; 0x34
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b09      	cmp	r3, #9
 8002c76:	d9e9      	bls.n	8002c4c <prvInitialiseNewTask+0x64>
 8002c78:	e000      	b.n	8002c7c <prvInitialiseNewTask+0x94>
            {
                break;
 8002c7a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d90a      	bls.n	8002ca0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	613b      	str	r3, [r7, #16]
    }
 8002c9c:	bf00      	nop
 8002c9e:	e7fe      	b.n	8002c9e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d901      	bls.n	8002caa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	3304      	adds	r3, #4
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fb8a 	bl	80023d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fb85 	bl	80023d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	f1c3 0205 	rsb	r2, r3, #5
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	69b8      	ldr	r0, [r7, #24]
 8002ce6:	f001 fd87 	bl	80047f8 <pxPortInitialiseStack>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d0c:	f001 ff22 	bl	8004b54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d10:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <prvAddNewTaskToReadyList+0x14c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <prvAddNewTaskToReadyList+0x14c>)
 8002d18:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d22:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <prvAddNewTaskToReadyList+0x14c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d110      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d30:	f000 fe7c 	bl	8003a2c <prvInitialiseTaskLists>
 8002d34:	e00d      	b.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d36:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <prvAddNewTaskToReadyList+0x154>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d3e:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d802      	bhi.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d4c:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <prvAddNewTaskToReadyList+0x158>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <prvAddNewTaskToReadyList+0x158>)
 8002d5a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <prvAddNewTaskToReadyList+0x158>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <prvAddNewTaskToReadyList+0x94>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fd4b 	bl	8007808 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	461d      	mov	r5, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461c      	mov	r4, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	1ae3      	subs	r3, r4, r3
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	462b      	mov	r3, r5
 8002d94:	f002 fa86 	bl	80052a4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fdb8 	bl	8007910 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	2201      	movs	r2, #1
 8002da6:	409a      	lsls	r2, r3
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <prvAddNewTaskToReadyList+0x15c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <prvAddNewTaskToReadyList+0x15c>)
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	492b      	ldr	r1, [pc, #172]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	3204      	adds	r2, #4
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1d1a      	adds	r2, r3, #4
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002df6:	441a      	add	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4918      	ldr	r1, [pc, #96]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	4814      	ldr	r0, [pc, #80]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4403      	add	r3, r0
 8002e1c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e1e:	f001 fec9 	bl	8004bb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <prvAddNewTaskToReadyList+0x154>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00e      	beq.n	8002e48 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <prvAddNewTaskToReadyList+0x164>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	200001b0 	.word	0x200001b0
 8002e54:	200000d8 	.word	0x200000d8
 8002e58:	200001bc 	.word	0x200001bc
 8002e5c:	200001cc 	.word	0x200001cc
 8002e60:	200001b8 	.word	0x200001b8
 8002e64:	200000dc 	.word	0x200000dc
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002e74:	f001 fe6e 	bl	8004b54 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <vTaskDelete+0x18>
 8002e7e:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <vTaskDelete+0x134>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	e000      	b.n	8002e86 <vTaskDelete+0x1a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fb0b 	bl	80024a8 <uxListRemove>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d115      	bne.n	8002ec4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	4941      	ldr	r1, [pc, #260]	; (8002fa4 <vTaskDelete+0x138>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <vTaskDelete+0x58>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <vTaskDelete+0x13c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <vTaskDelete+0x13c>)
 8002ec2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3318      	adds	r3, #24
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fae9 	bl	80024a8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002ed6:	4b35      	ldr	r3, [pc, #212]	; (8002fac <vTaskDelete+0x140>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	4a33      	ldr	r2, [pc, #204]	; (8002fac <vTaskDelete+0x140>)
 8002ede:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <vTaskDelete+0x134>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d118      	bne.n	8002f1c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3304      	adds	r3, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	482f      	ldr	r0, [pc, #188]	; (8002fb0 <vTaskDelete+0x144>)
 8002ef2:	f7ff fa7c 	bl	80023ee <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <vTaskDelete+0x148>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	4a2d      	ldr	r2, [pc, #180]	; (8002fb4 <vTaskDelete+0x148>)
 8002efe:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f004 fd46 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	2022      	movs	r0, #34	; 0x22
 8002f0e:	f003 fecf 	bl	8006cb0 <SEGGER_SYSVIEW_RecordU32>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fa2d 	bl	8005374 <SYSVIEW_DeleteTask>
 8002f1a:	e013      	b.n	8002f44 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002f1c:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <vTaskDelete+0x14c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <vTaskDelete+0x14c>)
 8002f24:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 fd33 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4619      	mov	r1, r3
 8002f32:	2022      	movs	r0, #34	; 0x22
 8002f34:	f003 febc 	bl	8006cb0 <SEGGER_SYSVIEW_RecordU32>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 fa1a 	bl	8005374 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002f40:	f000 fdf2 	bl	8003b28 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002f44:	f001 fe36 	bl	8004bb4 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <vTaskDelete+0x134>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d002      	beq.n	8002f58 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fdd8 	bl	8003b08 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <vTaskDelete+0x150>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01b      	beq.n	8002f98 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <vTaskDelete+0x134>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d116      	bne.n	8002f98 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <vTaskDelete+0x154>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <vTaskDelete+0x11c>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60bb      	str	r3, [r7, #8]
    }
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <vTaskDelete+0x158>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	200000d8 	.word	0x200000d8
 8002fa4:	200000dc 	.word	0x200000dc
 8002fa8:	200001b8 	.word	0x200001b8
 8002fac:	200001cc 	.word	0x200001cc
 8002fb0:	20000184 	.word	0x20000184
 8002fb4:	20000198 	.word	0x20000198
 8002fb8:	200001b0 	.word	0x200001b0
 8002fbc:	200001bc 	.word	0x200001bc
 8002fc0:	200001d8 	.word	0x200001d8
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01b      	beq.n	8003012 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002fda:	4b15      	ldr	r3, [pc, #84]	; (8003030 <vTaskDelay+0x68>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <vTaskDelay+0x30>
        __asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	60bb      	str	r3, [r7, #8]
    }
 8002ff4:	bf00      	nop
 8002ff6:	e7fe      	b.n	8002ff6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002ff8:	f000 f880 	bl	80030fc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	2023      	movs	r0, #35	; 0x23
 8003000:	f003 fe56 	bl	8006cb0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003004:	2100      	movs	r1, #0
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f001 f8f2 	bl	80041f0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800300c:	f000 f884 	bl	8003118 <xTaskResumeAll>
 8003010:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <vTaskDelay+0x6c>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200001d8 	.word	0x200001d8
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <vTaskStartScheduler+0xa4>)
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	2300      	movs	r3, #0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	2282      	movs	r2, #130	; 0x82
 800304a:	4925      	ldr	r1, [pc, #148]	; (80030e0 <vTaskStartScheduler+0xa8>)
 800304c:	4825      	ldr	r0, [pc, #148]	; (80030e4 <vTaskStartScheduler+0xac>)
 800304e:	f7ff fd85 	bl	8002b5c <xTaskCreate>
 8003052:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800305a:	f001 f949 	bl	80042f0 <xTimerCreateTimerTask>
 800305e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d124      	bne.n	80030b0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	60bb      	str	r3, [r7, #8]
    }
 8003078:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <vTaskStartScheduler+0xb0>)
 800307c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003080:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <vTaskStartScheduler+0xb4>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <vTaskStartScheduler+0xb8>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <vTaskStartScheduler+0xbc>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <vTaskStartScheduler+0xa4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d102      	bne.n	80030a0 <vTaskStartScheduler+0x68>
 800309a:	f004 fb99 	bl	80077d0 <SEGGER_SYSVIEW_OnIdle>
 800309e:	e004      	b.n	80030aa <vTaskStartScheduler+0x72>
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <vTaskStartScheduler+0xbc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fbf1 	bl	800788c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80030aa:	f001 fc33 	bl	8004914 <xPortStartScheduler>
 80030ae:	e00e      	b.n	80030ce <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b6:	d10a      	bne.n	80030ce <vTaskStartScheduler+0x96>
        __asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	607b      	str	r3, [r7, #4]
    }
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <vTaskStartScheduler+0xc0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200001d4 	.word	0x200001d4
 80030e0:	08007e10 	.word	0x08007e10
 80030e4:	080039fd 	.word	0x080039fd
 80030e8:	200001d0 	.word	0x200001d0
 80030ec:	200001bc 	.word	0x200001bc
 80030f0:	200001b4 	.word	0x200001b4
 80030f4:	200000d8 	.word	0x200000d8
 80030f8:	2000000c 	.word	0x2000000c

080030fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <vTaskSuspendAll+0x18>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	4a03      	ldr	r2, [pc, #12]	; (8003114 <vTaskSuspendAll+0x18>)
 8003108:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	200001d8 	.word	0x200001d8

08003118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003126:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <xTaskResumeAll+0x1dc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <xTaskResumeAll+0x2c>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
    }
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003144:	f001 fd06 	bl	8004b54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <xTaskResumeAll+0x1dc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	4a69      	ldr	r2, [pc, #420]	; (80032f4 <xTaskResumeAll+0x1dc>)
 8003150:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003152:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <xTaskResumeAll+0x1dc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 80c4 	bne.w	80032e4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800315c:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <xTaskResumeAll+0x1e0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80bf 	beq.w	80032e4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003166:	e08e      	b.n	8003286 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003168:	4b64      	ldr	r3, [pc, #400]	; (80032fc <xTaskResumeAll+0x1e4>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	6a12      	ldr	r2, [r2, #32]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	69d2      	ldr	r2, [r2, #28]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3318      	adds	r3, #24
 8003192:	429a      	cmp	r2, r3
 8003194:	d103      	bne.n	800319e <xTaskResumeAll+0x86>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2200      	movs	r2, #0
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	68d2      	ldr	r2, [r2, #12]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	6892      	ldr	r2, [r2, #8]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3304      	adds	r3, #4
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d103      	bne.n	80031dc <xTaskResumeAll+0xc4>
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2200      	movs	r2, #0
 80031e0:	615a      	str	r2, [r3, #20]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fb8e 	bl	8007910 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2201      	movs	r2, #1
 80031fa:	409a      	lsls	r2, r3
 80031fc:	4b40      	ldr	r3, [pc, #256]	; (8003300 <xTaskResumeAll+0x1e8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <xTaskResumeAll+0x1e8>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	493e      	ldr	r1, [pc, #248]	; (8003304 <xTaskResumeAll+0x1ec>)
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3304      	adds	r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	3204      	adds	r2, #4
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	1d1a      	adds	r2, r3, #4
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4a2e      	ldr	r2, [pc, #184]	; (8003304 <xTaskResumeAll+0x1ec>)
 800324a:	441a      	add	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	615a      	str	r2, [r3, #20]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	492b      	ldr	r1, [pc, #172]	; (8003304 <xTaskResumeAll+0x1ec>)
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1c59      	adds	r1, r3, #1
 8003264:	4827      	ldr	r0, [pc, #156]	; (8003304 <xTaskResumeAll+0x1ec>)
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4403      	add	r3, r0
 8003270:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <xTaskResumeAll+0x1f0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003280:	4b22      	ldr	r3, [pc, #136]	; (800330c <xTaskResumeAll+0x1f4>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <xTaskResumeAll+0x1e4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f af6c 	bne.w	8003168 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003296:	f000 fc47 	bl	8003b28 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <xTaskResumeAll+0x1f8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032a6:	f000 f859 	bl	800335c <xTaskIncrementTick>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <xTaskResumeAll+0x1f4>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f1      	bne.n	80032a6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <xTaskResumeAll+0x1f8>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <xTaskResumeAll+0x1f4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <xTaskResumeAll+0x1fc>)
 80032d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032e4:	f001 fc66 	bl	8004bb4 <vPortExitCritical>

    return xAlreadyYielded;
 80032e8:	69bb      	ldr	r3, [r7, #24]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200001d8 	.word	0x200001d8
 80032f8:	200001b0 	.word	0x200001b0
 80032fc:	20000170 	.word	0x20000170
 8003300:	200001b8 	.word	0x200001b8
 8003304:	200000dc 	.word	0x200000dc
 8003308:	200000d8 	.word	0x200000d8
 800330c:	200001c4 	.word	0x200001c4
 8003310:	200001c0 	.word	0x200001c0
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <xTaskGetTickCount+0x1c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003324:	687b      	ldr	r3, [r7, #4]
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	200001b4 	.word	0x200001b4

08003338 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800333e:	f001 fcf5 	bl	8004d2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <xTaskGetTickCountFromISR+0x20>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800334c:	683b      	ldr	r3, [r7, #0]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200001b4 	.word	0x200001b4

0800335c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003366:	4b7f      	ldr	r3, [pc, #508]	; (8003564 <xTaskIncrementTick+0x208>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80f0 	bne.w	8003550 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003370:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <xTaskIncrementTick+0x20c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003378:	4a7b      	ldr	r2, [pc, #492]	; (8003568 <xTaskIncrementTick+0x20c>)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d120      	bne.n	80033c6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003384:	4b79      	ldr	r3, [pc, #484]	; (800356c <xTaskIncrementTick+0x210>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <xTaskIncrementTick+0x48>
        __asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	607b      	str	r3, [r7, #4]
    }
 80033a0:	bf00      	nop
 80033a2:	e7fe      	b.n	80033a2 <xTaskIncrementTick+0x46>
 80033a4:	4b71      	ldr	r3, [pc, #452]	; (800356c <xTaskIncrementTick+0x210>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	4b71      	ldr	r3, [pc, #452]	; (8003570 <xTaskIncrementTick+0x214>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6f      	ldr	r2, [pc, #444]	; (800356c <xTaskIncrementTick+0x210>)
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4a6f      	ldr	r2, [pc, #444]	; (8003570 <xTaskIncrementTick+0x214>)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <xTaskIncrementTick+0x218>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <xTaskIncrementTick+0x218>)
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	f000 fbb1 	bl	8003b28 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033c6:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <xTaskIncrementTick+0x21c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f0c0 80aa 	bcc.w	8003526 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d2:	4b66      	ldr	r3, [pc, #408]	; (800356c <xTaskIncrementTick+0x210>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033dc:	4b66      	ldr	r3, [pc, #408]	; (8003578 <xTaskIncrementTick+0x21c>)
 80033de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033e2:	601a      	str	r2, [r3, #0]
                    break;
 80033e4:	e09f      	b.n	8003526 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e6:	4b61      	ldr	r3, [pc, #388]	; (800356c <xTaskIncrementTick+0x210>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80033f6:	6a3a      	ldr	r2, [r7, #32]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d203      	bcs.n	8003406 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033fe:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <xTaskIncrementTick+0x21c>)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003404:	e08f      	b.n	8003526 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	68d2      	ldr	r2, [r2, #12]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	6892      	ldr	r2, [r2, #8]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	3304      	adds	r3, #4
 8003428:	429a      	cmp	r2, r3
 800342a:	d103      	bne.n	8003434 <xTaskIncrementTick+0xd8>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2200      	movs	r2, #0
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1e5a      	subs	r2, r3, #1
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01e      	beq.n	800348a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	6a12      	ldr	r2, [r2, #32]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	69d2      	ldr	r2, [r2, #28]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	3318      	adds	r3, #24
 800346e:	429a      	cmp	r2, r3
 8003470:	d103      	bne.n	800347a <xTaskIncrementTick+0x11e>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2200      	movs	r2, #0
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1e5a      	subs	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	4618      	mov	r0, r3
 800348e:	f004 fa3f 	bl	8007910 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	2201      	movs	r2, #1
 8003498:	409a      	lsls	r2, r3
 800349a:	4b38      	ldr	r3, [pc, #224]	; (800357c <xTaskIncrementTick+0x220>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	4a36      	ldr	r2, [pc, #216]	; (800357c <xTaskIncrementTick+0x220>)
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4935      	ldr	r1, [pc, #212]	; (8003580 <xTaskIncrementTick+0x224>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3304      	adds	r3, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	3204      	adds	r2, #4
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1d1a      	adds	r2, r3, #4
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a26      	ldr	r2, [pc, #152]	; (8003580 <xTaskIncrementTick+0x224>)
 80034e8:	441a      	add	r2, r3
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	615a      	str	r2, [r3, #20]
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4923      	ldr	r1, [pc, #140]	; (8003580 <xTaskIncrementTick+0x224>)
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1c59      	adds	r1, r3, #1
 8003502:	481f      	ldr	r0, [pc, #124]	; (8003580 <xTaskIncrementTick+0x224>)
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4403      	add	r3, r0
 800350e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <xTaskIncrementTick+0x228>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	429a      	cmp	r2, r3
 800351c:	f67f af59 	bls.w	80033d2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003524:	e755      	b.n	80033d2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <xTaskIncrementTick+0x228>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4914      	ldr	r1, [pc, #80]	; (8003580 <xTaskIncrementTick+0x224>)
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d901      	bls.n	8003542 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <xTaskIncrementTick+0x22c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800354a:	2301      	movs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
 800354e:	e004      	b.n	800355a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <xTaskIncrementTick+0x230>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	4a0d      	ldr	r2, [pc, #52]	; (800358c <xTaskIncrementTick+0x230>)
 8003558:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800355c:	4618      	mov	r0, r3
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200001d8 	.word	0x200001d8
 8003568:	200001b4 	.word	0x200001b4
 800356c:	20000168 	.word	0x20000168
 8003570:	2000016c 	.word	0x2000016c
 8003574:	200001c8 	.word	0x200001c8
 8003578:	200001d0 	.word	0x200001d0
 800357c:	200001b8 	.word	0x200001b8
 8003580:	200000dc 	.word	0x200000dc
 8003584:	200000d8 	.word	0x200000d8
 8003588:	200001c4 	.word	0x200001c4
 800358c:	200001c0 	.word	0x200001c0

08003590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <vTaskSwitchContext+0xbc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <vTaskSwitchContext+0xc0>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80035a4:	e04d      	b.n	8003642 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80035a6:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <vTaskSwitchContext+0xc0>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <vTaskSwitchContext+0xc4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f1c3 031f 	rsb	r3, r3, #31
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	4925      	ldr	r1, [pc, #148]	; (8003658 <vTaskSwitchContext+0xc8>)
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <vTaskSwitchContext+0x5c>
        __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	607b      	str	r3, [r7, #4]
    }
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <vTaskSwitchContext+0x5a>
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <vTaskSwitchContext+0xc8>)
 80035f8:	4413      	add	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	3308      	adds	r3, #8
 800360e:	429a      	cmp	r2, r3
 8003610:	d104      	bne.n	800361c <vTaskSwitchContext+0x8c>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <vTaskSwitchContext+0xcc>)
 8003624:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <vTaskSwitchContext+0xcc>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <vTaskSwitchContext+0xd0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d102      	bne.n	8003638 <vTaskSwitchContext+0xa8>
 8003632:	f004 f8cd 	bl	80077d0 <SEGGER_SYSVIEW_OnIdle>
}
 8003636:	e004      	b.n	8003642 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <vTaskSwitchContext+0xcc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f004 f925 	bl	800788c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200001d8 	.word	0x200001d8
 8003650:	200001c4 	.word	0x200001c4
 8003654:	200001b8 	.word	0x200001b8
 8003658:	200000dc 	.word	0x200000dc
 800365c:	200000d8 	.word	0x200000d8
 8003660:	200001d4 	.word	0x200001d4

08003664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60fb      	str	r3, [r7, #12]
    }
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <vTaskPlaceOnEventList+0x44>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3318      	adds	r3, #24
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe fecf 	bl	8002436 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003698:	2101      	movs	r1, #1
 800369a:	6838      	ldr	r0, [r7, #0]
 800369c:	f000 fda8 	bl	80041f0 <prvAddCurrentTaskToDelayedList>
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200000d8 	.word	0x200000d8

080036ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	613b      	str	r3, [r7, #16]
    }
 80036d0:	bf00      	nop
 80036d2:	e7fe      	b.n	80036d2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	61da      	str	r2, [r3, #28]
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6892      	ldr	r2, [r2, #8]
 80036ea:	621a      	str	r2, [r3, #32]
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	3218      	adds	r2, #24
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f103 0218 	add.w	r2, r3, #24
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003720:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003722:	2024      	movs	r0, #36	; 0x24
 8003724:	f003 faa6 	bl	8006c74 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	68b8      	ldr	r0, [r7, #8]
 800372c:	f000 fd60 	bl	80041f0 <prvAddCurrentTaskToDelayedList>
    }
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200000d8 	.word	0x200000d8

0800373c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	60fb      	str	r3, [r7, #12]
    }
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	6a3a      	ldr	r2, [r7, #32]
 8003774:	6a12      	ldr	r2, [r2, #32]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	69d2      	ldr	r2, [r2, #28]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	3318      	adds	r3, #24
 800378a:	429a      	cmp	r2, r3
 800378c:	d103      	bne.n	8003796 <xTaskRemoveFromEventList+0x5a>
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2200      	movs	r2, #0
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1e5a      	subs	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a6:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <xTaskRemoveFromEventList+0x198>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d162      	bne.n	8003874 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	68d2      	ldr	r2, [r2, #12]
 80037bc:	609a      	str	r2, [r3, #8]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	6a3a      	ldr	r2, [r7, #32]
 80037c4:	6892      	ldr	r2, [r2, #8]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	3304      	adds	r3, #4
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d103      	bne.n	80037dc <xTaskRemoveFromEventList+0xa0>
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	2200      	movs	r2, #0
 80037e0:	615a      	str	r2, [r3, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f004 f88e 	bl	8007910 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	2201      	movs	r2, #1
 80037fa:	409a      	lsls	r2, r3
 80037fc:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <xTaskRemoveFromEventList+0x19c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4313      	orrs	r3, r2
 8003802:	4a35      	ldr	r2, [pc, #212]	; (80038d8 <xTaskRemoveFromEventList+0x19c>)
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	4934      	ldr	r1, [pc, #208]	; (80038dc <xTaskRemoveFromEventList+0x1a0>)
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3304      	adds	r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	6a3a      	ldr	r2, [r7, #32]
 8003830:	3204      	adds	r2, #4
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	1d1a      	adds	r2, r3, #4
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4a24      	ldr	r2, [pc, #144]	; (80038dc <xTaskRemoveFromEventList+0x1a0>)
 800384a:	441a      	add	r2, r3
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	615a      	str	r2, [r3, #20]
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4921      	ldr	r1, [pc, #132]	; (80038dc <xTaskRemoveFromEventList+0x1a0>)
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1c59      	adds	r1, r3, #1
 8003864:	481d      	ldr	r0, [pc, #116]	; (80038dc <xTaskRemoveFromEventList+0x1a0>)
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4403      	add	r3, r0
 8003870:	6019      	str	r1, [r3, #0]
 8003872:	e01b      	b.n	80038ac <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <xTaskRemoveFromEventList+0x1a4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	61da      	str	r2, [r3, #28]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	621a      	str	r2, [r3, #32]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	3218      	adds	r2, #24
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f103 0218 	add.w	r2, r3, #24
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <xTaskRemoveFromEventList+0x1a4>)
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
 80038a2:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <xTaskRemoveFromEventList+0x1a4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <xTaskRemoveFromEventList+0x1a4>)
 80038aa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <xTaskRemoveFromEventList+0x1a8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d905      	bls.n	80038c6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <xTaskRemoveFromEventList+0x1ac>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e001      	b.n	80038ca <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200001d8 	.word	0x200001d8
 80038d8:	200001b8 	.word	0x200001b8
 80038dc:	200000dc 	.word	0x200000dc
 80038e0:	20000170 	.word	0x20000170
 80038e4:	200000d8 	.word	0x200000d8
 80038e8:	200001c4 	.word	0x200001c4

080038ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <vTaskInternalSetTimeOutState+0x24>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <vTaskInternalSetTimeOutState+0x28>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	605a      	str	r2, [r3, #4]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	200001c8 	.word	0x200001c8
 8003914:	200001b4 	.word	0x200001b4

08003918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	613b      	str	r3, [r7, #16]
    }
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	60fb      	str	r3, [r7, #12]
    }
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800395a:	f001 f8fb 	bl	8004b54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <xTaskCheckForTimeOut+0xc4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003976:	d102      	bne.n	800397e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	e026      	b.n	80039cc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <xTaskCheckForTimeOut+0xc8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d00a      	beq.n	80039a0 <xTaskCheckForTimeOut+0x88>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	429a      	cmp	r2, r3
 8003992:	d305      	bcc.n	80039a0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003994:	2301      	movs	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e015      	b.n	80039cc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20b      	bcs.n	80039c2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad2      	subs	r2, r2, r3
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ff98 	bl	80038ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e004      	b.n	80039cc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039cc:	f001 f8f2 	bl	8004bb4 <vPortExitCritical>

    return xReturn;
 80039d0:	69fb      	ldr	r3, [r7, #28]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200001b4 	.word	0x200001b4
 80039e0:	200001c8 	.word	0x200001c8

080039e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <vTaskMissedYield+0x14>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	200001c4 	.word	0x200001c4

080039fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a04:	f000 f852 	bl	8003aac <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <prvIdleTask+0x28>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d9f9      	bls.n	8003a04 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <prvIdleTask+0x2c>)
 8003a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a20:	e7f0      	b.n	8003a04 <prvIdleTask+0x8>
 8003a22:	bf00      	nop
 8003a24:	200000dc 	.word	0x200000dc
 8003a28:	e000ed04 	.word	0xe000ed04

08003a2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	e00c      	b.n	8003a52 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <prvInitialiseTaskLists+0x60>)
 8003a44:	4413      	add	r3, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fca4 	bl	8002394 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d9ef      	bls.n	8003a38 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a58:	480d      	ldr	r0, [pc, #52]	; (8003a90 <prvInitialiseTaskLists+0x64>)
 8003a5a:	f7fe fc9b 	bl	8002394 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a5e:	480d      	ldr	r0, [pc, #52]	; (8003a94 <prvInitialiseTaskLists+0x68>)
 8003a60:	f7fe fc98 	bl	8002394 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a64:	480c      	ldr	r0, [pc, #48]	; (8003a98 <prvInitialiseTaskLists+0x6c>)
 8003a66:	f7fe fc95 	bl	8002394 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a6a:	480c      	ldr	r0, [pc, #48]	; (8003a9c <prvInitialiseTaskLists+0x70>)
 8003a6c:	f7fe fc92 	bl	8002394 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a70:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <prvInitialiseTaskLists+0x74>)
 8003a72:	f7fe fc8f 	bl	8002394 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <prvInitialiseTaskLists+0x78>)
 8003a78:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <prvInitialiseTaskLists+0x64>)
 8003a7a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <prvInitialiseTaskLists+0x7c>)
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <prvInitialiseTaskLists+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200000dc 	.word	0x200000dc
 8003a90:	20000140 	.word	0x20000140
 8003a94:	20000154 	.word	0x20000154
 8003a98:	20000170 	.word	0x20000170
 8003a9c:	20000184 	.word	0x20000184
 8003aa0:	2000019c 	.word	0x2000019c
 8003aa4:	20000168 	.word	0x20000168
 8003aa8:	2000016c 	.word	0x2000016c

08003aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ab2:	e019      	b.n	8003ae8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003ab4:	f001 f84e 	bl	8004b54 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <prvCheckTasksWaitingTermination+0x50>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fcef 	bl	80024a8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <prvCheckTasksWaitingTermination+0x54>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <prvCheckTasksWaitingTermination+0x54>)
 8003ad2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <prvCheckTasksWaitingTermination+0x58>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <prvCheckTasksWaitingTermination+0x58>)
 8003adc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003ade:	f001 f869 	bl	8004bb4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f810 	bl	8003b08 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <prvCheckTasksWaitingTermination+0x58>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e1      	bne.n	8003ab4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000184 	.word	0x20000184
 8003b00:	200001b0 	.word	0x200001b0
 8003b04:	20000198 	.word	0x20000198

08003b08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fa03 	bl	8004f20 <vPortFree>
            vPortFree( pxTCB );
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f001 fa00 	bl	8004f20 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvResetNextTaskUnblockTime+0x30>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <prvResetNextTaskUnblockTime+0x34>)
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b3c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b3e:	e005      	b.n	8003b4c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <prvResetNextTaskUnblockTime+0x30>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <prvResetNextTaskUnblockTime+0x34>)
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000168 	.word	0x20000168
 8003b5c:	200001d0 	.word	0x200001d0

08003b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <xTaskGetSchedulerState+0x34>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	e008      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <xTaskGetSchedulerState+0x38>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e001      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b86:	687b      	ldr	r3, [r7, #4]
    }
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	200001bc 	.word	0x200001bc
 8003b98:	200001d8 	.word	0x200001d8

08003b9c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	613b      	str	r3, [r7, #16]
    }
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003bc6:	f000 ffc5 	bl	8004b54 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <xTaskGenericNotifyWait+0x108>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3354      	adds	r3, #84	; 0x54
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d022      	beq.n	8003c22 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003bdc:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <xTaskGenericNotifyWait+0x108>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	3214      	adds	r2, #20
 8003be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	43d2      	mvns	r2, r2
 8003bec:	4011      	ands	r1, r2
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	3214      	adds	r2, #20
 8003bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <xTaskGenericNotifyWait+0x108>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3354      	adds	r3, #84	; 0x54
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	6a38      	ldr	r0, [r7, #32]
 8003c0e:	f000 faef 	bl	80041f0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <xTaskGenericNotifyWait+0x10c>)
 8003c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c22:	f000 ffc7 	bl	8004bb4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003c26:	f000 ff95 	bl	8004b54 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	2040      	movs	r0, #64	; 0x40
 8003c38:	f003 f946 	bl	8006ec8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <xTaskGenericNotifyWait+0x108>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	3214      	adds	r2, #20
 8003c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <xTaskGenericNotifyWait+0x108>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3354      	adds	r3, #84	; 0x54
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d002      	beq.n	8003c6a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e00e      	b.n	8003c88 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <xTaskGenericNotifyWait+0x108>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	3214      	adds	r2, #20
 8003c72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	43d2      	mvns	r2, r2
 8003c7a:	4011      	ands	r1, r2
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	3214      	adds	r2, #20
 8003c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <xTaskGenericNotifyWait+0x108>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3354      	adds	r3, #84	; 0x54
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003c96:	f000 ff8d 	bl	8004bb4 <vPortExitCritical>

        return xReturn;
 8003c9a:	697b      	ldr	r3, [r7, #20]
    }
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	200000d8 	.word	0x200000d8
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b090      	sub	sp, #64	; 0x40
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <xTaskGenericNotify+0x2e>
        __asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	623b      	str	r3, [r7, #32]
    }
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	61fb      	str	r3, [r7, #28]
    }
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003cfa:	f000 ff2b 	bl	8004b54 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d006      	beq.n	8003d12 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	3214      	adds	r2, #20
 8003d0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d10:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4413      	add	r3, r2
 8003d18:	3354      	adds	r3, #84	; 0x54
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4413      	add	r3, r2
 8003d26:	3354      	adds	r3, #84	; 0x54
 8003d28:	2202      	movs	r2, #2
 8003d2a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d83b      	bhi.n	8003daa <xTaskGenericNotify+0xfe>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <xTaskGenericNotify+0x8c>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003dc9 	.word	0x08003dc9
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	08003d81 	.word	0x08003d81
 8003d48:	08003d8f 	.word	0x08003d8f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	3214      	adds	r2, #20
 8003d52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	ea42 0103 	orr.w	r1, r2, r3
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	3214      	adds	r2, #20
 8003d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d66:	e032      	b.n	8003dce <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	3214      	adds	r2, #20
 8003d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	3214      	adds	r2, #20
 8003d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d7e:	e026      	b.n	8003dce <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	3214      	adds	r2, #20
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d8c:	e01f      	b.n	8003dce <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d006      	beq.n	8003da4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	3214      	adds	r2, #20
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003da2:	e014      	b.n	8003dce <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003da8:	e011      	b.n	8003dce <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003daa:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <xTaskGenericNotify+0x254>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <xTaskGenericNotify+0x120>
        __asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61bb      	str	r3, [r7, #24]
    }
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <xTaskGenericNotify+0x11a>
                    break;
 8003dc8:	bf00      	nop
 8003dca:	e000      	b.n	8003dce <xTaskGenericNotify+0x122>

                    break;
 8003dcc:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f003 fddf 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	203e      	movs	r0, #62	; 0x3e
 8003de4:	f003 f870 	bl	8006ec8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d17f      	bne.n	8003ef0 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfc:	68d2      	ldr	r2, [r2, #12]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	6892      	ldr	r2, [r2, #8]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	3304      	adds	r3, #4
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d103      	bne.n	8003e1e <xTaskGenericNotify+0x172>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	1e5a      	subs	r2, r3, #1
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	4618      	mov	r0, r3
 8003e32:	f003 fd6d 	bl	8007910 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <xTaskGenericNotify+0x258>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	4a2f      	ldr	r2, [pc, #188]	; (8003f04 <xTaskGenericNotify+0x258>)
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	492e      	ldr	r1, [pc, #184]	; (8003f08 <xTaskGenericNotify+0x25c>)
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3304      	adds	r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e72:	3204      	adds	r2, #4
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	1d1a      	adds	r2, r3, #4
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <xTaskGenericNotify+0x25c>)
 8003e8c:	441a      	add	r2, r3
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	615a      	str	r2, [r3, #20]
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	491c      	ldr	r1, [pc, #112]	; (8003f08 <xTaskGenericNotify+0x25c>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1c59      	adds	r1, r3, #1
 8003ea6:	4818      	ldr	r0, [pc, #96]	; (8003f08 <xTaskGenericNotify+0x25c>)
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4403      	add	r3, r0
 8003eb2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <xTaskGenericNotify+0x226>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	617b      	str	r3, [r7, #20]
    }
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <xTaskGenericNotify+0x260>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d907      	bls.n	8003ef0 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <xTaskGenericNotify+0x264>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ef0:	f000 fe60 	bl	8004bb4 <vPortExitCritical>

        return xReturn;
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3738      	adds	r7, #56	; 0x38
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200001b4 	.word	0x200001b4
 8003f04:	200001b8 	.word	0x200001b8
 8003f08:	200000dc 	.word	0x200000dc
 8003f0c:	200000d8 	.word	0x200000d8
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b094      	sub	sp, #80	; 0x50
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003f22:	2301      	movs	r3, #1
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f5e:	f000 fee5 	bl	8004d2c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003f66:	f3ef 8211 	mrs	r2, BASEPRI
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	623a      	str	r2, [r7, #32]
 8003f7c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003f7e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d006      	beq.n	8003f96 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	3214      	adds	r2, #20
 8003f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f94:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3354      	adds	r3, #84	; 0x54
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3354      	adds	r3, #84	; 0x54
 8003fac:	2202      	movs	r2, #2
 8003fae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d83b      	bhi.n	800402e <xTaskGenericNotifyFromISR+0x11a>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <xTaskGenericNotifyFromISR+0xa8>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	0800404d 	.word	0x0800404d
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08004005 	.word	0x08004005
 8003fcc:	08004013 	.word	0x08004013
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	3214      	adds	r2, #20
 8003fd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	ea42 0103 	orr.w	r1, r2, r3
 8003fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	3214      	adds	r2, #20
 8003fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003fea:	e032      	b.n	8004052 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	3214      	adds	r2, #20
 8003ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff6:	1c59      	adds	r1, r3, #1
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	3214      	adds	r2, #20
 8003ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004002:	e026      	b.n	8004052 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	3214      	adds	r2, #20
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004010:	e01f      	b.n	8004052 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004016:	2b02      	cmp	r3, #2
 8004018:	d006      	beq.n	8004028 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800401a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	3214      	adds	r2, #20
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004026:	e014      	b.n	8004052 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004028:	2300      	movs	r3, #0
 800402a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800402c:	e011      	b.n	8004052 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800402e:	4b69      	ldr	r3, [pc, #420]	; (80041d4 <xTaskGenericNotifyFromISR+0x2c0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	61bb      	str	r3, [r7, #24]
    }
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004050:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8004052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004054:	4618      	mov	r0, r3
 8004056:	f003 fc9d 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 800405a:	78f9      	ldrb	r1, [r7, #3]
 800405c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004060:	9201      	str	r2, [sp, #4]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4601      	mov	r1, r0
 800406a:	203f      	movs	r0, #63	; 0x3f
 800406c:	f002 ffbe 	bl	8006fec <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004070:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004074:	2b01      	cmp	r3, #1
 8004076:	f040 80a2 	bne.w	80041be <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	617b      	str	r3, [r7, #20]
    }
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004098:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <xTaskGenericNotifyFromISR+0x2c4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d162      	bne.n	8004166 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80040a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
 80040a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ac:	68d2      	ldr	r2, [r2, #12]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040b6:	6892      	ldr	r2, [r2, #8]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	3304      	adds	r3, #4
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d103      	bne.n	80040ce <xTaskGenericNotifyFromISR+0x1ba>
 80040c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d0:	2200      	movs	r2, #0
 80040d2:	615a      	str	r2, [r3, #20]
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80040de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 fc15 	bl	8007910 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	2201      	movs	r2, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <xTaskGenericNotifyFromISR+0x2c8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	4a39      	ldr	r2, [pc, #228]	; (80041dc <xTaskGenericNotifyFromISR+0x2c8>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	4938      	ldr	r1, [pc, #224]	; (80041e0 <xTaskGenericNotifyFromISR+0x2cc>)
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	3304      	adds	r3, #4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800410e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004122:	3204      	adds	r2, #4
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004128:	1d1a      	adds	r2, r3, #4
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	609a      	str	r2, [r3, #8]
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <xTaskGenericNotifyFromISR+0x2cc>)
 800413c:	441a      	add	r2, r3
 800413e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004140:	615a      	str	r2, [r3, #20]
 8004142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4926      	ldr	r1, [pc, #152]	; (80041e0 <xTaskGenericNotifyFromISR+0x2cc>)
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	4822      	ldr	r0, [pc, #136]	; (80041e0 <xTaskGenericNotifyFromISR+0x2cc>)
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4403      	add	r3, r0
 8004162:	6019      	str	r1, [r3, #0]
 8004164:	e01b      	b.n	800419e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
 800416c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004170:	61da      	str	r2, [r3, #28]
 8004172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004178:	621a      	str	r2, [r3, #32]
 800417a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004180:	3218      	adds	r2, #24
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004186:	f103 0218 	add.w	r2, r3, #24
 800418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <xTaskGenericNotifyFromISR+0x2d0>)
 800419c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800419e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <xTaskGenericNotifyFromISR+0x2d4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d908      	bls.n	80041be <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80041b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <xTaskGenericNotifyFromISR+0x2d8>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80041c8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80041ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80041cc:	4618      	mov	r0, r3
 80041ce:	3748      	adds	r7, #72	; 0x48
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200001b4 	.word	0x200001b4
 80041d8:	200001d8 	.word	0x200001d8
 80041dc:	200001b8 	.word	0x200001b8
 80041e0:	200000dc 	.word	0x200000dc
 80041e4:	20000170 	.word	0x20000170
 80041e8:	200000d8 	.word	0x200000d8
 80041ec:	200001c4 	.word	0x200001c4

080041f0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe f94e 	bl	80024a8 <uxListRemove>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	2201      	movs	r2, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <prvAddCurrentTaskToDelayedList+0xec>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4013      	ands	r3, r2
 8004226:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <prvAddCurrentTaskToDelayedList+0xec>)
 8004228:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004230:	d124      	bne.n	800427c <prvAddCurrentTaskToDelayedList+0x8c>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d021      	beq.n	800427c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004238:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	609a      	str	r2, [r3, #8]
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	3204      	adds	r2, #4
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1d1a      	adds	r2, r3, #4
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800426c:	615a      	str	r2, [r3, #20]
 800426e:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800427a:	e026      	b.n	80042ca <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	d209      	bcs.n	80042a8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe f8c8 	bl	8002436 <vListInsert>
}
 80042a6:	e010      	b.n	80042ca <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xf8>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fe f8be 	bl	8002436 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d202      	bcs.n	80042ca <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6013      	str	r3, [r2, #0]
}
 80042ca:	bf00      	nop
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	200001b4 	.word	0x200001b4
 80042d8:	200000d8 	.word	0x200000d8
 80042dc:	200001b8 	.word	0x200001b8
 80042e0:	2000019c 	.word	0x2000019c
 80042e4:	2000016c 	.word	0x2000016c
 80042e8:	20000168 	.word	0x20000168
 80042ec:	200001d0 	.word	0x200001d0

080042f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80042fa:	f000 fa47 	bl	800478c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <xTimerCreateTimerTask+0x54>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <xTimerCreateTimerTask+0x58>)
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	2302      	movs	r3, #2
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004314:	490d      	ldr	r1, [pc, #52]	; (800434c <xTimerCreateTimerTask+0x5c>)
 8004316:	480e      	ldr	r0, [pc, #56]	; (8004350 <xTimerCreateTimerTask+0x60>)
 8004318:	f7fe fc20 	bl	8002b5c <xTaskCreate>
 800431c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	603b      	str	r3, [r7, #0]
    }
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800433a:	687b      	ldr	r3, [r7, #4]
    }
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	2000020c 	.word	0x2000020c
 8004348:	20000210 	.word	0x20000210
 800434c:	08007e18 	.word	0x08007e18
 8004350:	080043f9 	.word	0x080043f9

08004354 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004360:	e008      	b.n	8004374 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4413      	add	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	18d1      	adds	r1, r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8dd 	bl	8004540 <prvInsertTimerInActiveList>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ea      	bne.n	8004362 <prvReloadTimer+0xe>
        }
    }
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <prvProcessExpiredTimer+0x5c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe f879 	bl	80024a8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f7ff ffc3 	bl	8004354 <prvReloadTimer>
 80043ce:	e008      	b.n	80043e2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	4798      	blx	r3
    }
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000204 	.word	0x20000204

080043f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004400:	f107 0308 	add.w	r3, r7, #8
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f857 	bl	80044b8 <prvGetNextExpireTime>
 800440a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4619      	mov	r1, r3
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f803 	bl	800441c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004416:	f000 f8d5 	bl	80045c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800441a:	e7f1      	b.n	8004400 <prvTimerTask+0x8>

0800441c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004426:	f7fe fe69 	bl	80030fc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f866 	bl	8004500 <prvSampleTimeNow>
 8004434:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d130      	bne.n	800449e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <prvProcessTimerOrBlockTask+0x3c>
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	429a      	cmp	r2, r3
 8004448:	d806      	bhi.n	8004458 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800444a:	f7fe fe65 	bl	8003118 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ffa1 	bl	8004398 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004456:	e024      	b.n	80044a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <prvProcessTimerOrBlockTask+0x90>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <prvProcessTimerOrBlockTask+0x50>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <prvProcessTimerOrBlockTask+0x52>
 800446c:	2300      	movs	r3, #0
 800446e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <prvProcessTimerOrBlockTask+0x94>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4619      	mov	r1, r3
 800447e:	f7fe fb39 	bl	8002af4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004482:	f7fe fe49 	bl	8003118 <xTaskResumeAll>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <prvProcessTimerOrBlockTask+0x98>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
    }
 800449c:	e001      	b.n	80044a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800449e:	f7fe fe3b 	bl	8003118 <xTaskResumeAll>
    }
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000208 	.word	0x20000208
 80044b0:	2000020c 	.word	0x2000020c
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <prvGetNextExpireTime+0x44>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <prvGetNextExpireTime+0x16>
 80044ca:	2201      	movs	r2, #1
 80044cc:	e000      	b.n	80044d0 <prvGetNextExpireTime+0x18>
 80044ce:	2200      	movs	r2, #0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <prvGetNextExpireTime+0x44>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e001      	b.n	80044ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044ec:	68fb      	ldr	r3, [r7, #12]
    }
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000204 	.word	0x20000204

08004500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004508:	f7fe ff06 	bl	8003318 <xTaskGetTickCount>
 800450c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <prvSampleTimeNow+0x3c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d205      	bcs.n	8004524 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004518:	f000 f912 	bl	8004740 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e002      	b.n	800452a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <prvSampleTimeNow+0x3c>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004530:	68fb      	ldr	r3, [r7, #12]
    }
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000214 	.word	0x20000214

08004540 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d812      	bhi.n	800458c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e01b      	b.n	80045b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <prvInsertTimerInActiveList+0x7c>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7fd ff56 	bl	8002436 <vListInsert>
 800458a:	e012      	b.n	80045b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d206      	bcs.n	80045a2 <prvInsertTimerInActiveList+0x62>
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e007      	b.n	80045b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <prvInsertTimerInActiveList+0x80>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fd ff42 	bl	8002436 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80045b2:	697b      	ldr	r3, [r7, #20]
    }
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000208 	.word	0x20000208
 80045c0:	20000204 	.word	0x20000204

080045c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045ca:	e0a6      	b.n	800471a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f2c0 80a2 	blt.w	8004718 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd ff5f 	bl	80024a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff87 	bl	8004500 <prvSampleTimeNow>
 80045f2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	f200 808e 	bhi.w	800471a <prvProcessReceivedCommands+0x156>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <prvProcessReceivedCommands+0x40>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004629 	.word	0x08004629
 8004608:	08004629 	.word	0x08004629
 800460c:	08004691 	.word	0x08004691
 8004610:	080046a5 	.word	0x080046a5
 8004614:	080046ef 	.word	0x080046ef
 8004618:	08004629 	.word	0x08004629
 800461c:	08004629 	.word	0x08004629
 8004620:	08004691 	.word	0x08004691
 8004624:	080046a5 	.word	0x080046a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	18d1      	adds	r1, r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	69f8      	ldr	r0, [r7, #28]
 8004648:	f7ff ff7a 	bl	8004540 <prvInsertTimerInActiveList>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d063      	beq.n	800471a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4413      	add	r3, r2
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4619      	mov	r1, r3
 800466c:	69f8      	ldr	r0, [r7, #28]
 800466e:	f7ff fe71 	bl	8004354 <prvReloadTimer>
 8004672:	e008      	b.n	8004686 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	69f8      	ldr	r0, [r7, #28]
 800468c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800468e:	e044      	b.n	800471a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80046a2:	e03a      	b.n	800471a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <prvProcessReceivedCommands+0x116>
        __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	617b      	str	r3, [r7, #20]
    }
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	18d1      	adds	r1, r2, r3
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	69f8      	ldr	r0, [r7, #28]
 80046e8:	f7ff ff2a 	bl	8004540 <prvInsertTimerInActiveList>
                        break;
 80046ec:	e015      	b.n	800471a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80046fc:	69f8      	ldr	r0, [r7, #28]
 80046fe:	f000 fc0f 	bl	8004f20 <vPortFree>
 8004702:	e00a      	b.n	800471a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004716:	e000      	b.n	800471a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004718:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <prvProcessReceivedCommands+0x178>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f107 0108 	add.w	r1, r7, #8
 8004722:	2200      	movs	r2, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f7fd fff1 	bl	800270c <xQueueReceive>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af4d 	bne.w	80045cc <prvProcessReceivedCommands+0x8>
        }
    }
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	2000020c 	.word	0x2000020c

08004740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004746:	e009      	b.n	800475c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <prvSwitchTimerLists+0x44>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004752:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	f7ff fe1e 	bl	8004398 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <prvSwitchTimerLists+0x44>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <prvSwitchTimerLists+0x44>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <prvSwitchTimerLists+0x48>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <prvSwitchTimerLists+0x44>)
 8004772:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <prvSwitchTimerLists+0x48>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6013      	str	r3, [r2, #0]
    }
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000204 	.word	0x20000204
 8004788:	20000208 	.word	0x20000208

0800478c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004790:	f000 f9e0 	bl	8004b54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <prvCheckForValidListAndQueue+0x54>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11d      	bne.n	80047d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800479c:	4811      	ldr	r0, [pc, #68]	; (80047e4 <prvCheckForValidListAndQueue+0x58>)
 800479e:	f7fd fdf9 	bl	8002394 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80047a2:	4811      	ldr	r0, [pc, #68]	; (80047e8 <prvCheckForValidListAndQueue+0x5c>)
 80047a4:	f7fd fdf6 	bl	8002394 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <prvCheckForValidListAndQueue+0x60>)
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <prvCheckForValidListAndQueue+0x58>)
 80047ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <prvCheckForValidListAndQueue+0x64>)
 80047b0:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <prvCheckForValidListAndQueue+0x5c>)
 80047b2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80047b4:	2200      	movs	r2, #0
 80047b6:	210c      	movs	r1, #12
 80047b8:	200a      	movs	r0, #10
 80047ba:	f7fd ff2f 	bl	800261c <xQueueGenericCreate>
 80047be:	4603      	mov	r3, r0
 80047c0:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <prvCheckForValidListAndQueue+0x54>)
 80047c2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <prvCheckForValidListAndQueue+0x54>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <prvCheckForValidListAndQueue+0x54>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4908      	ldr	r1, [pc, #32]	; (80047f4 <prvCheckForValidListAndQueue+0x68>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe f938 	bl	8002a48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80047d8:	f000 f9ec 	bl	8004bb4 <vPortExitCritical>
    }
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	2000020c 	.word	0x2000020c
 80047e4:	200001dc 	.word	0x200001dc
 80047e8:	200001f0 	.word	0x200001f0
 80047ec:	20000204 	.word	0x20000204
 80047f0:	20000208 	.word	0x20000208
 80047f4:	08007e20 	.word	0x08007e20

080047f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3b04      	subs	r3, #4
 8004808:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004810:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3b04      	subs	r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3b04      	subs	r3, #4
 8004826:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004828:	4a0c      	ldr	r2, [pc, #48]	; (800485c <pxPortInitialiseStack+0x64>)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3b14      	subs	r3, #20
 8004832:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3b04      	subs	r3, #4
 800483e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f06f 0202 	mvn.w	r2, #2
 8004846:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3b20      	subs	r3, #32
 800484c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	08004861 	.word	0x08004861

08004860 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <prvTaskExitError+0x54>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004872:	d00a      	beq.n	800488a <prvTaskExitError+0x2a>
        __asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
    }
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <prvTaskExitError+0x28>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	60bb      	str	r3, [r7, #8]
    }
 800489c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800489e:	bf00      	nop
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0fc      	beq.n	80048a0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80048a6:	bf00      	nop
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	20000010 	.word	0x20000010
	...

080048c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <pxCurrentTCBConst2>)
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	f380 8809 	msr	PSP, r0
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f380 8811 	msr	BASEPRI, r0
 80048da:	4770      	bx	lr
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst2>:
 80048e0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80048e8:	4808      	ldr	r0, [pc, #32]	; (800490c <prvPortStartFirstTask+0x24>)
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	6800      	ldr	r0, [r0, #0]
 80048ee:	f380 8808 	msr	MSP, r0
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8814 	msr	CONTROL, r0
 80048fa:	b662      	cpsie	i
 80048fc:	b661      	cpsie	f
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	df00      	svc	0
 8004908:	bf00      	nop
 800490a:	0000      	.short	0x0000
 800490c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop

08004914 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800491a:	4b46      	ldr	r3, [pc, #280]	; (8004a34 <xPortStartScheduler+0x120>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a46      	ldr	r2, [pc, #280]	; (8004a38 <xPortStartScheduler+0x124>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10a      	bne.n	800493a <xPortStartScheduler+0x26>
        __asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	613b      	str	r3, [r7, #16]
    }
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800493a:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <xPortStartScheduler+0x120>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a3f      	ldr	r2, [pc, #252]	; (8004a3c <xPortStartScheduler+0x128>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10a      	bne.n	800495a <xPortStartScheduler+0x46>
        __asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60fb      	str	r3, [r7, #12]
    }
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800495a:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <xPortStartScheduler+0x12c>)
 800495c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	22ff      	movs	r2, #255	; 0xff
 800496a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <xPortStartScheduler+0x130>)
 8004980:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004982:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <xPortStartScheduler+0x134>)
 8004984:	2207      	movs	r2, #7
 8004986:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004988:	e009      	b.n	800499e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <xPortStartScheduler+0x134>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	4a2d      	ldr	r2, [pc, #180]	; (8004a48 <xPortStartScheduler+0x134>)
 8004992:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b80      	cmp	r3, #128	; 0x80
 80049a8:	d0ef      	beq.n	800498a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049aa:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <xPortStartScheduler+0x134>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1c3 0307 	rsb	r3, r3, #7
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d00a      	beq.n	80049cc <xPortStartScheduler+0xb8>
        __asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60bb      	str	r3, [r7, #8]
    }
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <xPortStartScheduler+0x134>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <xPortStartScheduler+0x134>)
 80049d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049d6:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <xPortStartScheduler+0x134>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049de:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <xPortStartScheduler+0x134>)
 80049e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80049ea:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <xPortStartScheduler+0x138>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <xPortStartScheduler+0x138>)
 80049f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <xPortStartScheduler+0x138>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <xPortStartScheduler+0x138>)
 80049fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a02:	f000 f963 	bl	8004ccc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <xPortStartScheduler+0x13c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a0c:	f000 f982 	bl	8004d14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <xPortStartScheduler+0x140>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0f      	ldr	r2, [pc, #60]	; (8004a54 <xPortStartScheduler+0x140>)
 8004a16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a1c:	f7ff ff64 	bl	80048e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a20:	f7fe fdb6 	bl	8003590 <vTaskSwitchContext>
    prvTaskExitError();
 8004a24:	f7ff ff1c 	bl	8004860 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	e000ed00 	.word	0xe000ed00
 8004a38:	410fc271 	.word	0x410fc271
 8004a3c:	410fc270 	.word	0x410fc270
 8004a40:	e000e400 	.word	0xe000e400
 8004a44:	20000218 	.word	0x20000218
 8004a48:	2000021c 	.word	0x2000021c
 8004a4c:	e000ed20 	.word	0xe000ed20
 8004a50:	20000010 	.word	0x20000010
 8004a54:	e000ef34 	.word	0xe000ef34

08004a58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a5e:	4b37      	ldr	r3, [pc, #220]	; (8004b3c <vInitPrioGroupValue+0xe4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a37      	ldr	r2, [pc, #220]	; (8004b40 <vInitPrioGroupValue+0xe8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10a      	bne.n	8004a7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	613b      	str	r3, [r7, #16]
    }
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a7e:	4b2f      	ldr	r3, [pc, #188]	; (8004b3c <vInitPrioGroupValue+0xe4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a30      	ldr	r2, [pc, #192]	; (8004b44 <vInitPrioGroupValue+0xec>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d10a      	bne.n	8004a9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60fb      	str	r3, [r7, #12]
    }
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <vInitPrioGroupValue+0xf0>)
 8004aa0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	22ff      	movs	r2, #255	; 0xff
 8004aae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <vInitPrioGroupValue+0xf4>)
 8004ac4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004ac8:	2207      	movs	r2, #7
 8004aca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004acc:	e009      	b.n	8004ae2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004ad6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b80      	cmp	r3, #128	; 0x80
 8004aec:	d0ef      	beq.n	8004ace <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1c3 0307 	rsb	r3, r3, #7
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d00a      	beq.n	8004b10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	60bb      	str	r3, [r7, #8]
    }
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	4a0e      	ldr	r2, [pc, #56]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004b18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b22:	4a0b      	ldr	r2, [pc, #44]	; (8004b50 <vInitPrioGroupValue+0xf8>)
 8004b24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000ed00 	.word	0xe000ed00
 8004b40:	410fc271 	.word	0x410fc271
 8004b44:	410fc270 	.word	0x410fc270
 8004b48:	e000e400 	.word	0xe000e400
 8004b4c:	20000218 	.word	0x20000218
 8004b50:	2000021c 	.word	0x2000021c

08004b54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
        __asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	607b      	str	r3, [r7, #4]
    }
 8004b6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <vPortEnterCritical+0x58>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <vPortEnterCritical+0x58>)
 8004b76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <vPortEnterCritical+0x58>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10f      	bne.n	8004ba0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortEnterCritical+0x5c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <vPortEnterCritical+0x4c>
        __asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	603b      	str	r3, [r7, #0]
    }
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <vPortEnterCritical+0x4a>
    }
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000010 	.word	0x20000010
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <vPortExitCritical+0x50>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <vPortExitCritical+0x24>
        __asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	607b      	str	r3, [r7, #4]
    }
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <vPortExitCritical+0x50>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <vPortExitCritical+0x50>)
 8004be0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <vPortExitCritical+0x50>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <vPortExitCritical+0x42>
 8004bea:	2300      	movs	r3, #0
 8004bec:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f383 8811 	msr	BASEPRI, r3
    }
 8004bf4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000010 	.word	0x20000010
	...

08004c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c10:	f3ef 8009 	mrs	r0, PSP
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <pxCurrentTCBConst>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f01e 0f10 	tst.w	lr, #16
 8004c20:	bf08      	it	eq
 8004c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	6010      	str	r0, [r2, #0]
 8004c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c34:	f380 8811 	msr	BASEPRI, r0
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f7fe fca6 	bl	8003590 <vTaskSwitchContext>
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	f380 8811 	msr	BASEPRI, r0
 8004c4c:	bc09      	pop	{r0, r3}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c56:	f01e 0f10 	tst.w	lr, #16
 8004c5a:	bf08      	it	eq
 8004c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c60:	f380 8809 	msr	PSP, r0
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst>:
 8004c70:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
    }
 8004c90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004c92:	f002 fd23 	bl	80076dc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c96:	f7fe fb61 	bl	800335c <xTaskIncrementTick>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d006      	beq.n	8004cae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004ca0:	f002 fd7a 	bl	8007798 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ca4:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <SysTick_Handler+0x50>)
 8004ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e001      	b.n	8004cb2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004cae:	f002 fd57 	bl	8007760 <SEGGER_SYSVIEW_RecordExitISR>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f383 8811 	msr	BASEPRI, r3
    }
 8004cbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <vPortSetupTimerInterrupt+0x34>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <vPortSetupTimerInterrupt+0x38>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <vPortSetupTimerInterrupt+0x3c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <vPortSetupTimerInterrupt+0x40>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <vPortSetupTimerInterrupt+0x44>)
 8004cea:	3b01      	subs	r3, #1
 8004cec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <vPortSetupTimerInterrupt+0x34>)
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	601a      	str	r2, [r3, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000e010 	.word	0xe000e010
 8004d04:	e000e018 	.word	0xe000e018
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	10624dd3 	.word	0x10624dd3
 8004d10:	e000e014 	.word	0xe000e014

08004d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d24 <vPortEnableVFP+0x10>
 8004d18:	6801      	ldr	r1, [r0, #0]
 8004d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d1e:	6001      	str	r1, [r0, #0]
 8004d20:	4770      	bx	lr
 8004d22:	0000      	.short	0x0000
 8004d24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop

08004d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d32:	f3ef 8305 	mrs	r3, IPSR
 8004d36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	d914      	bls.n	8004d68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <vPortValidateInterruptPriority+0x70>)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <vPortValidateInterruptPriority+0x74>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	7afa      	ldrb	r2, [r7, #11]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d20a      	bcs.n	8004d68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	607b      	str	r3, [r7, #4]
    }
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <vPortValidateInterruptPriority+0x78>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <vPortValidateInterruptPriority+0x7c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d90a      	bls.n	8004d8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	603b      	str	r3, [r7, #0]
    }
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <vPortValidateInterruptPriority+0x60>
    }
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	e000e3f0 	.word	0xe000e3f0
 8004da0:	20000218 	.word	0x20000218
 8004da4:	e000ed0c 	.word	0xe000ed0c
 8004da8:	2000021c 	.word	0x2000021c

08004dac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004db8:	f7fe f9a0 	bl	80030fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004dbc:	4b53      	ldr	r3, [pc, #332]	; (8004f0c <pvPortMalloc+0x160>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004dc4:	f000 f908 	bl	8004fd8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d012      	beq.n	8004df4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004dce:	2208      	movs	r2, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	3308      	adds	r3, #8
 8004dda:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	43db      	mvns	r3, r3
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d804      	bhi.n	8004df0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	4413      	add	r3, r2
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	e001      	b.n	8004df4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db70      	blt.n	8004edc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d06d      	beq.n	8004edc <pvPortMalloc+0x130>
 8004e00:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <pvPortMalloc+0x164>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d868      	bhi.n	8004edc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e0a:	4b42      	ldr	r3, [pc, #264]	; (8004f14 <pvPortMalloc+0x168>)
 8004e0c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004e0e:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <pvPortMalloc+0x168>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e14:	e004      	b.n	8004e20 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d903      	bls.n	8004e32 <pvPortMalloc+0x86>
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f1      	bne.n	8004e16 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e32:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <pvPortMalloc+0x160>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d04f      	beq.n	8004edc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2208      	movs	r2, #8
 8004e42:	4413      	add	r3, r2
 8004e44:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	1ad2      	subs	r2, r2, r3
 8004e56:	2308      	movs	r3, #8
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d91f      	bls.n	8004e9e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <pvPortMalloc+0xda>
        __asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
    }
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	1ad2      	subs	r2, r2, r3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e98:	6978      	ldr	r0, [r7, #20]
 8004e9a:	f000 f8f9 	bl	8005090 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <pvPortMalloc+0x164>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <pvPortMalloc+0x164>)
 8004eaa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eac:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <pvPortMalloc+0x164>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <pvPortMalloc+0x16c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d203      	bcs.n	8004ec0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <pvPortMalloc+0x164>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <pvPortMalloc+0x16c>)
 8004ebe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <pvPortMalloc+0x170>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	4a10      	ldr	r2, [pc, #64]	; (8004f1c <pvPortMalloc+0x170>)
 8004eda:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004edc:	f7fe f91c 	bl	8003118 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <pvPortMalloc+0x154>
        __asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	60fb      	str	r3, [r7, #12]
    }
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <pvPortMalloc+0x152>
    return pvReturn;
 8004f00:	69fb      	ldr	r3, [r7, #28]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20012e28 	.word	0x20012e28
 8004f10:	20012e2c 	.word	0x20012e2c
 8004f14:	20012e20 	.word	0x20012e20
 8004f18:	20012e30 	.word	0x20012e30
 8004f1c:	20012e34 	.word	0x20012e34

08004f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d049      	beq.n	8004fc6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f32:	2308      	movs	r3, #8
 8004f34:	425b      	negs	r3, r3
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db0a      	blt.n	8004f5e <vPortFree+0x3e>
        __asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	60fb      	str	r3, [r7, #12]
    }
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <vPortFree+0x5c>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60bb      	str	r3, [r7, #8]
    }
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	0fdb      	lsrs	r3, r3, #31
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01c      	beq.n	8004fc6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d118      	bne.n	8004fc6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004fa0:	f7fe f8ac 	bl	80030fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <vPortFree+0xb0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4413      	add	r3, r2
 8004fae:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <vPortFree+0xb0>)
 8004fb0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fb2:	6938      	ldr	r0, [r7, #16]
 8004fb4:	f000 f86c 	bl	8005090 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <vPortFree+0xb4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <vPortFree+0xb4>)
 8004fc0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004fc2:	f7fe f8a9 	bl	8003118 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004fc6:	bf00      	nop
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20012e2c 	.word	0x20012e2c
 8004fd4:	20012e38 	.word	0x20012e38

08004fd8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fde:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004fe4:	4b25      	ldr	r3, [pc, #148]	; (800507c <prvHeapInit+0xa4>)
 8004fe6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3307      	adds	r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0307 	bic.w	r3, r3, #7
 8004ffe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	4a1d      	ldr	r2, [pc, #116]	; (800507c <prvHeapInit+0xa4>)
 8005008:	4413      	add	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005010:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <prvHeapInit+0xa8>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <prvHeapInit+0xa8>)
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4413      	add	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005024:	2208      	movs	r2, #8
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a13      	ldr	r2, [pc, #76]	; (8005084 <prvHeapInit+0xac>)
 8005038:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <prvHeapInit+0xac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <prvHeapInit+0xac>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	1ad2      	subs	r2, r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <prvHeapInit+0xac>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a08      	ldr	r2, [pc, #32]	; (8005088 <prvHeapInit+0xb0>)
 8005066:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a07      	ldr	r2, [pc, #28]	; (800508c <prvHeapInit+0xb4>)
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	20000220 	.word	0x20000220
 8005080:	20012e20 	.word	0x20012e20
 8005084:	20012e28 	.word	0x20012e28
 8005088:	20012e30 	.word	0x20012e30
 800508c:	20012e2c 	.word	0x20012e2c

08005090 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005098:	4b28      	ldr	r3, [pc, #160]	; (800513c <prvInsertBlockIntoFreeList+0xac>)
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e002      	b.n	80050a4 <prvInsertBlockIntoFreeList+0x14>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d8f7      	bhi.n	800509e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d108      	bne.n	80050d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	441a      	add	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	441a      	add	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d118      	bne.n	8005118 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <prvInsertBlockIntoFreeList+0xb0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d00d      	beq.n	800510e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	441a      	add	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e008      	b.n	8005120 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <prvInsertBlockIntoFreeList+0xb0>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e003      	b.n	8005120 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d002      	beq.n	800512e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20012e20 	.word	0x20012e20
 8005140:	20012e28 	.word	0x20012e28

08005144 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005148:	4803      	ldr	r0, [pc, #12]	; (8005158 <_cbSendSystemDesc+0x14>)
 800514a:	f002 fa71 	bl	8007630 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800514e:	4803      	ldr	r0, [pc, #12]	; (800515c <_cbSendSystemDesc+0x18>)
 8005150:	f002 fa6e 	bl	8007630 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}
 8005158:	08007e28 	.word	0x08007e28
 800515c:	08007e5c 	.word	0x08007e5c

08005160 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <SEGGER_SYSVIEW_Conf+0x20>)
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <SEGGER_SYSVIEW_Conf+0x20>)
 800516a:	6819      	ldr	r1, [r3, #0]
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <SEGGER_SYSVIEW_Conf+0x24>)
 800516e:	4a06      	ldr	r2, [pc, #24]	; (8005188 <SEGGER_SYSVIEW_Conf+0x28>)
 8005170:	f001 fd2c 	bl	8006bcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005174:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005178:	f001 fd6c 	bl	8006c54 <SEGGER_SYSVIEW_SetRAMBase>
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000000 	.word	0x20000000
 8005184:	08005145 	.word	0x08005145
 8005188:	08007ef0 	.word	0x08007ef0

0800518c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800518c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518e:	b085      	sub	sp, #20
 8005190:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	e033      	b.n	8005200 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005198:	491e      	ldr	r1, [pc, #120]	; (8005214 <_cbSendTaskList+0x88>)
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	491a      	ldr	r1, [pc, #104]	; (8005214 <_cbSendTaskList+0x88>)
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3304      	adds	r3, #4
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	4c16      	ldr	r4, [pc, #88]	; (8005214 <_cbSendTaskList+0x88>)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4423      	add	r3, r4
 80051c8:	3308      	adds	r3, #8
 80051ca:	681c      	ldr	r4, [r3, #0]
 80051cc:	4d11      	ldr	r5, [pc, #68]	; (8005214 <_cbSendTaskList+0x88>)
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	442b      	add	r3, r5
 80051da:	330c      	adds	r3, #12
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	4e0d      	ldr	r6, [pc, #52]	; (8005214 <_cbSendTaskList+0x88>)
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4433      	add	r3, r6
 80051ec:	3310      	adds	r3, #16
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	462b      	mov	r3, r5
 80051f4:	4622      	mov	r2, r4
 80051f6:	f000 f979 	bl	80054ec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3301      	adds	r3, #1
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <_cbSendTaskList+0x8c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d3c6      	bcc.n	8005198 <_cbSendTaskList+0xc>
  }
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005214:	20012e3c 	.word	0x20012e3c
 8005218:	20012edc 	.word	0x20012edc

0800521c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005224:	f7fe f888 	bl	8003338 <xTaskGetTickCountFromISR>
 8005228:	4603      	mov	r3, r0
 800522a:	2200      	movs	r2, #0
 800522c:	469a      	mov	sl, r3
 800522e:	4693      	mov	fp, r2
 8005230:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005234:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	f04f 0a00 	mov.w	sl, #0
 8005240:	f04f 0b00 	mov.w	fp, #0
 8005244:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005248:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800524c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005250:	4652      	mov	r2, sl
 8005252:	465b      	mov	r3, fp
 8005254:	1a14      	subs	r4, r2, r0
 8005256:	eb63 0501 	sbc.w	r5, r3, r1
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	00ab      	lsls	r3, r5, #2
 8005264:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005268:	00a2      	lsls	r2, r4, #2
 800526a:	4614      	mov	r4, r2
 800526c:	461d      	mov	r5, r3
 800526e:	eb14 0800 	adds.w	r8, r4, r0
 8005272:	eb45 0901 	adc.w	r9, r5, r1
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800528a:	4690      	mov	r8, r2
 800528c:	4699      	mov	r9, r3
 800528e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005292:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080052a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80052b2:	2205      	movs	r2, #5
 80052b4:	492b      	ldr	r1, [pc, #172]	; (8005364 <SYSVIEW_AddTask+0xc0>)
 80052b6:	68b8      	ldr	r0, [r7, #8]
 80052b8:	f002 fd1a 	bl	8007cf0 <memcmp>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d04b      	beq.n	800535a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80052c2:	4b29      	ldr	r3, [pc, #164]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b07      	cmp	r3, #7
 80052c8:	d903      	bls.n	80052d2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80052ca:	4828      	ldr	r0, [pc, #160]	; (800536c <SYSVIEW_AddTask+0xc8>)
 80052cc:	f002 fc62 	bl	8007b94 <SEGGER_SYSVIEW_Warn>
    return;
 80052d0:	e044      	b.n	800535c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80052d2:	4b25      	ldr	r3, [pc, #148]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4926      	ldr	r1, [pc, #152]	; (8005370 <SYSVIEW_AddTask+0xcc>)
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4921      	ldr	r1, [pc, #132]	; (8005370 <SYSVIEW_AddTask+0xcc>)
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	3304      	adds	r3, #4
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	491b      	ldr	r1, [pc, #108]	; (8005370 <SYSVIEW_AddTask+0xcc>)
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	3308      	adds	r3, #8
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4916      	ldr	r1, [pc, #88]	; (8005370 <SYSVIEW_AddTask+0xcc>)
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	330c      	adds	r3, #12
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4910      	ldr	r1, [pc, #64]	; (8005370 <SYSVIEW_AddTask+0xcc>)
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3310      	adds	r3, #16
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3301      	adds	r3, #1
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <SYSVIEW_AddTask+0xc4>)
 8005346:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f8ca 	bl	80054ec <SYSVIEW_SendTaskInfo>
 8005358:	e000      	b.n	800535c <SYSVIEW_AddTask+0xb8>
    return;
 800535a:	bf00      	nop

}
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	08007e6c 	.word	0x08007e6c
 8005368:	20012edc 	.word	0x20012edc
 800536c:	08007e74 	.word	0x08007e74
 8005370:	20012e3c 	.word	0x20012e3c

08005374 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800537c:	4b59      	ldr	r3, [pc, #356]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80ab 	beq.w	80054dc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e00d      	b.n	80053a8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800538c:	4956      	ldr	r1, [pc, #344]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d008      	beq.n	80053b4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3ec      	bcc.n	800538c <SYSVIEW_DeleteTask+0x18>
 80053b2:	e000      	b.n	80053b6 <SYSVIEW_DeleteTask+0x42>
      break;
 80053b4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80053b6:	4b4b      	ldr	r3, [pc, #300]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d111      	bne.n	80053e6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a46      	ldr	r2, [pc, #280]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 80053ce:	4413      	add	r3, r2
 80053d0:	2214      	movs	r2, #20
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f002 fca9 	bl	8007d2c <memset>
    _NumTasks--;
 80053da:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3b01      	subs	r3, #1
 80053e0:	4a40      	ldr	r2, [pc, #256]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e07b      	b.n	80054de <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80053e6:	4b3f      	ldr	r3, [pc, #252]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d276      	bcs.n	80054de <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80053f0:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	1e5a      	subs	r2, r3, #1
 80053f6:	493c      	ldr	r1, [pc, #240]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	4838      	ldr	r0, [pc, #224]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4403      	add	r3, r0
 8005412:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005414:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	1e5a      	subs	r2, r3, #1
 800541a:	4933      	ldr	r1, [pc, #204]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3304      	adds	r3, #4
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	482f      	ldr	r0, [pc, #188]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4403      	add	r3, r0
 8005438:	3304      	adds	r3, #4
 800543a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800543c:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1e5a      	subs	r2, r3, #1
 8005442:	4929      	ldr	r1, [pc, #164]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	3308      	adds	r3, #8
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	4825      	ldr	r0, [pc, #148]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4403      	add	r3, r0
 8005460:	3308      	adds	r3, #8
 8005462:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	1e5a      	subs	r2, r3, #1
 800546a:	491f      	ldr	r1, [pc, #124]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	330c      	adds	r3, #12
 8005478:	6819      	ldr	r1, [r3, #0]
 800547a:	481b      	ldr	r0, [pc, #108]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4403      	add	r3, r0
 8005488:	330c      	adds	r3, #12
 800548a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800548c:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	1e5a      	subs	r2, r3, #1
 8005492:	4915      	ldr	r1, [pc, #84]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3310      	adds	r3, #16
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	4811      	ldr	r0, [pc, #68]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4403      	add	r3, r0
 80054b0:	3310      	adds	r3, #16
 80054b2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <SYSVIEW_DeleteTask+0x174>)
 80054c4:	4413      	add	r3, r2
 80054c6:	2214      	movs	r2, #20
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 fc2e 	bl	8007d2c <memset>
    _NumTasks--;
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <SYSVIEW_DeleteTask+0x170>)
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e000      	b.n	80054de <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80054dc:	bf00      	nop
  }
}
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20012edc 	.word	0x20012edc
 80054e8:	20012e3c 	.word	0x20012e3c

080054ec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80054fa:	f107 0314 	add.w	r3, r7, #20
 80054fe:	2214      	movs	r2, #20
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f002 fc12 	bl	8007d2c <memset>
  TaskInfo.TaskID     = TaskID;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	4618      	mov	r0, r3
 8005522:	f001 ff8d 	bl	8007440 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005526:	bf00      	nop
 8005528:	3728      	adds	r7, #40	; 0x28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <__NVIC_EnableIRQ>:
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	2b00      	cmp	r3, #0
 8005540:	db0b      	blt.n	800555a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <__NVIC_EnableIRQ+0x38>)
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2001      	movs	r0, #1
 8005552:	fa00 f202 	lsl.w	r2, r0, r2
 8005556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000e100 	.word	0xe000e100

0800556c <__NVIC_SetPriority>:
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db0a      	blt.n	8005596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <__NVIC_SetPriority+0x4c>)
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	0112      	lsls	r2, r2, #4
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	440b      	add	r3, r1
 8005590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005594:	e00a      	b.n	80055ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4908      	ldr	r1, [pc, #32]	; (80055bc <__NVIC_SetPriority+0x50>)
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	3b04      	subs	r3, #4
 80055a4:	0112      	lsls	r2, r2, #4
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	761a      	strb	r2, [r3, #24]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000e100 	.word	0xe000e100
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80055c6:	f002 fb41 	bl	8007c4c <SEGGER_SYSVIEW_IsStarted>
 80055ca:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80055d2:	f001 fdb9 	bl	8007148 <SEGGER_SYSVIEW_Start>
  }
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <_cbOnUARTRx+0x3c>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d806      	bhi.n	8005600 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <_cbOnUARTRx+0x3c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	3301      	adds	r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <_cbOnUARTRx+0x3c>)
 80055fc:	701a      	strb	r2, [r3, #0]
    goto Done;
 80055fe:	e009      	b.n	8005614 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005600:	f7ff ffde 	bl	80055c0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <_cbOnUARTRx+0x3c>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4618      	mov	r0, r3
 800560a:	1dfb      	adds	r3, r7, #7
 800560c:	2201      	movs	r2, #1
 800560e:	4619      	mov	r1, r3
 8005610:	f000 fb9c 	bl	8005d4c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005614:	bf00      	nop
}
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000014 	.word	0x20000014

08005620 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005628:	4b14      	ldr	r3, [pc, #80]	; (800567c <_cbOnUARTTx+0x5c>)
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d80f      	bhi.n	8005650 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <_cbOnUARTTx+0x5c>)
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	461a      	mov	r2, r3
 8005636:	4b12      	ldr	r3, [pc, #72]	; (8005680 <_cbOnUARTTx+0x60>)
 8005638:	5c9a      	ldrb	r2, [r3, r2]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <_cbOnUARTTx+0x5c>)
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	3301      	adds	r3, #1
 8005644:	b2da      	uxtb	r2, r3
 8005646:	4b0d      	ldr	r3, [pc, #52]	; (800567c <_cbOnUARTTx+0x5c>)
 8005648:	705a      	strb	r2, [r3, #1]
    r = 1;
 800564a:	2301      	movs	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800564e:	e00f      	b.n	8005670 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <_cbOnUARTTx+0x5c>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fa1b 	bl	8005a94 <SEGGER_RTT_ReadUpBufferNoLock>
 800565e:	4603      	mov	r3, r0
 8005660:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	da02      	bge.n	800566e <_cbOnUARTTx+0x4e>
    r = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e000      	b.n	8005670 <_cbOnUARTTx+0x50>
  }
Done:
 800566e:	bf00      	nop
  return r;
 8005670:	68fb      	ldr	r3, [r7, #12]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000014 	.word	0x20000014
 8005680:	08007ef8 	.word	0x08007ef8

08005684 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800568c:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <SEGGER_UART_init+0x1c>)
 800568e:	4905      	ldr	r1, [pc, #20]	; (80056a4 <SEGGER_UART_init+0x20>)
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f863 	bl	800575c <HIF_UART_Init>
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	080055e1 	.word	0x080055e1
 80056a4:	08005621 	.word	0x08005621

080056a8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80056ae:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <USART2_IRQHandler+0x80>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d011      	beq.n	80056e2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <USART2_IRQHandler+0x84>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 030b 	and.w	r3, r3, #11
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d108      	bne.n	80056e2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80056d0:	4b17      	ldr	r3, [pc, #92]	; (8005730 <USART2_IRQHandler+0x88>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <USART2_IRQHandler+0x88>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	79fa      	ldrb	r2, [r7, #7]
 80056de:	4610      	mov	r0, r2
 80056e0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80056ec:	4b11      	ldr	r3, [pc, #68]	; (8005734 <USART2_IRQHandler+0x8c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d015      	beq.n	8005720 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <USART2_IRQHandler+0x8c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	1dfa      	adds	r2, r7, #7
 80056fa:	4610      	mov	r0, r2
 80056fc:	4798      	blx	r3
 80056fe:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <USART2_IRQHandler+0x90>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <USART2_IRQHandler+0x90>)
 800570c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e006      	b.n	8005722 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <USART2_IRQHandler+0x80>)
 8005716:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005718:	79fa      	ldrb	r2, [r7, #7]
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <USART2_IRQHandler+0x84>)
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e000      	b.n	8005722 <USART2_IRQHandler+0x7a>
      return;
 8005720:	bf00      	nop
    }
  }
}
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40004400 	.word	0x40004400
 800572c:	40004404 	.word	0x40004404
 8005730:	20012ee0 	.word	0x20012ee0
 8005734:	20012ee4 	.word	0x20012ee4
 8005738:	4000440c 	.word	0x4000440c

0800573c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	4000440c 	.word	0x4000440c

0800575c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005768:	4b2e      	ldr	r3, [pc, #184]	; (8005824 <HIF_UART_Init+0xc8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <HIF_UART_Init+0xc8>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005774:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <HIF_UART_Init+0xcc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2b      	ldr	r2, [pc, #172]	; (8005828 <HIF_UART_Init+0xcc>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005780:	4b2a      	ldr	r3, [pc, #168]	; (800582c <HIF_UART_Init+0xd0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005794:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005796:	4a25      	ldr	r2, [pc, #148]	; (800582c <HIF_UART_Init+0xd0>)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800579c:	4b24      	ldr	r3, [pc, #144]	; (8005830 <HIF_UART_Init+0xd4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80057b0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <HIF_UART_Init+0xd4>)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80057b8:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <HIF_UART_Init+0xd8>)
 80057ba:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80057be:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80057c0:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <HIF_UART_Init+0xdc>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HIF_UART_Init+0xe0>)
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80057d2:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HIF_UART_Init+0xe4>)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ea:	d302      	bcc.n	80057f2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80057ec:	f640 73ff 	movw	r3, #4095	; 0xfff
 80057f0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	4a11      	ldr	r2, [pc, #68]	; (8005844 <HIF_UART_Init+0xe8>)
 80057fe:	b29b      	uxth	r3, r3
 8005800:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005802:	4a11      	ldr	r2, [pc, #68]	; (8005848 <HIF_UART_Init+0xec>)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005808:	4a10      	ldr	r2, [pc, #64]	; (800584c <HIF_UART_Init+0xf0>)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800580e:	2106      	movs	r1, #6
 8005810:	2026      	movs	r0, #38	; 0x26
 8005812:	f7ff feab 	bl	800556c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005816:	2026      	movs	r0, #38	; 0x26
 8005818:	f7ff fe8a 	bl	8005530 <__NVIC_EnableIRQ>
}
 800581c:	bf00      	nop
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40023840 	.word	0x40023840
 8005828:	40023830 	.word	0x40023830
 800582c:	40020020 	.word	0x40020020
 8005830:	40020000 	.word	0x40020000
 8005834:	4000440c 	.word	0x4000440c
 8005838:	40004410 	.word	0x40004410
 800583c:	40004414 	.word	0x40004414
 8005840:	0501bd00 	.word	0x0501bd00
 8005844:	40004408 	.word	0x40004408
 8005848:	20012ee0 	.word	0x20012ee0
 800584c:	20012ee4 	.word	0x20012ee4

08005850 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <_DoInit+0xa0>)
 8005858:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800585a:	22a8      	movs	r2, #168	; 0xa8
 800585c:	2100      	movs	r1, #0
 800585e:	6838      	ldr	r0, [r7, #0]
 8005860:	f002 fa64 	bl	8007d2c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2203      	movs	r2, #3
 8005868:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2203      	movs	r2, #3
 800586e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <_DoInit+0xa4>)
 8005874:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <_DoInit+0xa8>)
 800587a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005882:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2200      	movs	r2, #0
 8005888:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2200      	movs	r2, #0
 800588e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <_DoInit+0xa4>)
 800589a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	4a17      	ldr	r2, [pc, #92]	; (80058fc <_DoInit+0xac>)
 80058a0:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2210      	movs	r2, #16
 80058a6:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2200      	movs	r2, #0
 80058b2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80058ba:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	e00c      	b.n	80058de <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1c3 030f 	rsb	r3, r3, #15
 80058ca:	4a0d      	ldr	r2, [pc, #52]	; (8005900 <_DoInit+0xb0>)
 80058cc:	5cd1      	ldrb	r1, [r2, r3]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	460a      	mov	r2, r1
 80058d6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3301      	adds	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b0f      	cmp	r3, #15
 80058e2:	d9ef      	bls.n	80058c4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80058e4:	f3bf 8f5f 	dmb	sy
}
 80058e8:	bf00      	nop
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20012ee8 	.word	0x20012ee8
 80058f4:	08007ec4 	.word	0x08007ec4
 80058f8:	20012f90 	.word	0x20012f90
 80058fc:	20013390 	.word	0x20013390
 8005900:	08007efc 	.word	0x08007efc

08005904 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005910:	2300      	movs	r3, #0
 8005912:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	429a      	cmp	r2, r3
 8005926:	d905      	bls.n	8005934 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	e007      	b.n	8005944 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	69b9      	ldr	r1, [r7, #24]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	1acb      	subs	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	3b01      	subs	r3, #1
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	4293      	cmp	r3, r2
 8005950:	bf28      	it	cs
 8005952:	4613      	movcs	r3, r2
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4293      	cmp	r3, r2
 800595c:	bf28      	it	cs
 800595e:	4613      	movcs	r3, r2
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800596c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	6978      	ldr	r0, [r7, #20]
 8005972:	f002 f9cd 	bl	8007d10 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	4413      	add	r3, r2
 800597c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	4413      	add	r3, r2
 8005984:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	4413      	add	r3, r2
 8005994:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	429a      	cmp	r2, r3
 800599e:	d101      	bne.n	80059a4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059a4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1b2      	bne.n	800591a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3728      	adds	r7, #40	; 0x28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80059be:	b580      	push	{r7, lr}
 80059c0:	b088      	sub	sp, #32
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d911      	bls.n	8005a06 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	6938      	ldr	r0, [r7, #16]
 80059f2:	f002 f98d 	bl	8007d10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059f6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	441a      	add	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a04:	e01f      	b.n	8005a46 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	6938      	ldr	r0, [r7, #16]
 8005a1a:	f002 f979 	bl	8007d10 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	4413      	add	r3, r2
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4619      	mov	r1, r3
 8005a36:	6938      	ldr	r0, [r7, #16]
 8005a38:	f002 f96a 	bl	8007d10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a3c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	60da      	str	r2, [r3, #12]
}
 8005a46:	bf00      	nop
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005a4e:	b480      	push	{r7}
 8005a50:	b087      	sub	sp, #28
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d808      	bhi.n	8005a7c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad2      	subs	r2, r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	3b01      	subs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e004      	b.n	8005a86 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005a86:	697b      	ldr	r3, [r7, #20]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08c      	sub	sp, #48	; 0x30
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005aa0:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005aae:	f7ff fecf 	bl	8005850 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005ac0:	4413      	add	r3, r2
 8005ac2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d92b      	bls.n	8005b38 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4293      	cmp	r3, r2
 8005af0:	bf28      	it	cs
 8005af2:	4613      	movcs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	4413      	add	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	6939      	ldr	r1, [r7, #16]
 8005b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b06:	f002 f903 	bl	8007d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4413      	add	r3, r2
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	4413      	add	r3, r2
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d101      	bne.n	8005b38 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b34:	2300      	movs	r3, #0
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4293      	cmp	r3, r2
 8005b46:	bf28      	it	cs
 8005b48:	4613      	movcs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d019      	beq.n	8005b86 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	4413      	add	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	6939      	ldr	r1, [r7, #16]
 8005b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b62:	f002 f8d5 	bl	8007d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4413      	add	r3, r2
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b90:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3730      	adds	r7, #48	; 0x30
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20012ee8 	.word	0x20012ee8

08005ba0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	; 0x30
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005bac:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bae:	623b      	str	r3, [r7, #32]
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <SEGGER_RTT_ReadNoLock+0x1e>
 8005bba:	f7ff fe49 	bl	8005850 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	4413      	add	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	3360      	adds	r3, #96	; 0x60
 8005bca:	4a37      	ldr	r2, [pc, #220]	; (8005ca8 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bcc:	4413      	add	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d92b      	bls.n	8005c44 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	bf28      	it	cs
 8005bfe:	4613      	movcs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	4413      	add	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	6939      	ldr	r1, [r7, #16]
 8005c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c12:	f002 f87d 	bl	8007d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d101      	bne.n	8005c44 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	bf28      	it	cs
 8005c54:	4613      	movcs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d019      	beq.n	8005c92 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	4413      	add	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	6939      	ldr	r1, [r7, #16]
 8005c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c6e:	f002 f84f 	bl	8007d10 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c9c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3730      	adds	r7, #48	; 0x30
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20012ee8 	.word	0x20012ee8

08005cac <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	3360      	adds	r3, #96	; 0x60
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d029      	beq.n	8005d2a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d82e      	bhi.n	8005d38 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d013      	beq.n	8005d0a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005ce2:	e029      	b.n	8005d38 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005ce4:	6978      	ldr	r0, [r7, #20]
 8005ce6:	f7ff feb2 	bl	8005a4e <_GetAvailWriteSpace>
 8005cea:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d202      	bcs.n	8005cfa <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005cf8:	e021      	b.n	8005d3e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	69b9      	ldr	r1, [r7, #24]
 8005d02:	6978      	ldr	r0, [r7, #20]
 8005d04:	f7ff fe5b 	bl	80059be <_WriteNoCheck>
    break;
 8005d08:	e019      	b.n	8005d3e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f7ff fe9f 	bl	8005a4e <_GetAvailWriteSpace>
 8005d10:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	bf28      	it	cs
 8005d1a:	4613      	movcs	r3, r2
 8005d1c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	69b9      	ldr	r1, [r7, #24]
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	f7ff fe4b 	bl	80059be <_WriteNoCheck>
    break;
 8005d28:	e009      	b.n	8005d3e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7ff fde8 	bl	8005904 <_WriteBlocking>
 8005d34:	61f8      	str	r0, [r7, #28]
    break;
 8005d36:	e002      	b.n	8005d3e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
    break;
 8005d3c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20012ee8 	.word	0x20012ee8

08005d4c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005d66:	f7ff fd73 	bl	8005850 <_DoInit>
  SEGGER_RTT_LOCK();
 8005d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6e:	f04f 0120 	mov.w	r1, #32
 8005d72:	f381 8811 	msr	BASEPRI, r1
 8005d76:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ff95 	bl	8005cac <SEGGER_RTT_WriteDownBufferNoLock>
 8005d82:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005d8a:	697b      	ldr	r3, [r7, #20]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20012ee8 	.word	0x20012ee8

08005d98 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005da6:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005db4:	f7ff fd4c 	bl	8005850 <_DoInit>
  SEGGER_RTT_LOCK();
 8005db8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dbc:	f04f 0120 	mov.w	r1, #32
 8005dc0:	f381 8811 	msr	BASEPRI, r1
 8005dc4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dc6:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005dc8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005dce:	6939      	ldr	r1, [r7, #16]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	440b      	add	r3, r1
 8005dde:	3304      	adds	r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3301      	adds	r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	dbeb      	blt.n	8005dce <SEGGER_RTT_AllocUpBuffer+0x36>
 8005df6:	e000      	b.n	8005dfa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005df8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	da3f      	bge.n	8005e84 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e04:	6939      	ldr	r1, [r7, #16]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	4613      	mov	r3, r2
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	3304      	adds	r3, #4
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e2e:	6939      	ldr	r1, [r7, #16]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3320      	adds	r3, #32
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e42:	6939      	ldr	r1, [r7, #16]
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	440b      	add	r3, r1
 8005e50:	3328      	adds	r3, #40	; 0x28
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e56:	6939      	ldr	r1, [r7, #16]
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	440b      	add	r3, r1
 8005e64:	3324      	adds	r3, #36	; 0x24
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e6a:	6939      	ldr	r1, [r7, #16]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	440b      	add	r3, r1
 8005e78:	332c      	adds	r3, #44	; 0x2c
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e7e:	f3bf 8f5f 	dmb	sy
 8005e82:	e002      	b.n	8005e8a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e88:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005e90:	69fb      	ldr	r3, [r7, #28]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20012ee8 	.word	0x20012ee8

08005ea0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ebc:	f7ff fcc8 	bl	8005850 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ec0:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ec2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d82c      	bhi.n	8005f24 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005eca:	f3ef 8311 	mrs	r3, BASEPRI
 8005ece:	f04f 0120 	mov.w	r1, #32
 8005ed2:	f381 8811 	msr	BASEPRI, r1
 8005ed6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4613      	mov	r3, r2
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	4413      	add	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	3360      	adds	r3, #96	; 0x60
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f12:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f14:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
 8005f22:	e002      	b.n	8005f2a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3728      	adds	r7, #40	; 0x28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20012ee8 	.word	0x20012ee8

08005f38 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00f      	beq.n	8005f6e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005f4e:	e002      	b.n	8005f56 <_EncodeStr+0x1e>
      Len++;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3301      	adds	r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f6      	bne.n	8005f50 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d901      	bls.n	8005f6e <_EncodeStr+0x36>
      Len = Limit;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2bfe      	cmp	r3, #254	; 0xfe
 8005f72:	d806      	bhi.n	8005f82 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	60fa      	str	r2, [r7, #12]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e011      	b.n	8005fa6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	60fa      	str	r2, [r7, #12]
 8005f88:	22ff      	movs	r2, #255	; 0xff
 8005f8a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	60fa      	str	r2, [r7, #12]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	0a19      	lsrs	r1, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	60fa      	str	r2, [r7, #12]
 8005fa2:	b2ca      	uxtb	r2, r1
 8005fa4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005faa:	e00a      	b.n	8005fc2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	1c53      	adds	r3, r2, #1
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1c59      	adds	r1, r3, #1
 8005fb6:	60f9      	str	r1, [r7, #12]
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	701a      	strb	r2, [r3, #0]
    n++;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d3f0      	bcc.n	8005fac <_EncodeStr+0x74>
  }
  return pPayload;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3307      	adds	r3, #7
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ff6:	4b35      	ldr	r3, [pc, #212]	; (80060cc <_HandleIncomingPacket+0xdc>)
 8005ff8:	7e1b      	ldrb	r3, [r3, #24]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	1cfb      	adds	r3, r7, #3
 8005ffe:	2201      	movs	r2, #1
 8006000:	4619      	mov	r1, r3
 8006002:	f7ff fdcd 	bl	8005ba0 <SEGGER_RTT_ReadNoLock>
 8006006:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d052      	beq.n	80060b4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d031      	beq.n	8006078 <_HandleIncomingPacket+0x88>
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	dc40      	bgt.n	800609a <_HandleIncomingPacket+0xaa>
 8006018:	2b07      	cmp	r3, #7
 800601a:	dc15      	bgt.n	8006048 <_HandleIncomingPacket+0x58>
 800601c:	2b00      	cmp	r3, #0
 800601e:	dd3c      	ble.n	800609a <_HandleIncomingPacket+0xaa>
 8006020:	3b01      	subs	r3, #1
 8006022:	2b06      	cmp	r3, #6
 8006024:	d839      	bhi.n	800609a <_HandleIncomingPacket+0xaa>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <_HandleIncomingPacket+0x3c>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	0800604f 	.word	0x0800604f
 8006030:	08006055 	.word	0x08006055
 8006034:	0800605b 	.word	0x0800605b
 8006038:	08006061 	.word	0x08006061
 800603c:	08006067 	.word	0x08006067
 8006040:	0800606d 	.word	0x0800606d
 8006044:	08006073 	.word	0x08006073
 8006048:	2b7f      	cmp	r3, #127	; 0x7f
 800604a:	d035      	beq.n	80060b8 <_HandleIncomingPacket+0xc8>
 800604c:	e025      	b.n	800609a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800604e:	f001 f87b 	bl	8007148 <SEGGER_SYSVIEW_Start>
      break;
 8006052:	e036      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006054:	f001 f934 	bl	80072c0 <SEGGER_SYSVIEW_Stop>
      break;
 8006058:	e033      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800605a:	f001 fb0d 	bl	8007678 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800605e:	e030      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006060:	f001 fad2 	bl	8007608 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006064:	e02d      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006066:	f001 f951 	bl	800730c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800606a:	e02a      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800606c:	f001 fd40 	bl	8007af0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006070:	e027      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006072:	f001 fd1f 	bl	8007ab4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006076:	e024      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006078:	4b14      	ldr	r3, [pc, #80]	; (80060cc <_HandleIncomingPacket+0xdc>)
 800607a:	7e1b      	ldrb	r3, [r3, #24]
 800607c:	4618      	mov	r0, r3
 800607e:	1cfb      	adds	r3, r7, #3
 8006080:	2201      	movs	r2, #1
 8006082:	4619      	mov	r1, r3
 8006084:	f7ff fd8c 	bl	8005ba0 <SEGGER_RTT_ReadNoLock>
 8006088:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d015      	beq.n	80060bc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	4618      	mov	r0, r3
 8006094:	f001 fc8e 	bl	80079b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006098:	e010      	b.n	80060bc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	b25b      	sxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da0e      	bge.n	80060c0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <_HandleIncomingPacket+0xdc>)
 80060a4:	7e1b      	ldrb	r3, [r3, #24]
 80060a6:	4618      	mov	r0, r3
 80060a8:	1cfb      	adds	r3, r7, #3
 80060aa:	2201      	movs	r2, #1
 80060ac:	4619      	mov	r1, r3
 80060ae:	f7ff fd77 	bl	8005ba0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80060b2:	e005      	b.n	80060c0 <_HandleIncomingPacket+0xd0>
    }
  }
 80060b4:	bf00      	nop
 80060b6:	e004      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
      break;
 80060b8:	bf00      	nop
 80060ba:	e002      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
      break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <_HandleIncomingPacket+0xd2>
      break;
 80060c0:	bf00      	nop
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	200143a8 	.word	0x200143a8

080060d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	; 0x30
 80060d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80060d6:	2301      	movs	r3, #1
 80060d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	3301      	adds	r3, #1
 80060de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e4:	4b32      	ldr	r3, [pc, #200]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ea:	e00b      	b.n	8006104 <_TrySendOverflowPacket+0x34>
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	09db      	lsrs	r3, r3, #7
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	2b7f      	cmp	r3, #127	; 0x7f
 8006108:	d8f0      	bhi.n	80060ec <_TrySendOverflowPacket+0x1c>
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800611a:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <_TrySendOverflowPacket+0xe4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006120:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	623b      	str	r3, [r7, #32]
 8006132:	e00b      	b.n	800614c <_TrySendOverflowPacket+0x7c>
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	6279      	str	r1, [r7, #36]	; 0x24
 800613e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	09db      	lsrs	r3, r3, #7
 800614a:	623b      	str	r3, [r7, #32]
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	2b7f      	cmp	r3, #127	; 0x7f
 8006150:	d8f0      	bhi.n	8006134 <_TrySendOverflowPacket+0x64>
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	627a      	str	r2, [r7, #36]	; 0x24
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006162:	4b13      	ldr	r3, [pc, #76]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	4618      	mov	r0, r3
 8006168:	1d3b      	adds	r3, r7, #4
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	461a      	mov	r2, r3
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	4619      	mov	r1, r3
 8006174:	f7fa f82c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006178:	4603      	mov	r3, r0
 800617a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800617c:	f7ff fade 	bl	800573c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800618c:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	3b01      	subs	r3, #1
 8006192:	b2da      	uxtb	r2, r3
 8006194:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	e004      	b.n	80061a4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	3301      	adds	r3, #1
 80061a0:	4a03      	ldr	r2, [pc, #12]	; (80061b0 <_TrySendOverflowPacket+0xe0>)
 80061a2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061a4:	693b      	ldr	r3, [r7, #16]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3730      	adds	r7, #48	; 0x30
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200143a8 	.word	0x200143a8
 80061b4:	e0001004 	.word	0xe0001004

080061b8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	; 0x28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80061c4:	4b96      	ldr	r3, [pc, #600]	; (8006420 <_SendPacket+0x268>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d010      	beq.n	80061ee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80061cc:	4b94      	ldr	r3, [pc, #592]	; (8006420 <_SendPacket+0x268>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8130 	beq.w	8006436 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80061d6:	4b92      	ldr	r3, [pc, #584]	; (8006420 <_SendPacket+0x268>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d109      	bne.n	80061f2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80061de:	f7ff ff77 	bl	80060d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80061e2:	4b8f      	ldr	r3, [pc, #572]	; (8006420 <_SendPacket+0x268>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	f040 8127 	bne.w	800643a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80061ec:	e001      	b.n	80061f2 <_SendPacket+0x3a>
    goto Send;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <_SendPacket+0x3c>
Send:
 80061f2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b1f      	cmp	r3, #31
 80061f8:	d809      	bhi.n	800620e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80061fa:	4b89      	ldr	r3, [pc, #548]	; (8006420 <_SendPacket+0x268>)
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	f040 8118 	bne.w	800643e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b17      	cmp	r3, #23
 8006212:	d807      	bhi.n	8006224 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3b01      	subs	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e0c4      	b.n	80063ae <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d912      	bls.n	8006258 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	09da      	lsrs	r2, r3, #7
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3b01      	subs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	3a01      	subs	r2, #1
 800624a:	60fa      	str	r2, [r7, #12]
 800624c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e006      	b.n	8006266 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3b01      	subs	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b7e      	cmp	r3, #126	; 0x7e
 800626a:	d807      	bhi.n	800627c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e098      	b.n	80063ae <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006282:	d212      	bcs.n	80062aa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	09da      	lsrs	r2, r3, #7
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3b01      	subs	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	3a01      	subs	r2, #1
 800629c:	60fa      	str	r2, [r7, #12]
 800629e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e081      	b.n	80063ae <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b0:	d21d      	bcs.n	80062ee <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	0b9a      	lsrs	r2, r3, #14
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	3a01      	subs	r2, #1
 80062cc:	60fa      	str	r2, [r7, #12]
 80062ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	3a01      	subs	r2, #1
 80062e0:	60fa      	str	r2, [r7, #12]
 80062e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e05f      	b.n	80063ae <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062f4:	d228      	bcs.n	8006348 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	0d5a      	lsrs	r2, r3, #21
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	0b9b      	lsrs	r3, r3, #14
 800630a:	b2db      	uxtb	r3, r3
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	3a01      	subs	r2, #1
 8006310:	60fa      	str	r2, [r7, #12]
 8006312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006316:	b2da      	uxtb	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	b2db      	uxtb	r3, r3
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	3a01      	subs	r2, #1
 8006326:	60fa      	str	r2, [r7, #12]
 8006328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	3a01      	subs	r2, #1
 800633a:	60fa      	str	r2, [r7, #12]
 800633c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006340:	b2da      	uxtb	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e032      	b.n	80063ae <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	0f1a      	lsrs	r2, r3, #28
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3b01      	subs	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	0d5b      	lsrs	r3, r3, #21
 800635c:	b2db      	uxtb	r3, r3
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	3a01      	subs	r2, #1
 8006362:	60fa      	str	r2, [r7, #12]
 8006364:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0b9b      	lsrs	r3, r3, #14
 8006372:	b2db      	uxtb	r3, r3
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	3a01      	subs	r2, #1
 8006378:	60fa      	str	r2, [r7, #12]
 800637a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	b2db      	uxtb	r3, r3
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	3a01      	subs	r2, #1
 800638e:	60fa      	str	r2, [r7, #12]
 8006390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	3a01      	subs	r2, #1
 80063a2:	60fa      	str	r2, [r7, #12]
 80063a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063ae:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <_SendPacket+0x26c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80063b4:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <_SendPacket+0x268>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	623b      	str	r3, [r7, #32]
 80063c6:	e00b      	b.n	80063e0 <_SendPacket+0x228>
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1c59      	adds	r1, r3, #1
 80063d0:	6279      	str	r1, [r7, #36]	; 0x24
 80063d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	09db      	lsrs	r3, r3, #7
 80063de:	623b      	str	r3, [r7, #32]
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b7f      	cmp	r3, #127	; 0x7f
 80063e4:	d8f0      	bhi.n	80063c8 <_SendPacket+0x210>
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	627a      	str	r2, [r7, #36]	; 0x24
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <_SendPacket+0x268>)
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	4618      	mov	r0, r3
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	461a      	mov	r2, r3
 8006404:	68f9      	ldr	r1, [r7, #12]
 8006406:	f7f9 fee3 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800640a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800640c:	f7ff f996 	bl	800573c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006416:	4a02      	ldr	r2, [pc, #8]	; (8006420 <_SendPacket+0x268>)
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	60d3      	str	r3, [r2, #12]
 800641c:	e010      	b.n	8006440 <_SendPacket+0x288>
 800641e:	bf00      	nop
 8006420:	200143a8 	.word	0x200143a8
 8006424:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <_SendPacket+0x2d8>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <_SendPacket+0x2d8>)
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e004      	b.n	8006440 <_SendPacket+0x288>
    goto SendDone;
 8006436:	bf00      	nop
 8006438:	e002      	b.n	8006440 <_SendPacket+0x288>
      goto SendDone;
 800643a:	bf00      	nop
 800643c:	e000      	b.n	8006440 <_SendPacket+0x288>
      goto SendDone;
 800643e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006440:	4b13      	ldr	r3, [pc, #76]	; (8006490 <_SendPacket+0x2d8>)
 8006442:	7e1b      	ldrb	r3, [r3, #24]
 8006444:	4619      	mov	r1, r3
 8006446:	4a13      	ldr	r2, [pc, #76]	; (8006494 <_SendPacket+0x2dc>)
 8006448:	460b      	mov	r3, r1
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	440b      	add	r3, r1
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	336c      	adds	r3, #108	; 0x6c
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <_SendPacket+0x2d8>)
 8006458:	7e1b      	ldrb	r3, [r3, #24]
 800645a:	4618      	mov	r0, r3
 800645c:	490d      	ldr	r1, [pc, #52]	; (8006494 <_SendPacket+0x2dc>)
 800645e:	4603      	mov	r3, r0
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4403      	add	r3, r0
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	440b      	add	r3, r1
 8006468:	3370      	adds	r3, #112	; 0x70
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d00b      	beq.n	8006488 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <_SendPacket+0x2d8>)
 8006472:	789b      	ldrb	r3, [r3, #2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d107      	bne.n	8006488 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <_SendPacket+0x2d8>)
 800647a:	2201      	movs	r2, #1
 800647c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800647e:	f7ff fdb7 	bl	8005ff0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006482:	4b03      	ldr	r3, [pc, #12]	; (8006490 <_SendPacket+0x2d8>)
 8006484:	2200      	movs	r2, #0
 8006486:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006488:	bf00      	nop
 800648a:	3728      	adds	r7, #40	; 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200143a8 	.word	0x200143a8
 8006494:	20012ee8 	.word	0x20012ee8

08006498 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	3301      	adds	r3, #1
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d80a      	bhi.n	80064c8 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6051      	str	r1, [r2, #4]
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d15a      	bne.n	8006586 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	e00b      	b.n	800650a <_StoreChar+0x72>
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	1c59      	adds	r1, r3, #1
 80064fa:	6279      	str	r1, [r7, #36]	; 0x24
 80064fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	09db      	lsrs	r3, r3, #7
 8006508:	623b      	str	r3, [r7, #32]
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	2b7f      	cmp	r3, #127	; 0x7f
 800650e:	d8f0      	bhi.n	80064f2 <_StoreChar+0x5a>
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	627a      	str	r2, [r7, #36]	; 0x24
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	2300      	movs	r3, #0
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	e00b      	b.n	8006542 <_StoreChar+0xaa>
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	1c59      	adds	r1, r3, #1
 8006532:	61f9      	str	r1, [r7, #28]
 8006534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	09db      	lsrs	r3, r3, #7
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b7f      	cmp	r3, #127	; 0x7f
 8006546:	d8f0      	bhi.n	800652a <_StoreChar+0x92>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	61fa      	str	r2, [r7, #28]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	221a      	movs	r2, #26
 800655e:	6939      	ldr	r1, [r7, #16]
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fe29 	bl	80061b8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff fd34 	bl	8005fd8 <_PreparePacket>
 8006570:	4602      	mov	r2, r0
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
  }
}
 8006586:	bf00      	nop
 8006588:	3728      	adds	r7, #40	; 0x28
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80065a2:	2301      	movs	r3, #1
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80065a6:	2301      	movs	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80065aa:	e007      	b.n	80065bc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80065ac:	6a3a      	ldr	r2, [r7, #32]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	623b      	str	r3, [r7, #32]
    Width++;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	3301      	adds	r3, #1
 80065ba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d2f3      	bcs.n	80065ac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d901      	bls.n	80065d0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80065d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d11f      	bne.n	800661a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01c      	beq.n	800661a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <_PrintUnsigned+0x66>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <_PrintUnsigned+0x66>
        c = '0';
 80065f0:	2330      	movs	r3, #48	; 0x30
 80065f2:	76fb      	strb	r3, [r7, #27]
 80065f4:	e001      	b.n	80065fa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80065f6:	2320      	movs	r3, #32
 80065f8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065fa:	e007      	b.n	800660c <_PrintUnsigned+0x7c>
        FieldWidth--;
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	3b01      	subs	r3, #1
 8006600:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006602:	7efb      	ldrb	r3, [r7, #27]
 8006604:	4619      	mov	r1, r3
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff ff46 	bl	8006498 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <_PrintUnsigned+0x8a>
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	429a      	cmp	r2, r3
 8006618:	d3f0      	bcc.n	80065fc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d903      	bls.n	8006628 <_PrintUnsigned+0x98>
      NumDigits--;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	3b01      	subs	r3, #1
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	e009      	b.n	800663c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006630:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d200      	bcs.n	800663c <_PrintUnsigned+0xac>
        break;
 800663a:	e005      	b.n	8006648 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	fb02 f303 	mul.w	r3, r2, r3
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006646:	e7e8      	b.n	800661a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006660:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <_PrintUnsigned+0x128>)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4413      	add	r3, r2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff ff14 	bl	8006498 <_StoreChar>
    Digit /= Base;
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e3      	bne.n	8006648 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d011      	beq.n	80066ae <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006690:	e006      	b.n	80066a0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	3b01      	subs	r3, #1
 8006696:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006698:	2120      	movs	r1, #32
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff fefc 	bl	8006498 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <_PrintUnsigned+0x11e>
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d3f1      	bcc.n	8006692 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80066ae:	bf00      	nop
 80066b0:	3728      	adds	r7, #40	; 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	08007f1c 	.word	0x08007f1c

080066bc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bfb8      	it	lt
 80066d0:	425b      	neglt	r3, r3
 80066d2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80066d4:	2301      	movs	r3, #1
 80066d6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80066d8:	e007      	b.n	80066ea <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	fb92 f3f3 	sdiv	r3, r2, r3
 80066e2:	613b      	str	r3, [r7, #16]
    Width++;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	3301      	adds	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	daf3      	bge.n	80066da <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d901      	bls.n	80066fe <_PrintInt+0x42>
    Width = NumDigits;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <_PrintInt+0x5e>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	db04      	blt.n	8006714 <_PrintInt+0x58>
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <_PrintInt+0x5e>
    FieldWidth--;
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	3b01      	subs	r3, #1
 8006718:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <_PrintInt+0x6e>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <_PrintInt+0x9c>
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d111      	bne.n	8006758 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800673a:	e006      	b.n	800674a <_PrintInt+0x8e>
        FieldWidth--;
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	3b01      	subs	r3, #1
 8006740:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006742:	2120      	movs	r1, #32
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7ff fea7 	bl	8006498 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <_PrintInt+0x9c>
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	429a      	cmp	r2, r3
 8006756:	d3f1      	bcc.n	800673c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	da07      	bge.n	800676e <_PrintInt+0xb2>
    v = -v;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	425b      	negs	r3, r3
 8006762:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006764:	212d      	movs	r1, #45	; 0x2d
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fe96 	bl	8006498 <_StoreChar>
 800676c:	e008      	b.n	8006780 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006778:	212b      	movs	r1, #43	; 0x2b
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fe8c 	bl	8006498 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d019      	beq.n	80067be <_PrintInt+0x102>
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d114      	bne.n	80067be <_PrintInt+0x102>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d111      	bne.n	80067be <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00e      	beq.n	80067be <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067a0:	e006      	b.n	80067b0 <_PrintInt+0xf4>
        FieldWidth--;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80067a8:	2130      	movs	r1, #48	; 0x30
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff fe74 	bl	8006498 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <_PrintInt+0x102>
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3f1      	bcc.n	80067a2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff fedf 	bl	8006590 <_PrintUnsigned>
}
 80067d2:	bf00      	nop
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b098      	sub	sp, #96	; 0x60
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067e8:	f3ef 8311 	mrs	r3, BASEPRI
 80067ec:	f04f 0120 	mov.w	r1, #32
 80067f0:	f381 8811 	msr	BASEPRI, r1
 80067f4:	633b      	str	r3, [r7, #48]	; 0x30
 80067f6:	48b7      	ldr	r0, [pc, #732]	; (8006ad4 <_VPrintTarget+0x2f8>)
 80067f8:	f7ff fbee 	bl	8005fd8 <_PreparePacket>
 80067fc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80067fe:	4bb5      	ldr	r3, [pc, #724]	; (8006ad4 <_VPrintTarget+0x2f8>)
 8006800:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	3301      	adds	r3, #1
 800680e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006822:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8183 	beq.w	8006b32 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800682c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006830:	2b25      	cmp	r3, #37	; 0x25
 8006832:	f040 8170 	bne.w	8006b16 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006836:	2300      	movs	r3, #0
 8006838:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800683a:	2301      	movs	r3, #1
 800683c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800684a:	3b23      	subs	r3, #35	; 0x23
 800684c:	2b0d      	cmp	r3, #13
 800684e:	d83f      	bhi.n	80068d0 <_VPrintTarget+0xf4>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <_VPrintTarget+0x7c>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	080068c1 	.word	0x080068c1
 800685c:	080068d1 	.word	0x080068d1
 8006860:	080068d1 	.word	0x080068d1
 8006864:	080068d1 	.word	0x080068d1
 8006868:	080068d1 	.word	0x080068d1
 800686c:	080068d1 	.word	0x080068d1
 8006870:	080068d1 	.word	0x080068d1
 8006874:	080068d1 	.word	0x080068d1
 8006878:	080068b1 	.word	0x080068b1
 800687c:	080068d1 	.word	0x080068d1
 8006880:	08006891 	.word	0x08006891
 8006884:	080068d1 	.word	0x080068d1
 8006888:	080068d1 	.word	0x080068d1
 800688c:	080068a1 	.word	0x080068a1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	64bb      	str	r3, [r7, #72]	; 0x48
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e01a      	b.n	80068d6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80068a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a2:	f043 0302 	orr.w	r3, r3, #2
 80068a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e012      	b.n	80068d6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80068b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b2:	f043 0304 	orr.w	r3, r3, #4
 80068b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e00a      	b.n	80068d6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80068c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c2:	f043 0308 	orr.w	r3, r3, #8
 80068c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e002      	b.n	80068d6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80068d0:	2300      	movs	r3, #0
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
 80068d4:	bf00      	nop
        }
      } while (v);
 80068d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1b0      	bne.n	800683e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80068dc:	2300      	movs	r3, #0
 80068de:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80068e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068ec:	2b2f      	cmp	r3, #47	; 0x2f
 80068ee:	d912      	bls.n	8006916 <_VPrintTarget+0x13a>
 80068f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068f4:	2b39      	cmp	r3, #57	; 0x39
 80068f6:	d80e      	bhi.n	8006916 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80068fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	461a      	mov	r2, r3
 800690a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800690e:	4413      	add	r3, r2
 8006910:	3b30      	subs	r3, #48	; 0x30
 8006912:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006914:	e7e4      	b.n	80068e0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006916:	2300      	movs	r3, #0
 8006918:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006922:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006926:	2b2e      	cmp	r3, #46	; 0x2e
 8006928:	d11d      	bne.n	8006966 <_VPrintTarget+0x18a>
        sFormat++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800693c:	2b2f      	cmp	r3, #47	; 0x2f
 800693e:	d912      	bls.n	8006966 <_VPrintTarget+0x18a>
 8006940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006944:	2b39      	cmp	r3, #57	; 0x39
 8006946:	d80e      	bhi.n	8006966 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800694e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	461a      	mov	r2, r3
 800695a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800695e:	4413      	add	r3, r2
 8006960:	3b30      	subs	r3, #48	; 0x30
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006964:	e7e4      	b.n	8006930 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800696e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006972:	2b6c      	cmp	r3, #108	; 0x6c
 8006974:	d003      	beq.n	800697e <_VPrintTarget+0x1a2>
 8006976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800697a:	2b68      	cmp	r3, #104	; 0x68
 800697c:	d107      	bne.n	800698e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800698c:	e7ef      	b.n	800696e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800698e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006992:	2b25      	cmp	r3, #37	; 0x25
 8006994:	f000 80b3 	beq.w	8006afe <_VPrintTarget+0x322>
 8006998:	2b25      	cmp	r3, #37	; 0x25
 800699a:	f2c0 80b7 	blt.w	8006b0c <_VPrintTarget+0x330>
 800699e:	2b78      	cmp	r3, #120	; 0x78
 80069a0:	f300 80b4 	bgt.w	8006b0c <_VPrintTarget+0x330>
 80069a4:	2b58      	cmp	r3, #88	; 0x58
 80069a6:	f2c0 80b1 	blt.w	8006b0c <_VPrintTarget+0x330>
 80069aa:	3b58      	subs	r3, #88	; 0x58
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	f200 80ad 	bhi.w	8006b0c <_VPrintTarget+0x330>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <_VPrintTarget+0x1dc>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	08006aaf 	.word	0x08006aaf
 80069bc:	08006b0d 	.word	0x08006b0d
 80069c0:	08006b0d 	.word	0x08006b0d
 80069c4:	08006b0d 	.word	0x08006b0d
 80069c8:	08006b0d 	.word	0x08006b0d
 80069cc:	08006b0d 	.word	0x08006b0d
 80069d0:	08006b0d 	.word	0x08006b0d
 80069d4:	08006b0d 	.word	0x08006b0d
 80069d8:	08006b0d 	.word	0x08006b0d
 80069dc:	08006b0d 	.word	0x08006b0d
 80069e0:	08006b0d 	.word	0x08006b0d
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a63 	.word	0x08006a63
 80069ec:	08006b0d 	.word	0x08006b0d
 80069f0:	08006b0d 	.word	0x08006b0d
 80069f4:	08006b0d 	.word	0x08006b0d
 80069f8:	08006b0d 	.word	0x08006b0d
 80069fc:	08006b0d 	.word	0x08006b0d
 8006a00:	08006b0d 	.word	0x08006b0d
 8006a04:	08006b0d 	.word	0x08006b0d
 8006a08:	08006b0d 	.word	0x08006b0d
 8006a0c:	08006b0d 	.word	0x08006b0d
 8006a10:	08006b0d 	.word	0x08006b0d
 8006a14:	08006b0d 	.word	0x08006b0d
 8006a18:	08006ad9 	.word	0x08006ad9
 8006a1c:	08006b0d 	.word	0x08006b0d
 8006a20:	08006b0d 	.word	0x08006b0d
 8006a24:	08006b0d 	.word	0x08006b0d
 8006a28:	08006b0d 	.word	0x08006b0d
 8006a2c:	08006a89 	.word	0x08006a89
 8006a30:	08006b0d 	.word	0x08006b0d
 8006a34:	08006b0d 	.word	0x08006b0d
 8006a38:	08006aaf 	.word	0x08006aaf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	1d19      	adds	r1, r3, #4
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6011      	str	r1, [r2, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006a50:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff fd1c 	bl	8006498 <_StoreChar>
        break;
 8006a60:	e055      	b.n	8006b0e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	1d19      	adds	r1, r3, #4
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6011      	str	r1, [r2, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006a70:	f107 0014 	add.w	r0, r7, #20
 8006a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7e:	220a      	movs	r2, #10
 8006a80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a82:	f7ff fe1b 	bl	80066bc <_PrintInt>
        break;
 8006a86:	e042      	b.n	8006b0e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	1d19      	adds	r1, r3, #4
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006a96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a98:	f107 0014 	add.w	r0, r7, #20
 8006a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	220a      	movs	r2, #10
 8006aa8:	f7ff fd72 	bl	8006590 <_PrintUnsigned>
        break;
 8006aac:	e02f      	b.n	8006b0e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	1d19      	adds	r1, r3, #4
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6011      	str	r1, [r2, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006abc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006abe:	f107 0014 	add.w	r0, r7, #20
 8006ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006acc:	2210      	movs	r2, #16
 8006ace:	f7ff fd5f 	bl	8006590 <_PrintUnsigned>
        break;
 8006ad2:	e01c      	b.n	8006b0e <_VPrintTarget+0x332>
 8006ad4:	200143d8 	.word	0x200143d8
      case 'p':
        v = va_arg(*pParamList, int);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	1d19      	adds	r1, r3, #4
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6011      	str	r1, [r2, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006ae6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ae8:	f107 0014 	add.w	r0, r7, #20
 8006aec:	2300      	movs	r3, #0
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	2308      	movs	r3, #8
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	2308      	movs	r3, #8
 8006af6:	2210      	movs	r2, #16
 8006af8:	f7ff fd4a 	bl	8006590 <_PrintUnsigned>
        break;
 8006afc:	e007      	b.n	8006b0e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006afe:	f107 0314 	add.w	r3, r7, #20
 8006b02:	2125      	movs	r1, #37	; 0x25
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fcc7 	bl	8006498 <_StoreChar>
        break;
 8006b0a:	e000      	b.n	8006b0e <_VPrintTarget+0x332>
      default:
        break;
 8006b0c:	bf00      	nop
      }
      sFormat++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3301      	adds	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	e007      	b.n	8006b26 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006b16:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006b1a:	f107 0314 	add.w	r3, r7, #20
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fcb9 	bl	8006498 <_StoreChar>
    }
  } while (*sFormat);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f47f ae72 	bne.w	8006814 <_VPrintTarget+0x38>
 8006b30:	e000      	b.n	8006b34 <_VPrintTarget+0x358>
      break;
 8006b32:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d041      	beq.n	8006bbe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4a:	e00b      	b.n	8006b64 <_VPrintTarget+0x388>
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b52:	1c59      	adds	r1, r3, #1
 8006b54:	6439      	str	r1, [r7, #64]	; 0x40
 8006b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	09db      	lsrs	r3, r3, #7
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b66:	2b7f      	cmp	r3, #127	; 0x7f
 8006b68:	d8f0      	bhi.n	8006b4c <_VPrintTarget+0x370>
 8006b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	643a      	str	r2, [r7, #64]	; 0x40
 8006b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b78:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b7e:	2300      	movs	r3, #0
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
 8006b82:	e00b      	b.n	8006b9c <_VPrintTarget+0x3c0>
 8006b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	1c59      	adds	r1, r3, #1
 8006b8c:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	09db      	lsrs	r3, r3, #7
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba0:	d8f0      	bhi.n	8006b84 <_VPrintTarget+0x3a8>
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	221a      	movs	r2, #26
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fafd 	bl	80061b8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006bc4:	bf00      	nop
 8006bc6:	3758      	adds	r7, #88	; 0x58
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006be0:	4917      	ldr	r1, [pc, #92]	; (8006c40 <SEGGER_SYSVIEW_Init+0x74>)
 8006be2:	4818      	ldr	r0, [pc, #96]	; (8006c44 <SEGGER_SYSVIEW_Init+0x78>)
 8006be4:	f7ff f8d8 	bl	8005d98 <SEGGER_RTT_AllocUpBuffer>
 8006be8:	4603      	mov	r3, r0
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	4b16      	ldr	r3, [pc, #88]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006bf0:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bf2:	785a      	ldrb	r2, [r3, #1]
 8006bf4:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bf6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006bf8:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006bfa:	7e1b      	ldrb	r3, [r3, #24]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2308      	movs	r3, #8
 8006c04:	4a11      	ldr	r2, [pc, #68]	; (8006c4c <SEGGER_SYSVIEW_Init+0x80>)
 8006c06:	490f      	ldr	r1, [pc, #60]	; (8006c44 <SEGGER_SYSVIEW_Init+0x78>)
 8006c08:	f7ff f94a 	bl	8005ea0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006c12:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <SEGGER_SYSVIEW_Init+0x84>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a0c      	ldr	r2, [pc, #48]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006c18:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006c1a:	4a0b      	ldr	r2, [pc, #44]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006c20:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006c2c:	4a06      	ldr	r2, [pc, #24]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	200133a0 	.word	0x200133a0
 8006c44:	08007ed0 	.word	0x08007ed0
 8006c48:	200143a8 	.word	0x200143a8
 8006c4c:	200143a0 	.word	0x200143a0
 8006c50:	e0001004 	.word	0xe0001004

08006c54 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006c5c:	4a04      	ldr	r2, [pc, #16]	; (8006c70 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6113      	str	r3, [r2, #16]
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	200143a8 	.word	0x200143a8

08006c74 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c80:	f04f 0120 	mov.w	r1, #32
 8006c84:	f381 8811 	msr	BASEPRI, r1
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	4808      	ldr	r0, [pc, #32]	; (8006cac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006c8c:	f7ff f9a4 	bl	8005fd8 <_PreparePacket>
 8006c90:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	68b8      	ldr	r0, [r7, #8]
 8006c98:	f7ff fa8e 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f383 8811 	msr	BASEPRI, r3
}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200143d8 	.word	0x200143d8

08006cb0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cba:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbe:	f04f 0120 	mov.w	r1, #32
 8006cc2:	f381 8811 	msr	BASEPRI, r1
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	4816      	ldr	r0, [pc, #88]	; (8006d24 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006cca:	f7ff f985 	bl	8005fd8 <_PreparePacket>
 8006cce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	61f9      	str	r1, [r7, #28]
 8006ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	6938      	ldr	r0, [r7, #16]
 8006d12:	f7ff fa51 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f383 8811 	msr	BASEPRI, r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200143d8 	.word	0x200143d8

08006d28 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08c      	sub	sp, #48	; 0x30
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d34:	f3ef 8311 	mrs	r3, BASEPRI
 8006d38:	f04f 0120 	mov.w	r1, #32
 8006d3c:	f381 8811 	msr	BASEPRI, r1
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	4825      	ldr	r0, [pc, #148]	; (8006dd8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006d44:	f7ff f948 	bl	8005fd8 <_PreparePacket>
 8006d48:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d56:	e00b      	b.n	8006d70 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	1c59      	adds	r1, r3, #1
 8006d60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	09db      	lsrs	r3, r3, #7
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	2b7f      	cmp	r3, #127	; 0x7f
 8006d74:	d8f0      	bhi.n	8006d58 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	e00b      	b.n	8006da8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	1c59      	adds	r1, r3, #1
 8006d98:	6279      	str	r1, [r7, #36]	; 0x24
 8006d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	09db      	lsrs	r3, r3, #7
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	2b7f      	cmp	r3, #127	; 0x7f
 8006dac:	d8f0      	bhi.n	8006d90 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	627a      	str	r2, [r7, #36]	; 0x24
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6979      	ldr	r1, [r7, #20]
 8006dc2:	69b8      	ldr	r0, [r7, #24]
 8006dc4:	f7ff f9f8 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
 8006dd0:	3730      	adds	r7, #48	; 0x30
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200143d8 	.word	0x200143d8

08006ddc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	; 0x38
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006dea:	f3ef 8311 	mrs	r3, BASEPRI
 8006dee:	f04f 0120 	mov.w	r1, #32
 8006df2:	f381 8811 	msr	BASEPRI, r1
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	4832      	ldr	r0, [pc, #200]	; (8006ec4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006dfa:	f7ff f8ed 	bl	8005fd8 <_PreparePacket>
 8006dfe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e0c:	e00b      	b.n	8006e26 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	6379      	str	r1, [r7, #52]	; 0x34
 8006e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	09db      	lsrs	r3, r3, #7
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2a:	d8f0      	bhi.n	8006e0e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	637a      	str	r2, [r7, #52]	; 0x34
 8006e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e44:	e00b      	b.n	8006e5e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	1c59      	adds	r1, r3, #1
 8006e4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	09db      	lsrs	r3, r3, #7
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	2b7f      	cmp	r3, #127	; 0x7f
 8006e62:	d8f0      	bhi.n	8006e46 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	623b      	str	r3, [r7, #32]
 8006e7c:	e00b      	b.n	8006e96 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	1c59      	adds	r1, r3, #1
 8006e86:	6279      	str	r1, [r7, #36]	; 0x24
 8006e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	09db      	lsrs	r3, r3, #7
 8006e94:	623b      	str	r3, [r7, #32]
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	2b7f      	cmp	r3, #127	; 0x7f
 8006e9a:	d8f0      	bhi.n	8006e7e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ea2:	6a3a      	ldr	r2, [r7, #32]
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	69b8      	ldr	r0, [r7, #24]
 8006eb2:	f7ff f981 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f383 8811 	msr	BASEPRI, r3
}
 8006ebc:	bf00      	nop
 8006ebe:	3738      	adds	r7, #56	; 0x38
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	200143d8 	.word	0x200143d8

08006ec8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b090      	sub	sp, #64	; 0x40
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eda:	f04f 0120 	mov.w	r1, #32
 8006ede:	f381 8811 	msr	BASEPRI, r1
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	4840      	ldr	r0, [pc, #256]	; (8006fe8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006ee6:	f7ff f877 	bl	8005fd8 <_PreparePacket>
 8006eea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ef8:	e00b      	b.n	8006f12 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f00:	1c59      	adds	r1, r3, #1
 8006f02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006f04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	09db      	lsrs	r3, r3, #7
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b7f      	cmp	r3, #127	; 0x7f
 8006f16:	d8f0      	bhi.n	8006efa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f30:	e00b      	b.n	8006f4a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	6379      	str	r1, [r7, #52]	; 0x34
 8006f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4e:	d8f0      	bhi.n	8006f32 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	637a      	str	r2, [r7, #52]	; 0x34
 8006f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f68:	e00b      	b.n	8006f82 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	1c59      	adds	r1, r3, #1
 8006f72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	09db      	lsrs	r3, r3, #7
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b7f      	cmp	r3, #127	; 0x7f
 8006f86:	d8f0      	bhi.n	8006f6a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9e:	623b      	str	r3, [r7, #32]
 8006fa0:	e00b      	b.n	8006fba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	6279      	str	r1, [r7, #36]	; 0x24
 8006fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	09db      	lsrs	r3, r3, #7
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbe:	d8f0      	bhi.n	8006fa2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8006fc6:	6a3a      	ldr	r2, [r7, #32]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	69b8      	ldr	r0, [r7, #24]
 8006fd6:	f7ff f8ef 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f383 8811 	msr	BASEPRI, r3
}
 8006fe0:	bf00      	nop
 8006fe2:	3740      	adds	r7, #64	; 0x40
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200143d8 	.word	0x200143d8

08006fec <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b092      	sub	sp, #72	; 0x48
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8006ffe:	f04f 0120 	mov.w	r1, #32
 8007002:	f381 8811 	msr	BASEPRI, r1
 8007006:	61fb      	str	r3, [r7, #28]
 8007008:	484e      	ldr	r0, [pc, #312]	; (8007144 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800700a:	f7fe ffe5 	bl	8005fd8 <_PreparePacket>
 800700e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	647b      	str	r3, [r7, #68]	; 0x44
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	643b      	str	r3, [r7, #64]	; 0x40
 800701c:	e00b      	b.n	8007036 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800701e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007020:	b2da      	uxtb	r2, r3
 8007022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007024:	1c59      	adds	r1, r3, #1
 8007026:	6479      	str	r1, [r7, #68]	; 0x44
 8007028:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007032:	09db      	lsrs	r3, r3, #7
 8007034:	643b      	str	r3, [r7, #64]	; 0x40
 8007036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007038:	2b7f      	cmp	r3, #127	; 0x7f
 800703a:	d8f0      	bhi.n	800701e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800703c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	647a      	str	r2, [r7, #68]	; 0x44
 8007042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	63bb      	str	r3, [r7, #56]	; 0x38
 8007054:	e00b      	b.n	800706e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	b2da      	uxtb	r2, r3
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	09db      	lsrs	r3, r3, #7
 800706c:	63bb      	str	r3, [r7, #56]	; 0x38
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	2b7f      	cmp	r3, #127	; 0x7f
 8007072:	d8f0      	bhi.n	8007056 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8007074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	63fa      	str	r2, [r7, #60]	; 0x3c
 800707a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007082:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
 800708c:	e00b      	b.n	80070a6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	b2da      	uxtb	r2, r3
 8007092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007094:	1c59      	adds	r1, r3, #1
 8007096:	6379      	str	r1, [r7, #52]	; 0x34
 8007098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	09db      	lsrs	r3, r3, #7
 80070a4:	633b      	str	r3, [r7, #48]	; 0x30
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	2b7f      	cmp	r3, #127	; 0x7f
 80070aa:	d8f0      	bhi.n	800708e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80070ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	637a      	str	r2, [r7, #52]	; 0x34
 80070b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070c4:	e00b      	b.n	80070de <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	1c59      	adds	r1, r3, #1
 80070ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	09db      	lsrs	r3, r3, #7
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	2b7f      	cmp	r3, #127	; 0x7f
 80070e2:	d8f0      	bhi.n	80070c6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fa:	623b      	str	r3, [r7, #32]
 80070fc:	e00b      	b.n	8007116 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	1c59      	adds	r1, r3, #1
 8007106:	6279      	str	r1, [r7, #36]	; 0x24
 8007108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	09db      	lsrs	r3, r3, #7
 8007114:	623b      	str	r3, [r7, #32]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2b7f      	cmp	r3, #127	; 0x7f
 800711a:	d8f0      	bhi.n	80070fe <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	627a      	str	r2, [r7, #36]	; 0x24
 8007122:	6a3a      	ldr	r2, [r7, #32]
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	6979      	ldr	r1, [r7, #20]
 8007130:	69b8      	ldr	r0, [r7, #24]
 8007132:	f7ff f841 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f383 8811 	msr	BASEPRI, r3
}
 800713c:	bf00      	nop
 800713e:	3748      	adds	r7, #72	; 0x48
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	200143d8 	.word	0x200143d8

08007148 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b08c      	sub	sp, #48	; 0x30
 800714c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800714e:	4b59      	ldr	r3, [pc, #356]	; (80072b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007150:	2201      	movs	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007154:	f3ef 8311 	mrs	r3, BASEPRI
 8007158:	f04f 0120 	mov.w	r1, #32
 800715c:	f381 8811 	msr	BASEPRI, r1
 8007160:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007162:	4b54      	ldr	r3, [pc, #336]	; (80072b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007164:	785b      	ldrb	r3, [r3, #1]
 8007166:	220a      	movs	r2, #10
 8007168:	4953      	ldr	r1, [pc, #332]	; (80072b8 <SEGGER_SYSVIEW_Start+0x170>)
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 f830 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007176:	f7fe fae1 	bl	800573c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800717a:	200a      	movs	r0, #10
 800717c:	f7ff fd7a 	bl	8006c74 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007180:	f3ef 8311 	mrs	r3, BASEPRI
 8007184:	f04f 0120 	mov.w	r1, #32
 8007188:	f381 8811 	msr	BASEPRI, r1
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	484b      	ldr	r0, [pc, #300]	; (80072bc <SEGGER_SYSVIEW_Start+0x174>)
 8007190:	f7fe ff22 	bl	8005fd8 <_PreparePacket>
 8007194:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719e:	4b45      	ldr	r3, [pc, #276]	; (80072b4 <SEGGER_SYSVIEW_Start+0x16c>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071a4:	e00b      	b.n	80071be <SEGGER_SYSVIEW_Start+0x76>
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	1c59      	adds	r1, r3, #1
 80071ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	09db      	lsrs	r3, r3, #7
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	2b7f      	cmp	r3, #127	; 0x7f
 80071c2:	d8f0      	bhi.n	80071a6 <SEGGER_SYSVIEW_Start+0x5e>
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
 80071d8:	4b36      	ldr	r3, [pc, #216]	; (80072b4 <SEGGER_SYSVIEW_Start+0x16c>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	623b      	str	r3, [r7, #32]
 80071de:	e00b      	b.n	80071f8 <SEGGER_SYSVIEW_Start+0xb0>
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	1c59      	adds	r1, r3, #1
 80071e8:	6279      	str	r1, [r7, #36]	; 0x24
 80071ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	09db      	lsrs	r3, r3, #7
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2b7f      	cmp	r3, #127	; 0x7f
 80071fc:	d8f0      	bhi.n	80071e0 <SEGGER_SYSVIEW_Start+0x98>
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	627a      	str	r2, [r7, #36]	; 0x24
 8007204:	6a3a      	ldr	r2, [r7, #32]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	4b28      	ldr	r3, [pc, #160]	; (80072b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e00b      	b.n	8007232 <SEGGER_SYSVIEW_Start+0xea>
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	b2da      	uxtb	r2, r3
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	1c59      	adds	r1, r3, #1
 8007222:	61f9      	str	r1, [r7, #28]
 8007224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	09db      	lsrs	r3, r3, #7
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b7f      	cmp	r3, #127	; 0x7f
 8007236:	d8f0      	bhi.n	800721a <SEGGER_SYSVIEW_Start+0xd2>
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	61fa      	str	r2, [r7, #28]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	2300      	movs	r3, #0
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	e00b      	b.n	800726a <SEGGER_SYSVIEW_Start+0x122>
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	b2da      	uxtb	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	1c59      	adds	r1, r3, #1
 800725a:	6179      	str	r1, [r7, #20]
 800725c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	09db      	lsrs	r3, r3, #7
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b7f      	cmp	r3, #127	; 0x7f
 800726e:	d8f0      	bhi.n	8007252 <SEGGER_SYSVIEW_Start+0x10a>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	617a      	str	r2, [r7, #20]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007280:	2218      	movs	r2, #24
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fe ff97 	bl	80061b8 <_SendPacket>
      RECORD_END();
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007290:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007298:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <SEGGER_SYSVIEW_Start+0x16c>)
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800729e:	f000 f9eb 	bl	8007678 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80072a2:	f000 f9b1 	bl	8007608 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80072a6:	f000 fc23 	bl	8007af0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80072aa:	bf00      	nop
 80072ac:	3730      	adds	r7, #48	; 0x30
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200143a8 	.word	0x200143a8
 80072b8:	08007f10 	.word	0x08007f10
 80072bc:	200143d8 	.word	0x200143d8

080072c0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80072c6:	f3ef 8311 	mrs	r3, BASEPRI
 80072ca:	f04f 0120 	mov.w	r1, #32
 80072ce:	f381 8811 	msr	BASEPRI, r1
 80072d2:	607b      	str	r3, [r7, #4]
 80072d4:	480b      	ldr	r0, [pc, #44]	; (8007304 <SEGGER_SYSVIEW_Stop+0x44>)
 80072d6:	f7fe fe7f 	bl	8005fd8 <_PreparePacket>
 80072da:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <SEGGER_SYSVIEW_Stop+0x48>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80072e4:	220b      	movs	r2, #11
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6838      	ldr	r0, [r7, #0]
 80072ea:	f7fe ff65 	bl	80061b8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80072ee:	4b06      	ldr	r3, [pc, #24]	; (8007308 <SEGGER_SYSVIEW_Stop+0x48>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f383 8811 	msr	BASEPRI, r3
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200143d8 	.word	0x200143d8
 8007308:	200143a8 	.word	0x200143a8

0800730c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b08c      	sub	sp, #48	; 0x30
 8007310:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007312:	f3ef 8311 	mrs	r3, BASEPRI
 8007316:	f04f 0120 	mov.w	r1, #32
 800731a:	f381 8811 	msr	BASEPRI, r1
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	4845      	ldr	r0, [pc, #276]	; (8007438 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007322:	f7fe fe59 	bl	8005fd8 <_PreparePacket>
 8007326:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007330:	4b42      	ldr	r3, [pc, #264]	; (800743c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
 8007336:	e00b      	b.n	8007350 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	b2da      	uxtb	r2, r3
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	1c59      	adds	r1, r3, #1
 8007340:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	09db      	lsrs	r3, r3, #7
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2b7f      	cmp	r3, #127	; 0x7f
 8007354:	d8f0      	bhi.n	8007338 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800735c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
 800736a:	4b34      	ldr	r3, [pc, #208]	; (800743c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	623b      	str	r3, [r7, #32]
 8007370:	e00b      	b.n	800738a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	b2da      	uxtb	r2, r3
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	6279      	str	r1, [r7, #36]	; 0x24
 800737c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	09db      	lsrs	r3, r3, #7
 8007388:	623b      	str	r3, [r7, #32]
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	2b7f      	cmp	r3, #127	; 0x7f
 800738e:	d8f0      	bhi.n	8007372 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	627a      	str	r2, [r7, #36]	; 0x24
 8007396:	6a3a      	ldr	r2, [r7, #32]
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	4b25      	ldr	r3, [pc, #148]	; (800743c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e00b      	b.n	80073c4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	61f9      	str	r1, [r7, #28]
 80073b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	09db      	lsrs	r3, r3, #7
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b7f      	cmp	r3, #127	; 0x7f
 80073c8:	d8f0      	bhi.n	80073ac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	61fa      	str	r2, [r7, #28]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	e00b      	b.n	80073fc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	6179      	str	r1, [r7, #20]
 80073ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	09db      	lsrs	r3, r3, #7
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007400:	d8f0      	bhi.n	80073e4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	617a      	str	r2, [r7, #20]
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007412:	2218      	movs	r2, #24
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	68b8      	ldr	r0, [r7, #8]
 8007418:	f7fe fece 	bl	80061b8 <_SendPacket>
  RECORD_END();
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007422:	4b06      	ldr	r3, [pc, #24]	; (800743c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800742a:	4b04      	ldr	r3, [pc, #16]	; (800743c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	4798      	blx	r3
  }
}
 8007430:	bf00      	nop
 8007432:	3730      	adds	r7, #48	; 0x30
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	200143d8 	.word	0x200143d8
 800743c:	200143a8 	.word	0x200143a8

08007440 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007440:	b580      	push	{r7, lr}
 8007442:	b092      	sub	sp, #72	; 0x48
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007448:	f3ef 8311 	mrs	r3, BASEPRI
 800744c:	f04f 0120 	mov.w	r1, #32
 8007450:	f381 8811 	msr	BASEPRI, r1
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	486a      	ldr	r0, [pc, #424]	; (8007600 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007458:	f7fe fdbe 	bl	8005fd8 <_PreparePacket>
 800745c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	647b      	str	r3, [r7, #68]	; 0x44
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b66      	ldr	r3, [pc, #408]	; (8007604 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	643b      	str	r3, [r7, #64]	; 0x40
 8007472:	e00b      	b.n	800748c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007476:	b2da      	uxtb	r2, r3
 8007478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800747a:	1c59      	adds	r1, r3, #1
 800747c:	6479      	str	r1, [r7, #68]	; 0x44
 800747e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007488:	09db      	lsrs	r3, r3, #7
 800748a:	643b      	str	r3, [r7, #64]	; 0x40
 800748c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748e:	2b7f      	cmp	r3, #127	; 0x7f
 8007490:	d8f0      	bhi.n	8007474 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	647a      	str	r2, [r7, #68]	; 0x44
 8007498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ac:	e00b      	b.n	80074c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b4:	1c59      	adds	r1, r3, #1
 80074b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80074b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	09db      	lsrs	r3, r3, #7
 80074c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	2b7f      	cmp	r3, #127	; 0x7f
 80074ca:	d8f0      	bhi.n	80074ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80074cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	4619      	mov	r1, r3
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7fe fd27 	bl	8005f38 <_EncodeStr>
 80074ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80074ec:	2209      	movs	r2, #9
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	6938      	ldr	r0, [r7, #16]
 80074f2:	f7fe fe61 	bl	80061b8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b40      	ldr	r3, [pc, #256]	; (8007604 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	633b      	str	r3, [r7, #48]	; 0x30
 800750a:	e00b      	b.n	8007524 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	b2da      	uxtb	r2, r3
 8007510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007512:	1c59      	adds	r1, r3, #1
 8007514:	6379      	str	r1, [r7, #52]	; 0x34
 8007516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	09db      	lsrs	r3, r3, #7
 8007522:	633b      	str	r3, [r7, #48]	; 0x30
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2b7f      	cmp	r3, #127	; 0x7f
 8007528:	d8f0      	bhi.n	800750c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	637a      	str	r2, [r7, #52]	; 0x34
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007538:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
 8007544:	e00b      	b.n	800755e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	b2da      	uxtb	r2, r3
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	1c59      	adds	r1, r3, #1
 800754e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755a:	09db      	lsrs	r3, r3, #7
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	2b7f      	cmp	r3, #127	; 0x7f
 8007562:	d8f0      	bhi.n	8007546 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	62fa      	str	r2, [r7, #44]	; 0x2c
 800756a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	623b      	str	r3, [r7, #32]
 800757e:	e00b      	b.n	8007598 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	b2da      	uxtb	r2, r3
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	1c59      	adds	r1, r3, #1
 8007588:	6279      	str	r1, [r7, #36]	; 0x24
 800758a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	09db      	lsrs	r3, r3, #7
 8007596:	623b      	str	r3, [r7, #32]
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	2b7f      	cmp	r3, #127	; 0x7f
 800759c:	d8f0      	bhi.n	8007580 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	627a      	str	r2, [r7, #36]	; 0x24
 80075a4:	6a3a      	ldr	r2, [r7, #32]
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	2300      	movs	r3, #0
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	e00b      	b.n	80075d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	1c59      	adds	r1, r3, #1
 80075c0:	61f9      	str	r1, [r7, #28]
 80075c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	09db      	lsrs	r3, r3, #7
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2b7f      	cmp	r3, #127	; 0x7f
 80075d4:	d8f0      	bhi.n	80075b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	61fa      	str	r2, [r7, #28]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80075e6:	2215      	movs	r2, #21
 80075e8:	68f9      	ldr	r1, [r7, #12]
 80075ea:	6938      	ldr	r0, [r7, #16]
 80075ec:	f7fe fde4 	bl	80061b8 <_SendPacket>
  RECORD_END();
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f383 8811 	msr	BASEPRI, r3
}
 80075f6:	bf00      	nop
 80075f8:	3748      	adds	r7, #72	; 0x48
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200143d8 	.word	0x200143d8
 8007604:	200143a8 	.word	0x200143a8

08007608 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800760c:	4b07      	ldr	r3, [pc, #28]	; (800762c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800761e:	4b03      	ldr	r3, [pc, #12]	; (800762c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4798      	blx	r3
  }
}
 8007626:	bf00      	nop
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	200143a8 	.word	0x200143a8

08007630 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007638:	f3ef 8311 	mrs	r3, BASEPRI
 800763c:	f04f 0120 	mov.w	r1, #32
 8007640:	f381 8811 	msr	BASEPRI, r1
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	480b      	ldr	r0, [pc, #44]	; (8007674 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007648:	f7fe fcc6 	bl	8005fd8 <_PreparePacket>
 800764c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800764e:	2280      	movs	r2, #128	; 0x80
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	6938      	ldr	r0, [r7, #16]
 8007654:	f7fe fc70 	bl	8005f38 <_EncodeStr>
 8007658:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800765a:	220e      	movs	r2, #14
 800765c:	68f9      	ldr	r1, [r7, #12]
 800765e:	6938      	ldr	r0, [r7, #16]
 8007660:	f7fe fdaa 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f383 8811 	msr	BASEPRI, r3
}
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	200143d8 	.word	0x200143d8

08007678 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800767e:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01a      	beq.n	80076bc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007686:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d015      	beq.n	80076bc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4798      	blx	r3
 8007698:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800769c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800769e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	000a      	movs	r2, r1
 80076ac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80076ae:	4613      	mov	r3, r2
 80076b0:	461a      	mov	r2, r3
 80076b2:	4621      	mov	r1, r4
 80076b4:	200d      	movs	r0, #13
 80076b6:	f7ff fb37 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x2>
 80076ba:	e006      	b.n	80076ca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4619      	mov	r1, r3
 80076c2:	200c      	movs	r0, #12
 80076c4:	f7ff faf4 	bl	8006cb0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200143a8 	.word	0x200143a8
 80076d8:	e0001004 	.word	0xe0001004

080076dc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076e2:	f3ef 8311 	mrs	r3, BASEPRI
 80076e6:	f04f 0120 	mov.w	r1, #32
 80076ea:	f381 8811 	msr	BASEPRI, r1
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	4819      	ldr	r0, [pc, #100]	; (8007758 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80076f2:	f7fe fc71 	bl	8005fd8 <_PreparePacket>
 80076f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80076fc:	4b17      	ldr	r3, [pc, #92]	; (800775c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007704:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	e00b      	b.n	8007728 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	b2da      	uxtb	r2, r3
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	1c59      	adds	r1, r3, #1
 8007718:	6179      	str	r1, [r7, #20]
 800771a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	09db      	lsrs	r3, r3, #7
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b7f      	cmp	r3, #127	; 0x7f
 800772c:	d8f0      	bhi.n	8007710 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	617a      	str	r2, [r7, #20]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800773e:	2202      	movs	r2, #2
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	68b8      	ldr	r0, [r7, #8]
 8007744:	f7fe fd38 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f383 8811 	msr	BASEPRI, r3
}
 800774e:	bf00      	nop
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200143d8 	.word	0x200143d8
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007766:	f3ef 8311 	mrs	r3, BASEPRI
 800776a:	f04f 0120 	mov.w	r1, #32
 800776e:	f381 8811 	msr	BASEPRI, r1
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	4807      	ldr	r0, [pc, #28]	; (8007794 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007776:	f7fe fc2f 	bl	8005fd8 <_PreparePacket>
 800777a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800777c:	2203      	movs	r2, #3
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6838      	ldr	r0, [r7, #0]
 8007782:	f7fe fd19 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f383 8811 	msr	BASEPRI, r3
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200143d8 	.word	0x200143d8

08007798 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800779e:	f3ef 8311 	mrs	r3, BASEPRI
 80077a2:	f04f 0120 	mov.w	r1, #32
 80077a6:	f381 8811 	msr	BASEPRI, r1
 80077aa:	607b      	str	r3, [r7, #4]
 80077ac:	4807      	ldr	r0, [pc, #28]	; (80077cc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80077ae:	f7fe fc13 	bl	8005fd8 <_PreparePacket>
 80077b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80077b4:	2212      	movs	r2, #18
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6838      	ldr	r0, [r7, #0]
 80077ba:	f7fe fcfd 	bl	80061b8 <_SendPacket>
  RECORD_END();
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f383 8811 	msr	BASEPRI, r3
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	200143d8 	.word	0x200143d8

080077d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80077d6:	f3ef 8311 	mrs	r3, BASEPRI
 80077da:	f04f 0120 	mov.w	r1, #32
 80077de:	f381 8811 	msr	BASEPRI, r1
 80077e2:	607b      	str	r3, [r7, #4]
 80077e4:	4807      	ldr	r0, [pc, #28]	; (8007804 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80077e6:	f7fe fbf7 	bl	8005fd8 <_PreparePacket>
 80077ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80077ec:	2211      	movs	r2, #17
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7fe fce1 	bl	80061b8 <_SendPacket>
  RECORD_END();
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f383 8811 	msr	BASEPRI, r3
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	200143d8 	.word	0x200143d8

08007808 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007810:	f3ef 8311 	mrs	r3, BASEPRI
 8007814:	f04f 0120 	mov.w	r1, #32
 8007818:	f381 8811 	msr	BASEPRI, r1
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	4819      	ldr	r0, [pc, #100]	; (8007884 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007820:	f7fe fbda 	bl	8005fd8 <_PreparePacket>
 8007824:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800782a:	4b17      	ldr	r3, [pc, #92]	; (8007888 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	61bb      	str	r3, [r7, #24]
 800783c:	e00b      	b.n	8007856 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	1c59      	adds	r1, r3, #1
 8007846:	61f9      	str	r1, [r7, #28]
 8007848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	09db      	lsrs	r3, r3, #7
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2b7f      	cmp	r3, #127	; 0x7f
 800785a:	d8f0      	bhi.n	800783e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	61fa      	str	r2, [r7, #28]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800786c:	2208      	movs	r2, #8
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	6938      	ldr	r0, [r7, #16]
 8007872:	f7fe fca1 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f383 8811 	msr	BASEPRI, r3
}
 800787c:	bf00      	nop
 800787e:	3720      	adds	r7, #32
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	200143d8 	.word	0x200143d8
 8007888:	200143a8 	.word	0x200143a8

0800788c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007894:	f3ef 8311 	mrs	r3, BASEPRI
 8007898:	f04f 0120 	mov.w	r1, #32
 800789c:	f381 8811 	msr	BASEPRI, r1
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	4819      	ldr	r0, [pc, #100]	; (8007908 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80078a4:	f7fe fb98 	bl	8005fd8 <_PreparePacket>
 80078a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80078ae:	4b17      	ldr	r3, [pc, #92]	; (800790c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	61fb      	str	r3, [r7, #28]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	e00b      	b.n	80078da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	1c59      	adds	r1, r3, #1
 80078ca:	61f9      	str	r1, [r7, #28]
 80078cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	09db      	lsrs	r3, r3, #7
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b7f      	cmp	r3, #127	; 0x7f
 80078de:	d8f0      	bhi.n	80078c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	61fa      	str	r2, [r7, #28]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80078f0:	2204      	movs	r2, #4
 80078f2:	68f9      	ldr	r1, [r7, #12]
 80078f4:	6938      	ldr	r0, [r7, #16]
 80078f6:	f7fe fc5f 	bl	80061b8 <_SendPacket>
  RECORD_END();
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f383 8811 	msr	BASEPRI, r3
}
 8007900:	bf00      	nop
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	200143d8 	.word	0x200143d8
 800790c:	200143a8 	.word	0x200143a8

08007910 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007918:	f3ef 8311 	mrs	r3, BASEPRI
 800791c:	f04f 0120 	mov.w	r1, #32
 8007920:	f381 8811 	msr	BASEPRI, r1
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	4819      	ldr	r0, [pc, #100]	; (800798c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007928:	f7fe fb56 	bl	8005fd8 <_PreparePacket>
 800792c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	e00b      	b.n	800795e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	1c59      	adds	r1, r3, #1
 800794e:	61f9      	str	r1, [r7, #28]
 8007950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	09db      	lsrs	r3, r3, #7
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b7f      	cmp	r3, #127	; 0x7f
 8007962:	d8f0      	bhi.n	8007946 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	61fa      	str	r2, [r7, #28]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007974:	2206      	movs	r2, #6
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	6938      	ldr	r0, [r7, #16]
 800797a:	f7fe fc1d 	bl	80061b8 <_SendPacket>
  RECORD_END();
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f383 8811 	msr	BASEPRI, r3
}
 8007984:	bf00      	nop
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	200143d8 	.word	0x200143d8
 8007990:	200143a8 	.word	0x200143a8

08007994 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	1ad3      	subs	r3, r2, r3
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	200143a8 	.word	0x200143a8

080079b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08c      	sub	sp, #48	; 0x30
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80079be:	4b3b      	ldr	r3, [pc, #236]	; (8007aac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d06d      	beq.n	8007aa2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80079c6:	4b39      	ldr	r3, [pc, #228]	; (8007aac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80079cc:	2300      	movs	r3, #0
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80079d0:	e008      	b.n	80079e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	3301      	adds	r3, #1
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d3f2      	bcc.n	80079d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80079ec:	e000      	b.n	80079f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80079ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d055      	beq.n	8007aa2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079f6:	f3ef 8311 	mrs	r3, BASEPRI
 80079fa:	f04f 0120 	mov.w	r1, #32
 80079fe:	f381 8811 	msr	BASEPRI, r1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	482a      	ldr	r0, [pc, #168]	; (8007ab0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007a06:	f7fe fae7 	bl	8005fd8 <_PreparePacket>
 8007a0a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	e00b      	b.n	8007a32 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	1c59      	adds	r1, r3, #1
 8007a22:	6279      	str	r1, [r7, #36]	; 0x24
 8007a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	09db      	lsrs	r3, r3, #7
 8007a30:	623b      	str	r3, [r7, #32]
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	2b7f      	cmp	r3, #127	; 0x7f
 8007a36:	d8f0      	bhi.n	8007a1a <SEGGER_SYSVIEW_SendModule+0x66>
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8007a3e:	6a3a      	ldr	r2, [r7, #32]
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	e00b      	b.n	8007a6c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	1c59      	adds	r1, r3, #1
 8007a5c:	61f9      	str	r1, [r7, #28]
 8007a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	09db      	lsrs	r3, r3, #7
 8007a6a:	61bb      	str	r3, [r7, #24]
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a70:	d8f0      	bhi.n	8007a54 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	61fa      	str	r2, [r7, #28]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2280      	movs	r2, #128	; 0x80
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7fe fa54 	bl	8005f38 <_EncodeStr>
 8007a90:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007a92:	2216      	movs	r2, #22
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6938      	ldr	r0, [r7, #16]
 8007a98:	f7fe fb8e 	bl	80061b8 <_SendPacket>
      RECORD_END();
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3730      	adds	r7, #48	; 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200143d0 	.word	0x200143d0
 8007ab0:	200143d8 	.word	0x200143d8

08007ab4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007aba:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00f      	beq.n	8007ae2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007ac2:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f2      	bne.n	8007ac8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	200143d0 	.word	0x200143d0

08007af0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007af6:	f3ef 8311 	mrs	r3, BASEPRI
 8007afa:	f04f 0120 	mov.w	r1, #32
 8007afe:	f381 8811 	msr	BASEPRI, r1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	4817      	ldr	r0, [pc, #92]	; (8007b64 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007b06:	f7fe fa67 	bl	8005fd8 <_PreparePacket>
 8007b0a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	e00b      	b.n	8007b34 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	1c59      	adds	r1, r3, #1
 8007b24:	6179      	str	r1, [r7, #20]
 8007b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	09db      	lsrs	r3, r3, #7
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b7f      	cmp	r3, #127	; 0x7f
 8007b38:	d8f0      	bhi.n	8007b1c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	617a      	str	r2, [r7, #20]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007b4a:	221b      	movs	r2, #27
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	68b8      	ldr	r0, [r7, #8]
 8007b50:	f7fe fb32 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f383 8811 	msr	BASEPRI, r3
}
 8007b5a:	bf00      	nop
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	200143d8 	.word	0x200143d8
 8007b68:	200143d4 	.word	0x200143d4

08007b6c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007b6c:	b40f      	push	{r0, r1, r2, r3}
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2100      	movs	r1, #0
 8007b80:	6938      	ldr	r0, [r7, #16]
 8007b82:	f7fe fe2b 	bl	80067dc <_VPrintTarget>
  va_end(ParamList);
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b90:	b004      	add	sp, #16
 8007b92:	4770      	bx	lr

08007b94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	; 0x28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007ba0:	f04f 0120 	mov.w	r1, #32
 8007ba4:	f381 8811 	msr	BASEPRI, r1
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	4827      	ldr	r0, [pc, #156]	; (8007c48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007bac:	f7fe fa14 	bl	8005fd8 <_PreparePacket>
 8007bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bb2:	2280      	movs	r2, #128	; 0x80
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	6938      	ldr	r0, [r7, #16]
 8007bb8:	f7fe f9be 	bl	8005f38 <_EncodeStr>
 8007bbc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	e00b      	b.n	8007be0 <SEGGER_SYSVIEW_Warn+0x4c>
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	1c59      	adds	r1, r3, #1
 8007bd0:	6279      	str	r1, [r7, #36]	; 0x24
 8007bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	09db      	lsrs	r3, r3, #7
 8007bde:	623b      	str	r3, [r7, #32]
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	2b7f      	cmp	r3, #127	; 0x7f
 8007be4:	d8f0      	bhi.n	8007bc8 <SEGGER_SYSVIEW_Warn+0x34>
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	627a      	str	r2, [r7, #36]	; 0x24
 8007bec:	6a3a      	ldr	r2, [r7, #32]
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	e00b      	b.n	8007c18 <SEGGER_SYSVIEW_Warn+0x84>
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	1c59      	adds	r1, r3, #1
 8007c08:	61f9      	str	r1, [r7, #28]
 8007c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	09db      	lsrs	r3, r3, #7
 8007c16:	61bb      	str	r3, [r7, #24]
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c1c:	d8f0      	bhi.n	8007c00 <SEGGER_SYSVIEW_Warn+0x6c>
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	61fa      	str	r2, [r7, #28]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	b2d2      	uxtb	r2, r2
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007c2e:	221a      	movs	r2, #26
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	6938      	ldr	r0, [r7, #16]
 8007c34:	f7fe fac0 	bl	80061b8 <_SendPacket>
  RECORD_END();
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
}
 8007c3e:	bf00      	nop
 8007c40:	3728      	adds	r7, #40	; 0x28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200143d8 	.word	0x200143d8

08007c4c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007c50:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c52:	7e1b      	ldrb	r3, [r3, #24]
 8007c54:	4619      	mov	r1, r3
 8007c56:	4a13      	ldr	r2, [pc, #76]	; (8007ca4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007c58:	460b      	mov	r3, r1
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	440b      	add	r3, r1
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	336c      	adds	r3, #108	; 0x6c
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c68:	7e1b      	ldrb	r3, [r3, #24]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	490d      	ldr	r1, [pc, #52]	; (8007ca4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007c6e:	4603      	mov	r3, r0
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	4403      	add	r3, r0
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	440b      	add	r3, r1
 8007c78:	3370      	adds	r3, #112	; 0x70
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d00b      	beq.n	8007c98 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c82:	789b      	ldrb	r3, [r3, #2]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d107      	bne.n	8007c98 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007c8e:	f7fe f9af 	bl	8005ff0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007c92:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007c98:	4b01      	ldr	r3, [pc, #4]	; (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200143a8 	.word	0x200143a8
 8007ca4:	20012ee8 	.word	0x20012ee8

08007ca8 <__libc_init_array>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4d0d      	ldr	r5, [pc, #52]	; (8007ce0 <__libc_init_array+0x38>)
 8007cac:	4c0d      	ldr	r4, [pc, #52]	; (8007ce4 <__libc_init_array+0x3c>)
 8007cae:	1b64      	subs	r4, r4, r5
 8007cb0:	10a4      	asrs	r4, r4, #2
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	42a6      	cmp	r6, r4
 8007cb6:	d109      	bne.n	8007ccc <__libc_init_array+0x24>
 8007cb8:	4d0b      	ldr	r5, [pc, #44]	; (8007ce8 <__libc_init_array+0x40>)
 8007cba:	4c0c      	ldr	r4, [pc, #48]	; (8007cec <__libc_init_array+0x44>)
 8007cbc:	f000 f83e 	bl	8007d3c <_init>
 8007cc0:	1b64      	subs	r4, r4, r5
 8007cc2:	10a4      	asrs	r4, r4, #2
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	42a6      	cmp	r6, r4
 8007cc8:	d105      	bne.n	8007cd6 <__libc_init_array+0x2e>
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd0:	4798      	blx	r3
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	e7ee      	b.n	8007cb4 <__libc_init_array+0xc>
 8007cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cda:	4798      	blx	r3
 8007cdc:	3601      	adds	r6, #1
 8007cde:	e7f2      	b.n	8007cc6 <__libc_init_array+0x1e>
 8007ce0:	08007f34 	.word	0x08007f34
 8007ce4:	08007f34 	.word	0x08007f34
 8007ce8:	08007f34 	.word	0x08007f34
 8007cec:	08007f38 	.word	0x08007f38

08007cf0 <memcmp>:
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	3901      	subs	r1, #1
 8007cf4:	4402      	add	r2, r0
 8007cf6:	4290      	cmp	r0, r2
 8007cf8:	d101      	bne.n	8007cfe <memcmp+0xe>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e005      	b.n	8007d0a <memcmp+0x1a>
 8007cfe:	7803      	ldrb	r3, [r0, #0]
 8007d00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	d001      	beq.n	8007d0c <memcmp+0x1c>
 8007d08:	1b18      	subs	r0, r3, r4
 8007d0a:	bd10      	pop	{r4, pc}
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	e7f2      	b.n	8007cf6 <memcmp+0x6>

08007d10 <memcpy>:
 8007d10:	440a      	add	r2, r1
 8007d12:	4291      	cmp	r1, r2
 8007d14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d18:	d100      	bne.n	8007d1c <memcpy+0xc>
 8007d1a:	4770      	bx	lr
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d26:	4291      	cmp	r1, r2
 8007d28:	d1f9      	bne.n	8007d1e <memcpy+0xe>
 8007d2a:	bd10      	pop	{r4, pc}

08007d2c <memset>:
 8007d2c:	4402      	add	r2, r0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d100      	bne.n	8007d36 <memset+0xa>
 8007d34:	4770      	bx	lr
 8007d36:	f803 1b01 	strb.w	r1, [r3], #1
 8007d3a:	e7f9      	b.n	8007d30 <memset+0x4>

08007d3c <_init>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

08007d48 <_fini>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr
