
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007878  08007878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a50  08007a50  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a58  08007a58  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144a0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144bc  200144bc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001567b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003035  00000000  00000000  000356c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  00039a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231ea  00000000  00000000  0003ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161b6  00000000  00000000  0005de72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7ec2  00000000  00000000  00074028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014beea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005198  00000000  00000000  0014bf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007860 	.word	0x08007860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007860 	.word	0x08007860

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee8 	.word	0x20012ee8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc4f 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f897 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ff 	bl	8000778 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	483b      	ldr	r0, [pc, #236]	; (8000668 <main+0x100>)
 800057c:	f004 fec2 	bl	8005304 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b3a      	ldr	r3, [pc, #232]	; (800066c <main+0x104>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a39      	ldr	r2, [pc, #228]	; (800066c <main+0x104>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 fc28 	bl	8004de0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <main+0x108>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4935      	ldr	r1, [pc, #212]	; (8000674 <main+0x10c>)
 800059e:	4836      	ldr	r0, [pc, #216]	; (8000678 <main+0x110>)
 80005a0:	f002 fa8a 	bl	8002ab8 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>

  next_task_handle = ledg_task_handle;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <main+0x108>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	; (800067c <main+0x114>)
 80005c8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0x118>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	492b      	ldr	r1, [pc, #172]	; (8000684 <main+0x11c>)
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <main+0x120>)
 80005da:	f002 fa6d 	bl	8002ab8 <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x94>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x92>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0x124>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	4921      	ldr	r1, [pc, #132]	; (8000690 <main+0x128>)
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <main+0x12c>)
 800060c:	f002 fa54 	bl	8002ab8 <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xc6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60bb      	str	r3, [r7, #8]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xc4>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <main+0x130>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	4918      	ldr	r1, [pc, #96]	; (800069c <main+0x134>)
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <main+0x138>)
 800063e:	f002 fa3b 	bl	8002ab8 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xf8>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xf6>



  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000660:	f002 fc98 	bl	8002f94 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0xfc>
 8000666:	bf00      	nop
 8000668:	0007a120 	.word	0x0007a120
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000038 	.word	0x20000038
 8000674:	08007878 	.word	0x08007878
 8000678:	08000a35 	.word	0x08000a35
 800067c:	20000048 	.word	0x20000048
 8000680:	2000003c 	.word	0x2000003c
 8000684:	08007888 	.word	0x08007888
 8000688:	08000aa5 	.word	0x08000aa5
 800068c:	20000040 	.word	0x20000040
 8000690:	08007898 	.word	0x08007898
 8000694:	08000b15 	.word	0x08000b15
 8000698:	20000044 	.word	0x20000044
 800069c:	080078a8 	.word	0x080078a8
 80006a0:	08000b8d 	.word	0x08000b8d

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 f8cc 	bl	8007850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000718:	2332      	movs	r3, #50	; 0x32
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071c:	2304      	movs	r3, #4
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe7d 	bl	8001428 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 fa64 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f8de 	bl	8001918 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 fa4d 	bl	8000c00 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4ba2      	ldr	r3, [pc, #648]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa1      	ldr	r2, [pc, #644]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9f      	ldr	r3, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a9a      	ldr	r2, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a85      	ldr	r2, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4879      	ldr	r0, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 fdc0 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fdbb 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4875      	ldr	r0, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 8000852:	f000 fdb5 	bl	80013c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	486c      	ldr	r0, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800086e:	f000 fbf3 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4866      	ldr	r0, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800088a:	f000 fbe5 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	485e      	ldr	r0, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fbd5 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fbc8 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4852      	ldr	r0, [pc, #328]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fbb8 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e8:	23e0      	movs	r3, #224	; 0xe0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fba8 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4845      	ldr	r0, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800091c:	f000 fb9c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 fb8b 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000946:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 fb7c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000960:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000972:	2306      	movs	r3, #6
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800097e:	f000 fb6b 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000998:	f000 fb5e 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800099c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ae:	230a      	movs	r3, #10
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 fb4d 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 80009d2:	f000 fb41 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 80009f4:	f000 fb30 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000a0e:	f000 fb23 	bl	8001058 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void* parameters)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <led_green_handler+0x5c>)
 8000a3e:	f006 fe27 	bl	8007690 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <led_green_handler+0x60>)
 8000a48:	f000 fcd3 	bl	80013f2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f003 f84d 	bl	8003af8 <xTaskGenericNotifyWait>
 8000a5e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d1ea      	bne.n	8000a3c <led_green_handler+0x8>
			vTaskSuspendAll();
 8000a66:	f002 faf7 	bl	8003058 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <led_green_handler+0x64>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <led_green_handler+0x68>)
 8000a70:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a72:	f002 faff 	bl	8003074 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <led_green_handler+0x60>)
 8000a7e:	f000 fc9f 	bl	80013c0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <led_green_handler+0x6c>)
 8000a84:	f006 fe04 	bl	8007690 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f002 f99d 	bl	8002dc8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a8e:	e7d5      	b.n	8000a3c <led_green_handler+0x8>
 8000a90:	080078b4 	.word	0x080078b4
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	2000003c 	.word	0x2000003c
 8000a9c:	20000048 	.word	0x20000048
 8000aa0:	080078c8 	.word	0x080078c8

08000aa4 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <led_orange_handler+0x5c>)
 8000aae:	f006 fdef 	bl	8007690 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
 8000ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab6:	4813      	ldr	r0, [pc, #76]	; (8000b04 <led_orange_handler+0x60>)
 8000ab8:	f000 fc9b 	bl	80013f2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000abc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f003 f815 	bl	8003af8 <xTaskGenericNotifyWait>
 8000ace:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d1ea      	bne.n	8000aac <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000ad6:	f002 fabf 	bl	8003058 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <led_orange_handler+0x64>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <led_orange_handler+0x68>)
 8000ae0:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ae2:	f002 fac7 	bl	8003074 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <led_orange_handler+0x60>)
 8000aee:	f000 fc67 	bl	80013c0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <led_orange_handler+0x6c>)
 8000af4:	f006 fdcc 	bl	8007690 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f002 f965 	bl	8002dc8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000afe:	e7d5      	b.n	8000aac <led_orange_handler+0x8>
 8000b00:	080078e0 	.word	0x080078e0
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	20000040 	.word	0x20000040
 8000b0c:	20000048 	.word	0x20000048
 8000b10:	080078f4 	.word	0x080078f4

08000b14 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b1c:	4816      	ldr	r0, [pc, #88]	; (8000b78 <led_red_handler+0x64>)
 8000b1e:	f006 fdb7 	bl	8007690 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b26:	4815      	ldr	r0, [pc, #84]	; (8000b7c <led_red_handler+0x68>)
 8000b28:	f000 fc63 	bl	80013f2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f002 ffdd 	bl	8003af8 <xTaskGenericNotifyWait>
 8000b3e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d1ea      	bne.n	8000b1c <led_red_handler+0x8>
			vTaskSuspendAll();
 8000b46:	f002 fa87 	bl	8003058 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <led_red_handler+0x6c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b50:	f002 fa90 	bl	8003074 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <led_red_handler+0x68>)
 8000b5c:	f000 fc30 	bl	80013c0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <led_red_handler+0x70>)
 8000b62:	f006 fd95 	bl	8007690 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <led_red_handler+0x74>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 f92c 	bl	8002dc8 <vTaskDelete>
			vTaskDelete(NULL);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f002 f929 	bl	8002dc8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b76:	e7d1      	b.n	8000b1c <led_red_handler+0x8>
 8000b78:	0800790c 	.word	0x0800790c
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	20000048 	.word	0x20000048
 8000b84:	08007920 	.word	0x08007920
 8000b88:	20000044 	.word	0x20000044

08000b8c <button_handler>:

}


static void button_handler(void* parameters)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <button_handler+0x48>)
 8000ba0:	f000 fbf6 	bl	8001390 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00b      	beq.n	8000bc6 <button_handler+0x3a>
		{
			if(! prev_read)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d108      	bne.n	8000bc6 <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <button_handler+0x4c>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f003 f821 	bl	8003c08 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bca:	200a      	movs	r0, #10
 8000bcc:	f002 f9aa 	bl	8002f24 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bd0:	e7e4      	b.n	8000b9c <button_handler+0x10>
 8000bd2:	bf00      	nop
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	20000048 	.word	0x20000048

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bee:	f000 f931 	bl	8000e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40001000 	.word	0x40001000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000c4e:	f003 fd43 	bl	80046d8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <HAL_InitTick+0xe4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <HAL_InitTick+0xe4>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <HAL_InitTick+0xe4>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c8c:	f107 0210 	add.w	r2, r7, #16
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 f84a 	bl	8001d30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ca6:	f001 f82f 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8000caa:	6378      	str	r0, [r7, #52]	; 0x34
 8000cac:	e004      	b.n	8000cb8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cae:	f001 f82b 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cba:	4a23      	ldr	r2, [pc, #140]	; (8000d48 <HAL_InitTick+0xe8>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	0c9b      	lsrs	r3, r3, #18
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <HAL_InitTick+0xec>)
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <HAL_InitTick+0xf0>)
 8000cca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_InitTick+0xec>)
 8000cce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cd4:	4a1d      	ldr	r2, [pc, #116]	; (8000d4c <HAL_InitTick+0xec>)
 8000cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_InitTick+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_InitTick+0xec>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_InitTick+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <HAL_InitTick+0xec>)
 8000cee:	f001 f851 	bl	8001d94 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d11b      	bne.n	8000d38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d00:	4812      	ldr	r0, [pc, #72]	; (8000d4c <HAL_InitTick+0xec>)
 8000d02:	f001 f8a1 	bl	8001e48 <HAL_TIM_Base_Start_IT>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d111      	bne.n	8000d38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 f991 	bl	800103c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d808      	bhi.n	8000d32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2036      	movs	r0, #54	; 0x36
 8000d26:	f000 f96d 	bl	8001004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_InitTick+0xf4>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e002      	b.n	8000d38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3738      	adds	r7, #56	; 0x38
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	431bde83 	.word	0x431bde83
 8000d4c:	2000004c 	.word	0x2000004c
 8000d50:	40001000 	.word	0x40001000
 8000d54:	20000004 	.word	0x20000004

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM6_DAC_IRQHandler+0x10>)
 8000d8a:	f001 f8cd 	bl	8001f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000004c 	.word	0x2000004c

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ffd7 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 fcef 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fbbb 	bl	8000568 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e00:	08007a60 	.word	0x08007a60
  ldr r2, =_sbss
 8000e04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e08:	200144bc 	.word	0x200144bc

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f8d8 	bl	8000fee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff ff0e 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fee4 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000094 	.word	0x20000094

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000094 	.word	0x20000094

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff4c 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001016:	f7ff ff61 	bl	8000edc <__NVIC_GetPriorityGrouping>
 800101a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	6978      	ldr	r0, [r7, #20]
 8001022:	f7ff ffb1 	bl	8000f88 <NVIC_EncodePriority>
 8001026:	4602      	mov	r2, r0
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff80 	bl	8000f34 <__NVIC_SetPriority>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff54 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e16b      	b.n	800134c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 815a 	bne.w	8001346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80b4 	beq.w	8001346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b60      	ldr	r3, [pc, #384]	; (8001364 <HAL_GPIO_Init+0x30c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a5f      	ldr	r2, [pc, #380]	; (8001364 <HAL_GPIO_Init+0x30c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_GPIO_Init+0x30c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fa:	4a5b      	ldr	r2, [pc, #364]	; (8001368 <HAL_GPIO_Init+0x310>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_GPIO_Init+0x314>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x226>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a51      	ldr	r2, [pc, #324]	; (8001370 <HAL_GPIO_Init+0x318>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x222>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <HAL_GPIO_Init+0x31c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x21e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <HAL_GPIO_Init+0x320>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x21a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_GPIO_Init+0x324>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x216>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4d      	ldr	r2, [pc, #308]	; (8001380 <HAL_GPIO_Init+0x328>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x212>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x32c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x20e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <HAL_GPIO_Init+0x330>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x20a>
 800125e:	2307      	movs	r3, #7
 8001260:	e00e      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001262:	2308      	movs	r3, #8
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001266:	2306      	movs	r3, #6
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x310>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_GPIO_Init+0x334>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a32      	ldr	r2, [pc, #200]	; (800138c <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_GPIO_Init+0x334>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_GPIO_Init+0x334>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_GPIO_Init+0x334>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_GPIO_Init+0x334>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a12      	ldr	r2, [pc, #72]	; (800138c <HAL_GPIO_Init+0x334>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae90 	bls.w	8001074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e001      	b.n	80013b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	041a      	lsls	r2, r3, #16
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43d9      	mvns	r1, r3
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	400b      	ands	r3, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e267      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d00c      	beq.n	800146c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b82      	ldr	r3, [pc, #520]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05b      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d157      	bne.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e242      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d106      	bne.n	800149c <HAL_RCC_OscConfig+0x74>
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a75      	ldr	r2, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6c      	ldr	r2, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 80014c0:	4b69      	ldr	r3, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a68      	ldr	r2, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fccc 	bl	8000e7c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fcc8 	bl	8000e7c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e207      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fcb8 	bl	8000e7c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fcb4 	bl	8000e7c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1f3      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1c7      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_OscConfig+0x244>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fc6d 	bl	8000e7c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc69 	bl	8000e7c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1a8      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4925      	ldr	r1, [pc, #148]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_OscConfig+0x244>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc4c 	bl	8000e7c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc48 	bl	8000e7c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e187      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d036      	beq.n	8001680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_RCC_OscConfig+0x248>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fc2c 	bl	8000e7c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fc28 	bl	8000e7c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e167      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x200>
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_OscConfig+0x248>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fc15 	bl	8000e7c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	e00e      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fc11 	bl	8000e7c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d907      	bls.n	8001674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e150      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ea      	bne.n	8001656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8097 	beq.w	80017bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b7d      	ldr	r3, [pc, #500]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a7c      	ldr	r2, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b77      	ldr	r3, [pc, #476]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b74      	ldr	r3, [pc, #464]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a73      	ldr	r2, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fbd1 	bl	8000e7c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fbcd 	bl	8000e7c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e10c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x2ea>
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a63      	ldr	r2, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x30c>
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a5b      	ldr	r2, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001734:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a54      	ldr	r2, [pc, #336]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d015      	beq.n	8001780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fb92 	bl	8000e7c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fb8e 	bl	8000e7c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0cb      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ee      	beq.n	800175c <HAL_RCC_OscConfig+0x334>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff fb7c 	bl	8000e7c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fb78 	bl	8000e7c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0b5      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ee      	bne.n	8001788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a38      	ldr	r2, [pc, #224]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a1 	beq.w	8001908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d05c      	beq.n	800188c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d141      	bne.n	800185e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb4c 	bl	8000e7c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb48 	bl	8000e7c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e087      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	491b      	ldr	r1, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb21 	bl	8000e7c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb1d 	bl	8000e7c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e05c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x416>
 800185c:	e054      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fb0a 	bl	8000e7c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fb06 	bl	8000e7c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e045      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e038      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000
 80018a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x4ec>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d028      	beq.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d121      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11a      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cc      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e067      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4934      	ldr	r1, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fa38 	bl	8000e7c <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fa34 	bl	8000e7c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f8ce 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	080079fc 	.word	0x080079fc
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b094      	sub	sp, #80	; 0x50
 8001aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d00d      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x40>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	f200 80e1 	bhi.w	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b16:	e0db      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b1c:	e0db      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_GetSysClockFreq+0x208>)
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b22:	e0d8      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b24:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	2200      	movs	r2, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
 8001b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b56:	4622      	mov	r2, r4
 8001b58:	462b      	mov	r3, r5
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	0159      	lsls	r1, r3, #5
 8001b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b68:	0150      	lsls	r0, r2, #5
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4621      	mov	r1, r4
 8001b70:	1a51      	subs	r1, r2, r1
 8001b72:	6139      	str	r1, [r7, #16]
 8001b74:	4629      	mov	r1, r5
 8001b76:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b88:	4659      	mov	r1, fp
 8001b8a:	018b      	lsls	r3, r1, #6
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b92:	4651      	mov	r1, sl
 8001b94:	018a      	lsls	r2, r1, #6
 8001b96:	4651      	mov	r1, sl
 8001b98:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4699      	mov	r9, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	eb18 0303 	adds.w	r3, r8, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	eb49 0303 	adc.w	r3, r9, r3
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	024b      	lsls	r3, r1, #9
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be0:	4621      	mov	r1, r4
 8001be2:	024a      	lsls	r2, r1, #9
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bf4:	f7fe fb36 	bl	8000264 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c00:	e058      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	464b      	mov	r3, r9
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4641      	mov	r1, r8
 8001c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c54:	ebb2 040a 	subs.w	r4, r2, sl
 8001c58:	eb63 050b 	sbc.w	r5, r3, fp
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	00eb      	lsls	r3, r5, #3
 8001c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6a:	00e2      	lsls	r2, r4, #3
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	18e3      	adds	r3, r4, r3
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	464b      	mov	r3, r9
 8001c78:	eb45 0303 	adc.w	r3, r5, r3
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	028b      	lsls	r3, r1, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c94:	4621      	mov	r1, r4
 8001c96:	028a      	lsls	r2, r1, #10
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	61fa      	str	r2, [r7, #28]
 8001ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca8:	f7fe fadc 	bl	8000264 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3750      	adds	r7, #80	; 0x50
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	f7ff fff0 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	08007a0c 	.word	0x08007a0c

08001d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_RCC_GetClockConfig+0x60>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0207 	and.w	r2, r3, #7
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f839 	bl	8001e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 f9d8 	bl	8002188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d001      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e04e      	b.n	8001efe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x80>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d010      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	e007      	b.n	8001efc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40000c00 	.word	0x40000c00
 8001f1c:	40010400 	.word	0x40010400
 8001f20:	40014000 	.word	0x40014000
 8001f24:	40001800 	.word	0x40001800

08001f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0202 	mvn.w	r2, #2
 8001f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8ee 	bl	800214c <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8e0 	bl	8002138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8f1 	bl	8002160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0204 	mvn.w	r2, #4
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8c4 	bl	800214c <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8b6 	bl	8002138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8c7 	bl	8002160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0208 	mvn.w	r2, #8
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2204      	movs	r2, #4
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f89a 	bl	800214c <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f88c 	bl	8002138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f89d 	bl	8002160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b10      	cmp	r3, #16
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0210 	mvn.w	r2, #16
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2208      	movs	r2, #8
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f870 	bl	800214c <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f862 	bl	8002138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f873 	bl	8002160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0201 	mvn.w	r2, #1
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fd98 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c4:	2b80      	cmp	r3, #128	; 0x80
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f902 	bl	80022dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f838 	bl	8002174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b20      	cmp	r3, #32
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b20      	cmp	r3, #32
 800211e:	d107      	bne.n	8002130 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0220 	mvn.w	r2, #32
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8cc 	bl	80022c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <TIM_Base_SetConfig+0x114>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a6:	d00f      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3d      	ldr	r2, [pc, #244]	; (80022a0 <TIM_Base_SetConfig+0x118>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3c      	ldr	r2, [pc, #240]	; (80022a4 <TIM_Base_SetConfig+0x11c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <TIM_Base_SetConfig+0x120>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a3a      	ldr	r2, [pc, #232]	; (80022ac <TIM_Base_SetConfig+0x124>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d108      	bne.n	80021da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <TIM_Base_SetConfig+0x114>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d02b      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d027      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2c      	ldr	r2, [pc, #176]	; (80022a0 <TIM_Base_SetConfig+0x118>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d023      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <TIM_Base_SetConfig+0x11c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <TIM_Base_SetConfig+0x120>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01b      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a29      	ldr	r2, [pc, #164]	; (80022ac <TIM_Base_SetConfig+0x124>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d017      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <TIM_Base_SetConfig+0x128>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <TIM_Base_SetConfig+0x12c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00f      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a26      	ldr	r2, [pc, #152]	; (80022b8 <TIM_Base_SetConfig+0x130>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00b      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <TIM_Base_SetConfig+0x134>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <TIM_Base_SetConfig+0x138>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <TIM_Base_SetConfig+0x13c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d108      	bne.n	800224c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <TIM_Base_SetConfig+0x114>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <TIM_Base_SetConfig+0xf8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <TIM_Base_SetConfig+0x124>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d103      	bne.n	8002288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	615a      	str	r2, [r3, #20]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40010000 	.word	0x40010000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40000c00 	.word	0x40000c00
 80022ac:	40010400 	.word	0x40010400
 80022b0:	40014000 	.word	0x40014000
 80022b4:	40014400 	.word	0x40014400
 80022b8:	40014800 	.word	0x40014800
 80022bc:	40001800 	.word	0x40001800
 80022c0:	40001c00 	.word	0x40001c00
 80022c4:	40002000 	.word	0x40002000

080022c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0208 	add.w	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002308:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f103 0208 	add.w	r2, r3, #8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f103 0208 	add.w	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a8:	d103      	bne.n	80023b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e00c      	b.n	80023cc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3308      	adds	r3, #8
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e002      	b.n	80023c0 <vListInsert+0x2e>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d2f6      	bcs.n	80023ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6892      	ldr	r2, [r2, #8]
 800241a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6852      	ldr	r2, [r2, #4]
 8002424:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d103      	bne.n	8002438 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1e5a      	subs	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002462:	2301      	movs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <xQueueGenericReset+0x2e>
        __asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	60fb      	str	r3, [r7, #12]
    }
 8002482:	bf00      	nop
 8002484:	e7fe      	b.n	8002484 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05d      	beq.n	8002548 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	d059      	beq.n	8002548 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	2100      	movs	r1, #0
 800249e:	fba3 2302 	umull	r2, r3, r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d000      	beq.n	80024a8 <xQueueGenericReset+0x50>
 80024a6:	2101      	movs	r1, #1
 80024a8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d14c      	bne.n	8002548 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80024ae:	f002 f991 	bl	80047d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	6939      	ldr	r1, [r7, #16]
 80024bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	441a      	add	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2200      	movs	r2, #0
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	3b01      	subs	r3, #1
 80024e0:	6939      	ldr	r1, [r7, #16]
 80024e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	441a      	add	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	22ff      	movs	r2, #255	; 0xff
 80024fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d114      	bne.n	800252e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01a      	beq.n	8002542 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	3310      	adds	r3, #16
 8002510:	4618      	mov	r0, r3
 8002512:	f001 f8c1 	bl	8003698 <xTaskRemoveFromEventList>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d012      	beq.n	8002542 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <xQueueGenericReset+0x11c>)
 800251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	e009      	b.n	8002542 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	3310      	adds	r3, #16
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fedc 	bl	80022f0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	3324      	adds	r3, #36	; 0x24
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fed7 	bl	80022f0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002542:	f002 f977 	bl	8004834 <vPortExitCritical>
 8002546:	e001      	b.n	800254c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <xQueueGenericReset+0x110>
        __asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	60bb      	str	r3, [r7, #8]
    }
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002568:	697b      	ldr	r3, [r7, #20]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02e      	beq.n	80025ee <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002590:	2100      	movs	r1, #0
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	fba3 2302 	umull	r2, r3, r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d000      	beq.n	80025a0 <xQueueGenericCreate+0x28>
 800259e:	2101      	movs	r1, #1
 80025a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d123      	bne.n	80025ee <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025ae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80025b2:	d81c      	bhi.n	80025ee <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	fb02 f303 	mul.w	r3, r2, r3
 80025bc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3350      	adds	r3, #80	; 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fa32 	bl	8004a2c <pvPortMalloc>
 80025c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01c      	beq.n	800260a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3350      	adds	r3, #80	; 0x50
 80025d8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f814 	bl	8002614 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80025ec:	e00d      	b.n	800260a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xQueueGenericCreate+0x92>
        __asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	613b      	str	r3, [r7, #16]
    }
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800260a:	69fb      	ldr	r3, [r7, #28]
    }
 800260c:	4618      	mov	r0, r3
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e002      	b.n	8002636 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002642:	2101      	movs	r1, #1
 8002644:	69b8      	ldr	r0, [r7, #24]
 8002646:	f7ff ff07 	bl	8002458 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	68f9      	ldr	r1, [r7, #12]
 8002658:	2073      	movs	r0, #115	; 0x73
 800265a:	f004 f9ff 	bl	8006a5c <SEGGER_SYSVIEW_RecordU32x3>
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b08f      	sub	sp, #60	; 0x3c
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <xQueueReceive+0x30>
        __asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	623b      	str	r3, [r7, #32]
    }
 8002694:	bf00      	nop
 8002696:	e7fe      	b.n	8002696 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <xQueueReceive+0x3e>
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <xQueueReceive+0x42>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <xQueueReceive+0x44>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <xQueueReceive+0x5e>
        __asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	61fb      	str	r3, [r7, #28]
    }
 80026c2:	bf00      	nop
 80026c4:	e7fe      	b.n	80026c4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026c6:	f001 f9f9 	bl	8003abc <xTaskGetSchedulerState>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <xQueueReceive+0x6e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueReceive+0x72>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueReceive+0x74>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueReceive+0x8e>
        __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61bb      	str	r3, [r7, #24]
    }
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026f6:	f002 f86d 	bl	80047d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d02f      	beq.n	8002766 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800270a:	f000 f8bd 	bl	8002888 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	4618      	mov	r0, r3
 8002712:	f004 fed1 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8002716:	4604      	mov	r4, r0
 8002718:	2000      	movs	r0, #0
 800271a:	f004 fecd 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2101      	movs	r1, #1
 8002724:	9100      	str	r1, [sp, #0]
 8002726:	4621      	mov	r1, r4
 8002728:	205c      	movs	r0, #92	; 0x5c
 800272a:	f004 fa0d 	bl	8006b48 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00f      	beq.n	800275e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	3310      	adds	r3, #16
 8002742:	4618      	mov	r0, r3
 8002744:	f000 ffa8 	bl	8003698 <xTaskRemoveFromEventList>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800274e:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <xQueueReceive+0x21c>)
 8002750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800275e:	f002 f869 	bl	8004834 <vPortExitCritical>
                return pdPASS;
 8002762:	2301      	movs	r3, #1
 8002764:	e08a      	b.n	800287c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d113      	bne.n	8002794 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800276c:	f002 f862 	bl	8004834 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fea0 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8002778:	4604      	mov	r4, r0
 800277a:	2000      	movs	r0, #0
 800277c:	f004 fe9c 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2101      	movs	r1, #1
 8002786:	9100      	str	r1, [sp, #0]
 8002788:	4621      	mov	r1, r4
 800278a:	205c      	movs	r0, #92	; 0x5c
 800278c:	f004 f9dc 	bl	8006b48 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002790:	2300      	movs	r3, #0
 8002792:	e073      	b.n	800287c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 f852 	bl	8003848 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027a8:	f002 f844 	bl	8004834 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027ac:	f000 fc54 	bl	8003058 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027b0:	f002 f810 	bl	80047d4 <vPortEnterCritical>
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c0:	d103      	bne.n	80027ca <xQueueReceive+0x162>
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d6:	d103      	bne.n	80027e0 <xQueueReceive+0x178>
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e0:	f002 f828 	bl	8004834 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027e4:	1d3a      	adds	r2, r7, #4
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 f841 	bl	8003874 <xTaskCheckForTimeOut>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d124      	bne.n	8002842 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027fa:	f000 f8bd 	bl	8002978 <prvIsQueueEmpty>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d018      	beq.n	8002836 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	3324      	adds	r3, #36	; 0x24
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fed7 	bl	80035c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002814:	f000 f85e 	bl	80028d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002818:	f000 fc2c 	bl	8003074 <xTaskResumeAll>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f af69 	bne.w	80026f6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002824:	4b17      	ldr	r3, [pc, #92]	; (8002884 <xQueueReceive+0x21c>)
 8002826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	e75f      	b.n	80026f6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002838:	f000 f84c 	bl	80028d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800283c:	f000 fc1a 	bl	8003074 <xTaskResumeAll>
 8002840:	e759      	b.n	80026f6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002844:	f000 f846 	bl	80028d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002848:	f000 fc14 	bl	8003074 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800284c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284e:	f000 f893 	bl	8002978 <prvIsQueueEmpty>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	f43f af4e 	beq.w	80026f6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	4618      	mov	r0, r3
 800285e:	f004 fe2b 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8002862:	4604      	mov	r4, r0
 8002864:	2000      	movs	r0, #0
 8002866:	f004 fe27 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2101      	movs	r1, #1
 8002870:	9100      	str	r1, [sp, #0]
 8002872:	4621      	mov	r1, r4
 8002874:	205c      	movs	r0, #92	; 0x5c
 8002876:	f004 f967 	bl	8006b48 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800287a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800287c:	4618      	mov	r0, r3
 800287e:	3734      	adds	r7, #52	; 0x34
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	e000ed04 	.word	0xe000ed04

08002888 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d018      	beq.n	80028cc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	441a      	add	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d303      	bcc.n	80028bc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68d9      	ldr	r1, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	461a      	mov	r2, r3
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f004 ffb4 	bl	8007834 <memcpy>
    }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028dc:	f001 ff7a 	bl	80047d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028e8:	e011      	b.n	800290e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3324      	adds	r3, #36	; 0x24
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fece 	bl	8003698 <xTaskRemoveFromEventList>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002902:	f001 f81d 	bl	8003940 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	3b01      	subs	r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	dce9      	bgt.n	80028ea <prvUnlockQueue+0x16>
 8002916:	e000      	b.n	800291a <prvUnlockQueue+0x46>
                    break;
 8002918:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002922:	f001 ff87 	bl	8004834 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002926:	f001 ff55 	bl	80047d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002930:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002932:	e011      	b.n	8002958 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3310      	adds	r3, #16
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fea9 	bl	8003698 <xTaskRemoveFromEventList>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800294c:	f000 fff8 	bl	8003940 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002950:	7bbb      	ldrb	r3, [r7, #14]
 8002952:	3b01      	subs	r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800295c:	2b00      	cmp	r3, #0
 800295e:	dce9      	bgt.n	8002934 <prvUnlockQueue+0x60>
 8002960:	e000      	b.n	8002964 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002962:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	22ff      	movs	r2, #255	; 0xff
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800296c:	f001 ff62 	bl	8004834 <vPortExitCritical>
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002980:	f001 ff28 	bl	80047d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800298c:	2301      	movs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e001      	b.n	8002996 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002996:	f001 ff4d 	bl	8004834 <vPortExitCritical>

    return xReturn;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <vQueueAddToRegistry+0x2a>
        __asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	60fb      	str	r3, [r7, #12]
    }
 80029ca:	bf00      	nop
 80029cc:	e7fe      	b.n	80029cc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d024      	beq.n	8002a1e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e01e      	b.n	8002a18 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <vQueueAddToRegistry+0xa8>)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d105      	bne.n	80029f6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <vQueueAddToRegistry+0xa8>)
 80029f0:	4413      	add	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
                    break;
 80029f4:	e013      	b.n	8002a1e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <vQueueAddToRegistry+0x6e>
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <vQueueAddToRegistry+0xa8>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d104      	bne.n	8002a12 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <vQueueAddToRegistry+0xa8>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b07      	cmp	r3, #7
 8002a1c:	d9dd      	bls.n	80029da <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00f      	beq.n	8002a44 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fd40 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8002a38:	4601      	mov	r1, r0
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2071      	movs	r0, #113	; 0x71
 8002a40:	f003 ffb2 	bl	80069a8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000098 	.word	0x20000098

08002a50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a60:	f001 feb8 	bl	80047d4 <vPortEnterCritical>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a70:	d103      	bne.n	8002a7a <vQueueWaitForMessageRestricted+0x2a>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a86:	d103      	bne.n	8002a90 <vQueueWaitForMessageRestricted+0x40>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a90:	f001 fed0 	bl	8004834 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3324      	adds	r3, #36	; 0x24
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fdaf 	bl	8003608 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff12 	bl	80028d4 <prvUnlockQueue>
    }
 8002ab0:	bf00      	nop
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af04      	add	r7, sp, #16
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 ffad 	bl	8004a2c <pvPortMalloc>
 8002ad2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ada:	2058      	movs	r0, #88	; 0x58
 8002adc:	f001 ffa6 	bl	8004a2c <pvPortMalloc>
 8002ae0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ae8:	2258      	movs	r2, #88	; 0x58
 8002aea:	2100      	movs	r1, #0
 8002aec:	69f8      	ldr	r0, [r7, #28]
 8002aee:	f004 feaf 	bl	8007850 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
 8002af8:	e005      	b.n	8002b06 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f002 f850 	bl	8004ba0 <vPortFree>
 8002b00:	e001      	b.n	8002b06 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9303      	str	r3, [sp, #12]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f80e 	bl	8002b44 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b28:	69f8      	ldr	r0, [r7, #28]
 8002b2a:	f000 f899 	bl	8002c60 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	e002      	b.n	8002b3a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b38:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
    }
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	21a5      	movs	r1, #165	; 0xa5
 8002b5e:	f004 fe77 	bl	8007850 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	617b      	str	r3, [r7, #20]
    }
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01e      	beq.n	8002be0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e012      	b.n	8002bce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	7819      	ldrb	r1, [r3, #0]
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3334      	adds	r3, #52	; 0x34
 8002bb8:	460a      	mov	r2, r1
 8002bba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d9e9      	bls.n	8002ba8 <prvInitialiseNewTask+0x64>
 8002bd4:	e000      	b.n	8002bd8 <prvInitialiseNewTask+0x94>
            {
                break;
 8002bd6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d90a      	bls.n	8002bfc <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	613b      	str	r3, [r7, #16]
    }
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d901      	bls.n	8002c06 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c02:	2304      	movs	r3, #4
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	3304      	adds	r3, #4
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fb8a 	bl	8002330 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	3318      	adds	r3, #24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb85 	bl	8002330 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	f1c3 0205 	rsb	r2, r3, #5
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	68f9      	ldr	r1, [r7, #12]
 8002c40:	69b8      	ldr	r0, [r7, #24]
 8002c42:	f001 fc19 	bl	8004478 <pxPortInitialiseStack>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c56:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c58:	bf00      	nop
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c68:	f001 fdb4 	bl	80047d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <prvAddNewTaskToReadyList+0x14c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <prvAddNewTaskToReadyList+0x14c>)
 8002c74:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c76:	4b4e      	ldr	r3, [pc, #312]	; (8002db0 <prvAddNewTaskToReadyList+0x150>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c7e:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <prvAddNewTaskToReadyList+0x150>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c84:	4b49      	ldr	r3, [pc, #292]	; (8002dac <prvAddNewTaskToReadyList+0x14c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d110      	bne.n	8002cae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c8c:	f000 fe7c 	bl	8003988 <prvInitialiseTaskLists>
 8002c90:	e00d      	b.n	8002cae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <prvAddNewTaskToReadyList+0x154>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c9a:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <prvAddNewTaskToReadyList+0x150>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d802      	bhi.n	8002cae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ca8:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <prvAddNewTaskToReadyList+0x150>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002cae:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <prvAddNewTaskToReadyList+0x158>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	4a40      	ldr	r2, [pc, #256]	; (8002db8 <prvAddNewTaskToReadyList+0x158>)
 8002cb6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <prvAddNewTaskToReadyList+0x158>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <prvAddNewTaskToReadyList+0x94>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fb2f 	bl	800732c <SEGGER_SYSVIEW_OnTaskCreate>
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	461d      	mov	r5, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461c      	mov	r4, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	1ae3      	subs	r3, r4, r3
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	462b      	mov	r3, r5
 8002cf0:	f002 f918 	bl	8004f24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fb9c 	bl	8007434 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <prvAddNewTaskToReadyList+0x15c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <prvAddNewTaskToReadyList+0x15c>)
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	492b      	ldr	r1, [pc, #172]	; (8002dc0 <prvAddNewTaskToReadyList+0x160>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3304      	adds	r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	3204      	adds	r2, #4
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1d1a      	adds	r2, r3, #4
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <prvAddNewTaskToReadyList+0x160>)
 8002d52:	441a      	add	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	615a      	str	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	4918      	ldr	r1, [pc, #96]	; (8002dc0 <prvAddNewTaskToReadyList+0x160>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1c59      	adds	r1, r3, #1
 8002d6c:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <prvAddNewTaskToReadyList+0x160>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4403      	add	r3, r0
 8002d78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d7a:	f001 fd5b 	bl	8004834 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <prvAddNewTaskToReadyList+0x154>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00e      	beq.n	8002da4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <prvAddNewTaskToReadyList+0x150>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d207      	bcs.n	8002da4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <prvAddNewTaskToReadyList+0x164>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dac:	200001b0 	.word	0x200001b0
 8002db0:	200000d8 	.word	0x200000d8
 8002db4:	200001bc 	.word	0x200001bc
 8002db8:	200001cc 	.word	0x200001cc
 8002dbc:	200001b8 	.word	0x200001b8
 8002dc0:	200000dc 	.word	0x200000dc
 8002dc4:	e000ed04 	.word	0xe000ed04

08002dc8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002dd0:	f001 fd00 	bl	80047d4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <vTaskDelete+0x18>
 8002dda:	4b48      	ldr	r3, [pc, #288]	; (8002efc <vTaskDelete+0x134>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e000      	b.n	8002de2 <vTaskDelete+0x1a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fb0b 	bl	8002404 <uxListRemove>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d115      	bne.n	8002e20 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df8:	4941      	ldr	r1, [pc, #260]	; (8002f00 <vTaskDelete+0x138>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <vTaskDelete+0x58>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	2201      	movs	r2, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43da      	mvns	r2, r3
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <vTaskDelete+0x13c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	4a39      	ldr	r2, [pc, #228]	; (8002f04 <vTaskDelete+0x13c>)
 8002e1e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fae9 	bl	8002404 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002e32:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <vTaskDelete+0x140>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <vTaskDelete+0x140>)
 8002e3a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <vTaskDelete+0x134>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d118      	bne.n	8002e78 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	482f      	ldr	r0, [pc, #188]	; (8002f0c <vTaskDelete+0x144>)
 8002e4e:	f7ff fa7c 	bl	800234a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002e52:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <vTaskDelete+0x148>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <vTaskDelete+0x148>)
 8002e5a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 fb2a 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4619      	mov	r1, r3
 8002e68:	2022      	movs	r0, #34	; 0x22
 8002e6a:	f003 fd61 	bl	8006930 <SEGGER_SYSVIEW_RecordU32>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 f8bf 	bl	8004ff4 <SYSVIEW_DeleteTask>
 8002e76:	e013      	b.n	8002ea0 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002e78:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <vTaskDelete+0x14c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <vTaskDelete+0x14c>)
 8002e80:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fb17 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2022      	movs	r0, #34	; 0x22
 8002e90:	f003 fd4e 	bl	8006930 <SEGGER_SYSVIEW_RecordU32>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 f8ac 	bl	8004ff4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002e9c:	f000 fdf2 	bl	8003a84 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002ea0:	f001 fcc8 	bl	8004834 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <vTaskDelete+0x134>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d002      	beq.n	8002eb4 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fdd8 	bl	8003a64 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002eb4:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <vTaskDelete+0x150>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <vTaskDelete+0x134>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d116      	bne.n	8002ef4 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <vTaskDelete+0x154>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <vTaskDelete+0x11c>
        __asm volatile
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	60bb      	str	r3, [r7, #8]
    }
 8002ee0:	bf00      	nop
 8002ee2:	e7fe      	b.n	8002ee2 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <vTaskDelete+0x158>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200000d8 	.word	0x200000d8
 8002f00:	200000dc 	.word	0x200000dc
 8002f04:	200001b8 	.word	0x200001b8
 8002f08:	200001cc 	.word	0x200001cc
 8002f0c:	20000184 	.word	0x20000184
 8002f10:	20000198 	.word	0x20000198
 8002f14:	200001b0 	.word	0x200001b0
 8002f18:	200001bc 	.word	0x200001bc
 8002f1c:	200001d8 	.word	0x200001d8
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01b      	beq.n	8002f6e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <vTaskDelay+0x68>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <vTaskDelay+0x30>
        __asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	60bb      	str	r3, [r7, #8]
    }
 8002f50:	bf00      	nop
 8002f52:	e7fe      	b.n	8002f52 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002f54:	f000 f880 	bl	8003058 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	2023      	movs	r0, #35	; 0x23
 8002f5c:	f003 fce8 	bl	8006930 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f60:	2100      	movs	r1, #0
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 ff84 	bl	8003e70 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002f68:	f000 f884 	bl	8003074 <xTaskResumeAll>
 8002f6c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <vTaskDelay+0x6c>)
 8002f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200001d8 	.word	0x200001d8
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <vTaskStartScheduler+0xa4>)
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2282      	movs	r2, #130	; 0x82
 8002fa6:	4925      	ldr	r1, [pc, #148]	; (800303c <vTaskStartScheduler+0xa8>)
 8002fa8:	4825      	ldr	r0, [pc, #148]	; (8003040 <vTaskStartScheduler+0xac>)
 8002faa:	f7ff fd85 	bl	8002ab8 <xTaskCreate>
 8002fae:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002fb6:	f000 ffdb 	bl	8003f70 <xTimerCreateTimerTask>
 8002fba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d124      	bne.n	800300c <vTaskStartScheduler+0x78>
        __asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	60bb      	str	r3, [r7, #8]
    }
 8002fd4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <vTaskStartScheduler+0xb0>)
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fdc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <vTaskStartScheduler+0xb4>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <vTaskStartScheduler+0xb8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <vTaskStartScheduler+0xbc>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <vTaskStartScheduler+0xa4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d102      	bne.n	8002ffc <vTaskStartScheduler+0x68>
 8002ff6:	f004 f97d 	bl	80072f4 <SEGGER_SYSVIEW_OnIdle>
 8002ffa:	e004      	b.n	8003006 <vTaskStartScheduler+0x72>
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <vTaskStartScheduler+0xbc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f004 f9d5 	bl	80073b0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003006:	f001 fac5 	bl	8004594 <xPortStartScheduler>
 800300a:	e00e      	b.n	800302a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003012:	d10a      	bne.n	800302a <vTaskStartScheduler+0x96>
        __asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	607b      	str	r3, [r7, #4]
    }
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <vTaskStartScheduler+0xc0>)
 800302c:	681b      	ldr	r3, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200001d4 	.word	0x200001d4
 800303c:	08007934 	.word	0x08007934
 8003040:	08003959 	.word	0x08003959
 8003044:	200001d0 	.word	0x200001d0
 8003048:	200001bc 	.word	0x200001bc
 800304c:	200001b4 	.word	0x200001b4
 8003050:	200000d8 	.word	0x200000d8
 8003054:	2000000c 	.word	0x2000000c

08003058 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <vTaskSuspendAll+0x18>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	4a03      	ldr	r2, [pc, #12]	; (8003070 <vTaskSuspendAll+0x18>)
 8003064:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003066:	bf00      	nop
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	200001d8 	.word	0x200001d8

08003074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <xTaskResumeAll+0x1dc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	607b      	str	r3, [r7, #4]
    }
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030a0:	f001 fb98 	bl	80047d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030a4:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <xTaskResumeAll+0x1dc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	4a69      	ldr	r2, [pc, #420]	; (8003250 <xTaskResumeAll+0x1dc>)
 80030ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ae:	4b68      	ldr	r3, [pc, #416]	; (8003250 <xTaskResumeAll+0x1dc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 80c4 	bne.w	8003240 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030b8:	4b66      	ldr	r3, [pc, #408]	; (8003254 <xTaskResumeAll+0x1e0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80bf 	beq.w	8003240 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030c2:	e08e      	b.n	80031e2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c4:	4b64      	ldr	r3, [pc, #400]	; (8003258 <xTaskResumeAll+0x1e4>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	6a12      	ldr	r2, [r2, #32]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	69d2      	ldr	r2, [r2, #28]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3318      	adds	r3, #24
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d103      	bne.n	80030fa <xTaskResumeAll+0x86>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	6a1a      	ldr	r2, [r3, #32]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2200      	movs	r2, #0
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	1e5a      	subs	r2, r3, #1
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	68d2      	ldr	r2, [r2, #12]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3304      	adds	r3, #4
 800312c:	429a      	cmp	r2, r3
 800312e:	d103      	bne.n	8003138 <xTaskResumeAll+0xc4>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2200      	movs	r2, #0
 800313c:	615a      	str	r2, [r3, #20]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1e5a      	subs	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4618      	mov	r0, r3
 800314c:	f004 f972 	bl	8007434 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2201      	movs	r2, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <xTaskResumeAll+0x1e8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4313      	orrs	r3, r2
 800315e:	4a3f      	ldr	r2, [pc, #252]	; (800325c <xTaskResumeAll+0x1e8>)
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003166:	493e      	ldr	r1, [pc, #248]	; (8003260 <xTaskResumeAll+0x1ec>)
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3304      	adds	r3, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	3204      	adds	r2, #4
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	1d1a      	adds	r2, r3, #4
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4a2e      	ldr	r2, [pc, #184]	; (8003260 <xTaskResumeAll+0x1ec>)
 80031a6:	441a      	add	r2, r3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	615a      	str	r2, [r3, #20]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	492b      	ldr	r1, [pc, #172]	; (8003260 <xTaskResumeAll+0x1ec>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1c59      	adds	r1, r3, #1
 80031c0:	4827      	ldr	r0, [pc, #156]	; (8003260 <xTaskResumeAll+0x1ec>)
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4403      	add	r3, r0
 80031cc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <xTaskResumeAll+0x1f0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <xTaskResumeAll+0x1f4>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <xTaskResumeAll+0x1e4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f47f af6c 	bne.w	80030c4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80031f2:	f000 fc47 	bl	8003a84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <xTaskResumeAll+0x1f8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d010      	beq.n	8003224 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003202:	f000 f859 	bl	80032b8 <xTaskIncrementTick>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <xTaskResumeAll+0x1f4>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3b01      	subs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f1      	bne.n	8003202 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <xTaskResumeAll+0x1f8>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <xTaskResumeAll+0x1f4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800322c:	2301      	movs	r3, #1
 800322e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <xTaskResumeAll+0x1fc>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003240:	f001 faf8 	bl	8004834 <vPortExitCritical>

    return xAlreadyYielded;
 8003244:	69bb      	ldr	r3, [r7, #24]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200001d8 	.word	0x200001d8
 8003254:	200001b0 	.word	0x200001b0
 8003258:	20000170 	.word	0x20000170
 800325c:	200001b8 	.word	0x200001b8
 8003260:	200000dc 	.word	0x200000dc
 8003264:	200000d8 	.word	0x200000d8
 8003268:	200001c4 	.word	0x200001c4
 800326c:	200001c0 	.word	0x200001c0
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <xTaskGetTickCount+0x1c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003280:	687b      	ldr	r3, [r7, #4]
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	200001b4 	.word	0x200001b4

08003294 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800329a:	f001 fb87 	bl	80049ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032a2:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <xTaskGetTickCountFromISR+0x20>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032a8:	683b      	ldr	r3, [r7, #0]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200001b4 	.word	0x200001b4

080032b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c2:	4b7f      	ldr	r3, [pc, #508]	; (80034c0 <xTaskIncrementTick+0x208>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 80f0 	bne.w	80034ac <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032cc:	4b7d      	ldr	r3, [pc, #500]	; (80034c4 <xTaskIncrementTick+0x20c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032d4:	4a7b      	ldr	r2, [pc, #492]	; (80034c4 <xTaskIncrementTick+0x20c>)
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d120      	bne.n	8003322 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032e0:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <xTaskIncrementTick+0x210>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <xTaskIncrementTick+0x48>
        __asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	607b      	str	r3, [r7, #4]
    }
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <xTaskIncrementTick+0x46>
 8003300:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <xTaskIncrementTick+0x210>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	4b71      	ldr	r3, [pc, #452]	; (80034cc <xTaskIncrementTick+0x214>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a6f      	ldr	r2, [pc, #444]	; (80034c8 <xTaskIncrementTick+0x210>)
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4a6f      	ldr	r2, [pc, #444]	; (80034cc <xTaskIncrementTick+0x214>)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b6e      	ldr	r3, [pc, #440]	; (80034d0 <xTaskIncrementTick+0x218>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a6d      	ldr	r2, [pc, #436]	; (80034d0 <xTaskIncrementTick+0x218>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	f000 fbb1 	bl	8003a84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003322:	4b6c      	ldr	r3, [pc, #432]	; (80034d4 <xTaskIncrementTick+0x21c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a3a      	ldr	r2, [r7, #32]
 8003328:	429a      	cmp	r2, r3
 800332a:	f0c0 80aa 	bcc.w	8003482 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <xTaskIncrementTick+0x210>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d104      	bne.n	8003342 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <xTaskIncrementTick+0x21c>)
 800333a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800333e:	601a      	str	r2, [r3, #0]
                    break;
 8003340:	e09f      	b.n	8003482 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003342:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <xTaskIncrementTick+0x210>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d203      	bcs.n	8003362 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800335a:	4a5e      	ldr	r2, [pc, #376]	; (80034d4 <xTaskIncrementTick+0x21c>)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003360:	e08f      	b.n	8003482 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	68d2      	ldr	r2, [r2, #12]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	3304      	adds	r3, #4
 8003384:	429a      	cmp	r2, r3
 8003386:	d103      	bne.n	8003390 <xTaskIncrementTick+0xd8>
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2200      	movs	r2, #0
 8003394:	615a      	str	r2, [r3, #20]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1e5a      	subs	r2, r3, #1
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01e      	beq.n	80033e6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	6a12      	ldr	r2, [r2, #32]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	69d2      	ldr	r2, [r2, #28]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3318      	adds	r3, #24
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d103      	bne.n	80033d6 <xTaskIncrementTick+0x11e>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	6a1a      	ldr	r2, [r3, #32]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2200      	movs	r2, #0
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 f823 	bl	8007434 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	2201      	movs	r2, #1
 80033f4:	409a      	lsls	r2, r3
 80033f6:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <xTaskIncrementTick+0x220>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	4a36      	ldr	r2, [pc, #216]	; (80034d8 <xTaskIncrementTick+0x220>)
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	4935      	ldr	r1, [pc, #212]	; (80034dc <xTaskIncrementTick+0x224>)
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3304      	adds	r3, #4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	3204      	adds	r2, #4
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1d1a      	adds	r2, r3, #4
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4a26      	ldr	r2, [pc, #152]	; (80034dc <xTaskIncrementTick+0x224>)
 8003444:	441a      	add	r2, r3
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	615a      	str	r2, [r3, #20]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344e:	4923      	ldr	r1, [pc, #140]	; (80034dc <xTaskIncrementTick+0x224>)
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c59      	adds	r1, r3, #1
 800345e:	481f      	ldr	r0, [pc, #124]	; (80034dc <xTaskIncrementTick+0x224>)
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4403      	add	r3, r0
 800346a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <xTaskIncrementTick+0x228>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	429a      	cmp	r2, r3
 8003478:	f67f af59 	bls.w	800332e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800347c:	2301      	movs	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003480:	e755      	b.n	800332e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <xTaskIncrementTick+0x228>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4914      	ldr	r1, [pc, #80]	; (80034dc <xTaskIncrementTick+0x224>)
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d901      	bls.n	800349e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800349a:	2301      	movs	r3, #1
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <xTaskIncrementTick+0x22c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
 80034aa:	e004      	b.n	80034b6 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <xTaskIncrementTick+0x230>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <xTaskIncrementTick+0x230>)
 80034b4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200001d8 	.word	0x200001d8
 80034c4:	200001b4 	.word	0x200001b4
 80034c8:	20000168 	.word	0x20000168
 80034cc:	2000016c 	.word	0x2000016c
 80034d0:	200001c8 	.word	0x200001c8
 80034d4:	200001d0 	.word	0x200001d0
 80034d8:	200001b8 	.word	0x200001b8
 80034dc:	200000dc 	.word	0x200000dc
 80034e0:	200000d8 	.word	0x200000d8
 80034e4:	200001c4 	.word	0x200001c4
 80034e8:	200001c0 	.word	0x200001c0

080034ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <vTaskSwitchContext+0xbc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <vTaskSwitchContext+0xc0>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003500:	e04d      	b.n	800359e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <vTaskSwitchContext+0xc0>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <vTaskSwitchContext+0xc4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	f1c3 031f 	rsb	r3, r3, #31
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	4925      	ldr	r1, [pc, #148]	; (80035b4 <vTaskSwitchContext+0xc8>)
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	607b      	str	r3, [r7, #4]
    }
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <vTaskSwitchContext+0x5a>
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <vTaskSwitchContext+0xc8>)
 8003554:	4413      	add	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3308      	adds	r3, #8
 800356a:	429a      	cmp	r2, r3
 800356c:	d104      	bne.n	8003578 <vTaskSwitchContext+0x8c>
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4a0e      	ldr	r2, [pc, #56]	; (80035b8 <vTaskSwitchContext+0xcc>)
 8003580:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <vTaskSwitchContext+0xcc>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <vTaskSwitchContext+0xd0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d102      	bne.n	8003594 <vTaskSwitchContext+0xa8>
 800358e:	f003 feb1 	bl	80072f4 <SEGGER_SYSVIEW_OnIdle>
}
 8003592:	e004      	b.n	800359e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <vTaskSwitchContext+0xcc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f003 ff09 	bl	80073b0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800359e:	bf00      	nop
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200001d8 	.word	0x200001d8
 80035ac:	200001c4 	.word	0x200001c4
 80035b0:	200001b8 	.word	0x200001b8
 80035b4:	200000dc 	.word	0x200000dc
 80035b8:	200000d8 	.word	0x200000d8
 80035bc:	200001d4 	.word	0x200001d4

080035c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	60fb      	str	r3, [r7, #12]
    }
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <vTaskPlaceOnEventList+0x44>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3318      	adds	r3, #24
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fe fecf 	bl	8002392 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035f4:	2101      	movs	r1, #1
 80035f6:	6838      	ldr	r0, [r7, #0]
 80035f8:	f000 fc3a 	bl	8003e70 <prvAddCurrentTaskToDelayedList>
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200000d8 	.word	0x200000d8

08003608 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	613b      	str	r3, [r7, #16]
    }
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	61da      	str	r2, [r3, #28]
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	621a      	str	r2, [r3, #32]
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <vTaskPlaceOnEventListRestricted+0x8c>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	3218      	adds	r2, #24
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f103 0218 	add.w	r2, r3, #24
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800367c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800367e:	2024      	movs	r0, #36	; 0x24
 8003680:	f003 f938 	bl	80068f4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	f000 fbf2 	bl	8003e70 <prvAddCurrentTaskToDelayedList>
    }
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	200000d8 	.word	0x200000d8

08003698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	60fb      	str	r3, [r7, #12]
    }
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	6a12      	ldr	r2, [r2, #32]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	69d2      	ldr	r2, [r2, #28]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	3318      	adds	r3, #24
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d103      	bne.n	80036f2 <xTaskRemoveFromEventList+0x5a>
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1e5a      	subs	r2, r3, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003702:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <xTaskRemoveFromEventList+0x198>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d162      	bne.n	80037d0 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	68d2      	ldr	r2, [r2, #12]
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	6a3a      	ldr	r2, [r7, #32]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	3304      	adds	r3, #4
 800372c:	429a      	cmp	r2, r3
 800372e:	d103      	bne.n	8003738 <xTaskRemoveFromEventList+0xa0>
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	2200      	movs	r2, #0
 800373c:	615a      	str	r2, [r3, #20]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fe72 	bl	8007434 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2201      	movs	r2, #1
 8003756:	409a      	lsls	r2, r3
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <xTaskRemoveFromEventList+0x19c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4313      	orrs	r3, r2
 800375e:	4a35      	ldr	r2, [pc, #212]	; (8003834 <xTaskRemoveFromEventList+0x19c>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4934      	ldr	r1, [pc, #208]	; (8003838 <xTaskRemoveFromEventList+0x1a0>)
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	3304      	adds	r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	6a3a      	ldr	r2, [r7, #32]
 800378c:	3204      	adds	r2, #4
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4a24      	ldr	r2, [pc, #144]	; (8003838 <xTaskRemoveFromEventList+0x1a0>)
 80037a6:	441a      	add	r2, r3
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	615a      	str	r2, [r3, #20]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4921      	ldr	r1, [pc, #132]	; (8003838 <xTaskRemoveFromEventList+0x1a0>)
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1c59      	adds	r1, r3, #1
 80037c0:	481d      	ldr	r0, [pc, #116]	; (8003838 <xTaskRemoveFromEventList+0x1a0>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4403      	add	r3, r0
 80037cc:	6019      	str	r1, [r3, #0]
 80037ce:	e01b      	b.n	8003808 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <xTaskRemoveFromEventList+0x1a4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	61da      	str	r2, [r3, #28]
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	621a      	str	r2, [r3, #32]
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	3218      	adds	r2, #24
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f103 0218 	add.w	r2, r3, #24
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <xTaskRemoveFromEventList+0x1a4>)
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <xTaskRemoveFromEventList+0x1a4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <xTaskRemoveFromEventList+0x1a4>)
 8003806:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <xTaskRemoveFromEventList+0x1a8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	429a      	cmp	r2, r3
 8003814:	d905      	bls.n	8003822 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003816:	2301      	movs	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <xTaskRemoveFromEventList+0x1ac>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e001      	b.n	8003826 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003828:	4618      	mov	r0, r3
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200001d8 	.word	0x200001d8
 8003834:	200001b8 	.word	0x200001b8
 8003838:	200000dc 	.word	0x200000dc
 800383c:	20000170 	.word	0x20000170
 8003840:	200000d8 	.word	0x200000d8
 8003844:	200001c4 	.word	0x200001c4

08003848 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <vTaskInternalSetTimeOutState+0x24>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <vTaskInternalSetTimeOutState+0x28>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	605a      	str	r2, [r3, #4]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	200001c8 	.word	0x200001c8
 8003870:	200001b4 	.word	0x200001b4

08003874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	613b      	str	r3, [r7, #16]
    }
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	60fb      	str	r3, [r7, #12]
    }
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80038b6:	f000 ff8d 	bl	80047d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80038ba:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <xTaskCheckForTimeOut+0xc4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d2:	d102      	bne.n	80038da <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	e026      	b.n	8003928 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b17      	ldr	r3, [pc, #92]	; (800393c <xTaskCheckForTimeOut+0xc8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d00a      	beq.n	80038fc <xTaskCheckForTimeOut+0x88>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d305      	bcc.n	80038fc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e015      	b.n	8003928 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	429a      	cmp	r2, r3
 8003904:	d20b      	bcs.n	800391e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ff98 	bl	8003848 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	e004      	b.n	8003928 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003928:	f000 ff84 	bl	8004834 <vPortExitCritical>

    return xReturn;
 800392c:	69fb      	ldr	r3, [r7, #28]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200001b4 	.word	0x200001b4
 800393c:	200001c8 	.word	0x200001c8

08003940 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <vTaskMissedYield+0x14>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	200001c4 	.word	0x200001c4

08003958 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003960:	f000 f852 	bl	8003a08 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <prvIdleTask+0x28>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d9f9      	bls.n	8003960 <prvIdleTask+0x8>
            {
                taskYIELD();
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <prvIdleTask+0x2c>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800397c:	e7f0      	b.n	8003960 <prvIdleTask+0x8>
 800397e:	bf00      	nop
 8003980:	200000dc 	.word	0x200000dc
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	e00c      	b.n	80039ae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <prvInitialiseTaskLists+0x60>)
 80039a0:	4413      	add	r3, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fca4 	bl	80022f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3301      	adds	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d9ef      	bls.n	8003994 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80039b4:	480d      	ldr	r0, [pc, #52]	; (80039ec <prvInitialiseTaskLists+0x64>)
 80039b6:	f7fe fc9b 	bl	80022f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80039ba:	480d      	ldr	r0, [pc, #52]	; (80039f0 <prvInitialiseTaskLists+0x68>)
 80039bc:	f7fe fc98 	bl	80022f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039c0:	480c      	ldr	r0, [pc, #48]	; (80039f4 <prvInitialiseTaskLists+0x6c>)
 80039c2:	f7fe fc95 	bl	80022f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80039c6:	480c      	ldr	r0, [pc, #48]	; (80039f8 <prvInitialiseTaskLists+0x70>)
 80039c8:	f7fe fc92 	bl	80022f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80039cc:	480b      	ldr	r0, [pc, #44]	; (80039fc <prvInitialiseTaskLists+0x74>)
 80039ce:	f7fe fc8f 	bl	80022f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <prvInitialiseTaskLists+0x78>)
 80039d4:	4a05      	ldr	r2, [pc, #20]	; (80039ec <prvInitialiseTaskLists+0x64>)
 80039d6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <prvInitialiseTaskLists+0x7c>)
 80039da:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <prvInitialiseTaskLists+0x68>)
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200000dc 	.word	0x200000dc
 80039ec:	20000140 	.word	0x20000140
 80039f0:	20000154 	.word	0x20000154
 80039f4:	20000170 	.word	0x20000170
 80039f8:	20000184 	.word	0x20000184
 80039fc:	2000019c 	.word	0x2000019c
 8003a00:	20000168 	.word	0x20000168
 8003a04:	2000016c 	.word	0x2000016c

08003a08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a0e:	e019      	b.n	8003a44 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003a10:	f000 fee0 	bl	80047d4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <prvCheckTasksWaitingTermination+0x50>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fcef 	bl	8002404 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <prvCheckTasksWaitingTermination+0x54>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <prvCheckTasksWaitingTermination+0x54>)
 8003a2e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <prvCheckTasksWaitingTermination+0x58>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <prvCheckTasksWaitingTermination+0x58>)
 8003a38:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003a3a:	f000 fefb 	bl	8004834 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f810 	bl	8003a64 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <prvCheckTasksWaitingTermination+0x58>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e1      	bne.n	8003a10 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000184 	.word	0x20000184
 8003a5c:	200001b0 	.word	0x200001b0
 8003a60:	20000198 	.word	0x20000198

08003a64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f895 	bl	8004ba0 <vPortFree>
            vPortFree( pxTCB );
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f001 f892 	bl	8004ba0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <prvResetNextTaskUnblockTime+0x30>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <prvResetNextTaskUnblockTime+0x34>)
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a9a:	e005      	b.n	8003aa8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <prvResetNextTaskUnblockTime+0x30>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <prvResetNextTaskUnblockTime+0x34>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000168 	.word	0x20000168
 8003ab8:	200001d0 	.word	0x200001d0

08003abc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <xTaskGetSchedulerState+0x34>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003aca:	2301      	movs	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	e008      	b.n	8003ae2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <xTaskGetSchedulerState+0x38>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	e001      	b.n	8003ae2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003ae2:	687b      	ldr	r3, [r7, #4]
    }
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	200001bc 	.word	0x200001bc
 8003af4:	200001d8 	.word	0x200001d8

08003af8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	613b      	str	r3, [r7, #16]
    }
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003b22:	f000 fe57 	bl	80047d4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <xTaskGenericNotifyWait+0x108>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3354      	adds	r3, #84	; 0x54
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d022      	beq.n	8003b7e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <xTaskGenericNotifyWait+0x108>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	3214      	adds	r2, #20
 8003b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	43d2      	mvns	r2, r2
 8003b48:	4011      	ands	r1, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	3214      	adds	r2, #20
 8003b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <xTaskGenericNotifyWait+0x108>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3354      	adds	r3, #84	; 0x54
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b66:	2101      	movs	r1, #1
 8003b68:	6a38      	ldr	r0, [r7, #32]
 8003b6a:	f000 f981 	bl	8003e70 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <xTaskGenericNotifyWait+0x10c>)
 8003b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b7e:	f000 fe59 	bl	8004834 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003b82:	f000 fe27 	bl	80047d4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	2040      	movs	r0, #64	; 0x40
 8003b94:	f002 ffd8 	bl	8006b48 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003b9e:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <xTaskGenericNotifyWait+0x108>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	3214      	adds	r2, #20
 8003ba6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <xTaskGenericNotifyWait+0x108>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3354      	adds	r3, #84	; 0x54
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d002      	beq.n	8003bc6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e00e      	b.n	8003be4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <xTaskGenericNotifyWait+0x108>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	3214      	adds	r2, #20
 8003bce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	43d2      	mvns	r2, r2
 8003bd6:	4011      	ands	r1, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	3214      	adds	r2, #20
 8003bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <xTaskGenericNotifyWait+0x108>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	3354      	adds	r3, #84	; 0x54
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003bf2:	f000 fe1f 	bl	8004834 <vPortExitCritical>

        return xReturn;
 8003bf6:	697b      	ldr	r3, [r7, #20]
    }
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	200000d8 	.word	0x200000d8
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b090      	sub	sp, #64	; 0x40
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003c16:	2301      	movs	r3, #1
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	623b      	str	r3, [r7, #32]
    }
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	61fb      	str	r3, [r7, #28]
    }
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003c56:	f000 fdbd 	bl	80047d4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	3214      	adds	r2, #20
 8003c66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4413      	add	r3, r2
 8003c74:	3354      	adds	r3, #84	; 0x54
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4413      	add	r3, r2
 8003c82:	3354      	adds	r3, #84	; 0x54
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d83b      	bhi.n	8003d06 <xTaskGenericNotify+0xfe>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <xTaskGenericNotify+0x8c>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003d25 	.word	0x08003d25
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003cc5 	.word	0x08003cc5
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003ceb 	.word	0x08003ceb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	3214      	adds	r2, #20
 8003cae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	ea42 0103 	orr.w	r1, r2, r3
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	3214      	adds	r2, #20
 8003cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003cc2:	e032      	b.n	8003d2a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	3214      	adds	r2, #20
 8003cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	3214      	adds	r2, #20
 8003cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003cda:	e026      	b.n	8003d2a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	3214      	adds	r2, #20
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003ce8:	e01f      	b.n	8003d2a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d006      	beq.n	8003d00 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	3214      	adds	r2, #20
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003cfe:	e014      	b.n	8003d2a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003d04:	e011      	b.n	8003d2a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003d06:	4b55      	ldr	r3, [pc, #340]	; (8003e5c <xTaskGenericNotify+0x254>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00c      	beq.n	8003d28 <xTaskGenericNotify+0x120>
        __asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	61bb      	str	r3, [r7, #24]
    }
 8003d20:	bf00      	nop
 8003d22:	e7fe      	b.n	8003d22 <xTaskGenericNotify+0x11a>
                    break;
 8003d24:	bf00      	nop
 8003d26:	e000      	b.n	8003d2a <xTaskGenericNotify+0x122>

                    break;
 8003d28:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 fbc3 	bl	80074b8 <SEGGER_SYSVIEW_ShrinkId>
 8003d32:	4601      	mov	r1, r0
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	203e      	movs	r0, #62	; 0x3e
 8003d40:	f002 ff02 	bl	8006b48 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003d44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d17f      	bne.n	8003e4c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d58:	68d2      	ldr	r2, [r2, #12]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d103      	bne.n	8003d7a <xTaskGenericNotify+0x172>
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 fb51 	bl	8007434 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <xTaskGenericNotify+0x258>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <xTaskGenericNotify+0x258>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	492e      	ldr	r1, [pc, #184]	; (8003e64 <xTaskGenericNotify+0x25c>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	3304      	adds	r3, #4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	60da      	str	r2, [r3, #12]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dce:	3204      	adds	r2, #4
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <xTaskGenericNotify+0x25c>)
 8003de8:	441a      	add	r2, r3
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df2:	491c      	ldr	r1, [pc, #112]	; (8003e64 <xTaskGenericNotify+0x25c>)
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1c59      	adds	r1, r3, #1
 8003e02:	4818      	ldr	r0, [pc, #96]	; (8003e64 <xTaskGenericNotify+0x25c>)
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4403      	add	r3, r0
 8003e0e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <xTaskGenericNotify+0x226>
        __asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	617b      	str	r3, [r7, #20]
    }
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <xTaskGenericNotify+0x260>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d907      	bls.n	8003e4c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <xTaskGenericNotify+0x264>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e4c:	f000 fcf2 	bl	8004834 <vPortExitCritical>

        return xReturn;
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3738      	adds	r7, #56	; 0x38
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200001b4 	.word	0x200001b4
 8003e60:	200001b8 	.word	0x200001b8
 8003e64:	200000dc 	.word	0x200000dc
 8003e68:	200000d8 	.word	0x200000d8
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e80:	4b35      	ldr	r3, [pc, #212]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fabc 	bl	8002404 <uxListRemove>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	2201      	movs	r2, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003ea8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb0:	d124      	bne.n	8003efc <prvAddCurrentTaskToDelayedList+0x8c>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d021      	beq.n	8003efc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	3204      	adds	r2, #4
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	1d1a      	adds	r2, r3, #4
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003eec:	615a      	str	r2, [r3, #20]
 8003eee:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	4a1a      	ldr	r2, [pc, #104]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003efa:	e026      	b.n	8003f4a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d209      	bcs.n	8003f28 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7fe fa36 	bl	8002392 <vListInsert>
}
 8003f26:	e010      	b.n	8003f4a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f28:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7fe fa2c 	bl	8002392 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d202      	bcs.n	8003f4a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003f44:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6013      	str	r3, [r2, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200001b4 	.word	0x200001b4
 8003f58:	200000d8 	.word	0x200000d8
 8003f5c:	200001b8 	.word	0x200001b8
 8003f60:	2000019c 	.word	0x2000019c
 8003f64:	2000016c 	.word	0x2000016c
 8003f68:	20000168 	.word	0x20000168
 8003f6c:	200001d0 	.word	0x200001d0

08003f70 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f7a:	f000 fa47 	bl	800440c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <xTimerCreateTimerTask+0x54>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <xTimerCreateTimerTask+0x58>)
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f94:	490d      	ldr	r1, [pc, #52]	; (8003fcc <xTimerCreateTimerTask+0x5c>)
 8003f96:	480e      	ldr	r0, [pc, #56]	; (8003fd0 <xTimerCreateTimerTask+0x60>)
 8003f98:	f7fe fd8e 	bl	8002ab8 <xTaskCreate>
 8003f9c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	603b      	str	r3, [r7, #0]
    }
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003fba:	687b      	ldr	r3, [r7, #4]
    }
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	2000020c 	.word	0x2000020c
 8003fc8:	20000210 	.word	0x20000210
 8003fcc:	0800793c 	.word	0x0800793c
 8003fd0:	08004079 	.word	0x08004079

08003fd4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fe0:	e008      	b.n	8003ff4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4413      	add	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	18d1      	adds	r1, r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f8dd 	bl	80041c0 <prvInsertTimerInActiveList>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ea      	bne.n	8003fe2 <prvReloadTimer+0xe>
        }
    }
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <prvProcessExpiredTimer+0x5c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3304      	adds	r3, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe f9e7 	bl	8002404 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff ffc3 	bl	8003fd4 <prvReloadTimer>
 800404e:	e008      	b.n	8004062 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	4798      	blx	r3
    }
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000204 	.word	0x20000204

08004078 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004080:	f107 0308 	add.w	r3, r7, #8
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f857 	bl	8004138 <prvGetNextExpireTime>
 800408a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4619      	mov	r1, r3
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f803 	bl	800409c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004096:	f000 f8d5 	bl	8004244 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800409a:	e7f1      	b.n	8004080 <prvTimerTask+0x8>

0800409c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80040a6:	f7fe ffd7 	bl	8003058 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040aa:	f107 0308 	add.w	r3, r7, #8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f866 	bl	8004180 <prvSampleTimeNow>
 80040b4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d130      	bne.n	800411e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <prvProcessTimerOrBlockTask+0x3c>
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d806      	bhi.n	80040d8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040ca:	f7fe ffd3 	bl	8003074 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ffa1 	bl	8004018 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040d6:	e024      	b.n	8004122 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <prvProcessTimerOrBlockTask+0x90>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <prvProcessTimerOrBlockTask+0x50>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <prvProcessTimerOrBlockTask+0x52>
 80040ec:	2300      	movs	r3, #0
 80040ee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <prvProcessTimerOrBlockTask+0x94>)
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f7fe fca7 	bl	8002a50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004102:	f7fe ffb7 	bl	8003074 <xTaskResumeAll>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <prvProcessTimerOrBlockTask+0x98>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
    }
 800411c:	e001      	b.n	8004122 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800411e:	f7fe ffa9 	bl	8003074 <xTaskResumeAll>
    }
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000208 	.word	0x20000208
 8004130:	2000020c 	.word	0x2000020c
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <prvGetNextExpireTime+0x44>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <prvGetNextExpireTime+0x16>
 800414a:	2201      	movs	r2, #1
 800414c:	e000      	b.n	8004150 <prvGetNextExpireTime+0x18>
 800414e:	2200      	movs	r2, #0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <prvGetNextExpireTime+0x44>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e001      	b.n	800416c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800416c:	68fb      	ldr	r3, [r7, #12]
    }
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	20000204 	.word	0x20000204

08004180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004188:	f7ff f874 	bl	8003274 <xTaskGetTickCount>
 800418c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <prvSampleTimeNow+0x3c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	429a      	cmp	r2, r3
 8004196:	d205      	bcs.n	80041a4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004198:	f000 f912 	bl	80043c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e002      	b.n	80041aa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <prvSampleTimeNow+0x3c>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041b0:	68fb      	ldr	r3, [r7, #12]
    }
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000214 	.word	0x20000214

080041c0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d812      	bhi.n	800420c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	1ad2      	subs	r2, r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d302      	bcc.n	80041fa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e01b      	b.n	8004232 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <prvInsertTimerInActiveList+0x7c>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3304      	adds	r3, #4
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f7fe f8c4 	bl	8002392 <vListInsert>
 800420a:	e012      	b.n	8004232 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d206      	bcs.n	8004222 <prvInsertTimerInActiveList+0x62>
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e007      	b.n	8004232 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <prvInsertTimerInActiveList+0x80>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe f8b0 	bl	8002392 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004232:	697b      	ldr	r3, [r7, #20]
    }
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000208 	.word	0x20000208
 8004240:	20000204 	.word	0x20000204

08004244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800424a:	e0a6      	b.n	800439a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f2c0 80a2 	blt.w	8004398 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3304      	adds	r3, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe f8cd 	bl	8002404 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff87 	bl	8004180 <prvSampleTimeNow>
 8004272:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3b01      	subs	r3, #1
 8004278:	2b08      	cmp	r3, #8
 800427a:	f200 808e 	bhi.w	800439a <prvProcessReceivedCommands+0x156>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <prvProcessReceivedCommands+0x40>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042a9 	.word	0x080042a9
 800428c:	08004311 	.word	0x08004311
 8004290:	08004325 	.word	0x08004325
 8004294:	0800436f 	.word	0x0800436f
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042a9 	.word	0x080042a9
 80042a0:	08004311 	.word	0x08004311
 80042a4:	08004325 	.word	0x08004325
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	18d1      	adds	r1, r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	69f8      	ldr	r0, [r7, #28]
 80042c8:	f7ff ff7a 	bl	80041c0 <prvInsertTimerInActiveList>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d063      	beq.n	800439a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	4413      	add	r3, r2
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4619      	mov	r1, r3
 80042ec:	69f8      	ldr	r0, [r7, #28]
 80042ee:	f7ff fe71 	bl	8003fd4 <prvReloadTimer>
 80042f2:	e008      	b.n	8004306 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	69f8      	ldr	r0, [r7, #28]
 800430c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800430e:	e044      	b.n	800439a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004322:	e03a      	b.n	800439a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	617b      	str	r3, [r7, #20]
    }
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	18d1      	adds	r1, r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	69f8      	ldr	r0, [r7, #28]
 8004368:	f7ff ff2a 	bl	80041c0 <prvInsertTimerInActiveList>
                        break;
 800436c:	e015      	b.n	800439a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800437c:	69f8      	ldr	r0, [r7, #28]
 800437e:	f000 fc0f 	bl	8004ba0 <vPortFree>
 8004382:	e00a      	b.n	800439a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004396:	e000      	b.n	800439a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004398:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <prvProcessReceivedCommands+0x178>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f107 0108 	add.w	r1, r7, #8
 80043a2:	2200      	movs	r2, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe f95f 	bl	8002668 <xQueueReceive>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f47f af4d 	bne.w	800424c <prvProcessReceivedCommands+0x8>
        }
    }
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	2000020c 	.word	0x2000020c

080043c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043c6:	e009      	b.n	80043dc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <prvSwitchTimerLists+0x44>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043d6:	6838      	ldr	r0, [r7, #0]
 80043d8:	f7ff fe1e 	bl	8004018 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <prvSwitchTimerLists+0x44>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <prvSwitchTimerLists+0x44>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <prvSwitchTimerLists+0x48>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <prvSwitchTimerLists+0x44>)
 80043f2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <prvSwitchTimerLists+0x48>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6013      	str	r3, [r2, #0]
    }
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000204 	.word	0x20000204
 8004408:	20000208 	.word	0x20000208

0800440c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004410:	f000 f9e0 	bl	80047d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <prvCheckForValidListAndQueue+0x54>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d11d      	bne.n	8004458 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800441c:	4811      	ldr	r0, [pc, #68]	; (8004464 <prvCheckForValidListAndQueue+0x58>)
 800441e:	f7fd ff67 	bl	80022f0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004422:	4811      	ldr	r0, [pc, #68]	; (8004468 <prvCheckForValidListAndQueue+0x5c>)
 8004424:	f7fd ff64 	bl	80022f0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004428:	4b10      	ldr	r3, [pc, #64]	; (800446c <prvCheckForValidListAndQueue+0x60>)
 800442a:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <prvCheckForValidListAndQueue+0x58>)
 800442c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <prvCheckForValidListAndQueue+0x64>)
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <prvCheckForValidListAndQueue+0x5c>)
 8004432:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004434:	2200      	movs	r2, #0
 8004436:	210c      	movs	r1, #12
 8004438:	200a      	movs	r0, #10
 800443a:	f7fe f89d 	bl	8002578 <xQueueGenericCreate>
 800443e:	4603      	mov	r3, r0
 8004440:	4a07      	ldr	r2, [pc, #28]	; (8004460 <prvCheckForValidListAndQueue+0x54>)
 8004442:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <prvCheckForValidListAndQueue+0x54>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <prvCheckForValidListAndQueue+0x54>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4908      	ldr	r1, [pc, #32]	; (8004474 <prvCheckForValidListAndQueue+0x68>)
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe faa6 	bl	80029a4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004458:	f000 f9ec 	bl	8004834 <vPortExitCritical>
    }
 800445c:	bf00      	nop
 800445e:	bd80      	pop	{r7, pc}
 8004460:	2000020c 	.word	0x2000020c
 8004464:	200001dc 	.word	0x200001dc
 8004468:	200001f0 	.word	0x200001f0
 800446c:	20000204 	.word	0x20000204
 8004470:	20000208 	.word	0x20000208
 8004474:	08007944 	.word	0x08007944

08004478 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3b04      	subs	r3, #4
 8004488:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004490:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b04      	subs	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f023 0201 	bic.w	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b04      	subs	r3, #4
 80044a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80044a8:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <pxPortInitialiseStack+0x64>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b14      	subs	r3, #20
 80044b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b04      	subs	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f06f 0202 	mvn.w	r2, #2
 80044c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b20      	subs	r3, #32
 80044cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	080044e1 	.word	0x080044e1

080044e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <prvTaskExitError+0x54>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f2:	d00a      	beq.n	800450a <prvTaskExitError+0x2a>
        __asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	60fb      	str	r3, [r7, #12]
    }
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <prvTaskExitError+0x28>
        __asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60bb      	str	r3, [r7, #8]
    }
 800451c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800451e:	bf00      	nop
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0fc      	beq.n	8004520 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	20000010 	.word	0x20000010
	...

08004540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pxCurrentTCBConst2>)
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	6808      	ldr	r0, [r1, #0]
 8004546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454a:	f380 8809 	msr	PSP, r0
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8811 	msr	BASEPRI, r0
 800455a:	4770      	bx	lr
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst2>:
 8004560:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004568:	4808      	ldr	r0, [pc, #32]	; (800458c <prvPortStartFirstTask+0x24>)
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	6800      	ldr	r0, [r0, #0]
 800456e:	f380 8808 	msr	MSP, r0
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8814 	msr	CONTROL, r0
 800457a:	b662      	cpsie	i
 800457c:	b661      	cpsie	f
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	df00      	svc	0
 8004588:	bf00      	nop
 800458a:	0000      	.short	0x0000
 800458c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop

08004594 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800459a:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <xPortStartScheduler+0x120>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a46      	ldr	r2, [pc, #280]	; (80046b8 <xPortStartScheduler+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10a      	bne.n	80045ba <xPortStartScheduler+0x26>
        __asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	613b      	str	r3, [r7, #16]
    }
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ba:	4b3e      	ldr	r3, [pc, #248]	; (80046b4 <xPortStartScheduler+0x120>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <xPortStartScheduler+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10a      	bne.n	80045da <xPortStartScheduler+0x46>
        __asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
    }
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <xPortStartScheduler+0x12c>)
 80045dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <xPortStartScheduler+0x130>)
 8004600:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <xPortStartScheduler+0x134>)
 8004604:	2207      	movs	r2, #7
 8004606:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004608:	e009      	b.n	800461e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <xPortStartScheduler+0x134>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <xPortStartScheduler+0x134>)
 8004612:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d0ef      	beq.n	800460a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <xPortStartScheduler+0x134>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1c3 0307 	rsb	r3, r3, #7
 8004632:	2b04      	cmp	r3, #4
 8004634:	d00a      	beq.n	800464c <xPortStartScheduler+0xb8>
        __asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60bb      	str	r3, [r7, #8]
    }
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <xPortStartScheduler+0x134>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <xPortStartScheduler+0x134>)
 8004654:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <xPortStartScheduler+0x134>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800465e:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <xPortStartScheduler+0x134>)
 8004660:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <xPortStartScheduler+0x138>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <xPortStartScheduler+0x138>)
 8004670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004674:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <xPortStartScheduler+0x138>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a14      	ldr	r2, [pc, #80]	; (80046cc <xPortStartScheduler+0x138>)
 800467c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004680:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004682:	f000 f963 	bl	800494c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <xPortStartScheduler+0x13c>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800468c:	f000 f982 	bl	8004994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <xPortStartScheduler+0x140>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <xPortStartScheduler+0x140>)
 8004696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800469a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800469c:	f7ff ff64 	bl	8004568 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046a0:	f7fe ff24 	bl	80034ec <vTaskSwitchContext>
    prvTaskExitError();
 80046a4:	f7ff ff1c 	bl	80044e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000ed00 	.word	0xe000ed00
 80046b8:	410fc271 	.word	0x410fc271
 80046bc:	410fc270 	.word	0x410fc270
 80046c0:	e000e400 	.word	0xe000e400
 80046c4:	20000218 	.word	0x20000218
 80046c8:	2000021c 	.word	0x2000021c
 80046cc:	e000ed20 	.word	0xe000ed20
 80046d0:	20000010 	.word	0x20000010
 80046d4:	e000ef34 	.word	0xe000ef34

080046d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046de:	4b37      	ldr	r3, [pc, #220]	; (80047bc <vInitPrioGroupValue+0xe4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a37      	ldr	r2, [pc, #220]	; (80047c0 <vInitPrioGroupValue+0xe8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10a      	bne.n	80046fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	613b      	str	r3, [r7, #16]
    }
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046fe:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <vInitPrioGroupValue+0xe4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a30      	ldr	r2, [pc, #192]	; (80047c4 <vInitPrioGroupValue+0xec>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10a      	bne.n	800471e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
    }
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <vInitPrioGroupValue+0xf0>)
 8004720:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <vInitPrioGroupValue+0xf4>)
 8004744:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004748:	2207      	movs	r2, #7
 800474a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800474c:	e009      	b.n	8004762 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004756:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d0ef      	beq.n	800474e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	d00a      	beq.n	8004790 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60bb      	str	r3, [r7, #8]
    }
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004798:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 80047a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000ed00 	.word	0xe000ed00
 80047c0:	410fc271 	.word	0x410fc271
 80047c4:	410fc270 	.word	0x410fc270
 80047c8:	e000e400 	.word	0xe000e400
 80047cc:	20000218 	.word	0x20000218
 80047d0:	2000021c 	.word	0x2000021c

080047d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
        __asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
    }
 80047ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <vPortEnterCritical+0x58>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <vPortEnterCritical+0x58>)
 80047f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <vPortEnterCritical+0x58>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10f      	bne.n	8004820 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <vPortEnterCritical+0x5c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <vPortEnterCritical+0x4c>
        __asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	603b      	str	r3, [r7, #0]
    }
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <vPortEnterCritical+0x4a>
    }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000010 	.word	0x20000010
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <vPortExitCritical+0x50>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <vPortExitCritical+0x24>
        __asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	607b      	str	r3, [r7, #4]
    }
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <vPortExitCritical+0x50>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <vPortExitCritical+0x50>)
 8004860:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <vPortExitCritical+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <vPortExitCritical+0x42>
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004874:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000010 	.word	0x20000010
	...

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f01e 0f10 	tst.w	lr, #16
 80048a0:	bf08      	it	eq
 80048a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048b4:	f380 8811 	msr	BASEPRI, r0
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f7fe fe14 	bl	80034ec <vTaskSwitchContext>
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f380 8811 	msr	BASEPRI, r0
 80048cc:	bc09      	pop	{r0, r3}
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d6:	f01e 0f10 	tst.w	lr, #16
 80048da:	bf08      	it	eq
 80048dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048e0:	f380 8809 	msr	PSP, r0
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst>:
 80048f0:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
        __asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	607b      	str	r3, [r7, #4]
    }
 8004910:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004912:	f002 fc75 	bl	8007200 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004916:	f7fe fccf 	bl	80032b8 <xTaskIncrementTick>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004920:	f002 fccc 	bl	80072bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <SysTick_Handler+0x50>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e001      	b.n	8004932 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800492e:	f002 fca9 	bl	8007284 <SEGGER_SYSVIEW_RecordExitISR>
 8004932:	2300      	movs	r3, #0
 8004934:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f383 8811 	msr	BASEPRI, r3
    }
 800493c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <vPortSetupTimerInterrupt+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortSetupTimerInterrupt+0x3c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x40>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <vPortSetupTimerInterrupt+0x44>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	20000000 	.word	0x20000000
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	e000e014 	.word	0xe000e014

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
 80049a2:	0000      	.short	0x0000
 80049a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop

080049ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049b2:	f3ef 8305 	mrs	r3, IPSR
 80049b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d914      	bls.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <vPortValidateInterruptPriority+0x70>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <vPortValidateInterruptPriority+0x74>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	7afa      	ldrb	r2, [r7, #11]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d20a      	bcs.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
    }
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <vPortValidateInterruptPriority+0x78>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <vPortValidateInterruptPriority+0x7c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d90a      	bls.n	8004a0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	603b      	str	r3, [r7, #0]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vPortValidateInterruptPriority+0x60>
    }
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e3f0 	.word	0xe000e3f0
 8004a20:	20000218 	.word	0x20000218
 8004a24:	e000ed0c 	.word	0xe000ed0c
 8004a28:	2000021c 	.word	0x2000021c

08004a2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004a38:	f7fe fb0e 	bl	8003058 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <pvPortMalloc+0x160>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a44:	f000 f908 	bl	8004c58 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004a4e:	2208      	movs	r2, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	3308      	adds	r3, #8
 8004a5a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d804      	bhi.n	8004a70 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	e001      	b.n	8004a74 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db70      	blt.n	8004b5c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d06d      	beq.n	8004b5c <pvPortMalloc+0x130>
 8004a80:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <pvPortMalloc+0x164>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d868      	bhi.n	8004b5c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a8a:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <pvPortMalloc+0x168>)
 8004a8c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <pvPortMalloc+0x168>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a94:	e004      	b.n	8004aa0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d903      	bls.n	8004ab2 <pvPortMalloc+0x86>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f1      	bne.n	8004a96 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <pvPortMalloc+0x160>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d04f      	beq.n	8004b5c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d91f      	bls.n	8004b1e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <pvPortMalloc+0xda>
        __asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
    }
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f000 f8f9 	bl	8004d10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <pvPortMalloc+0x164>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <pvPortMalloc+0x164>)
 8004b2a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <pvPortMalloc+0x164>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <pvPortMalloc+0x16c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d203      	bcs.n	8004b40 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b38:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <pvPortMalloc+0x164>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <pvPortMalloc+0x16c>)
 8004b3e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <pvPortMalloc+0x170>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <pvPortMalloc+0x170>)
 8004b5a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b5c:	f7fe fa8a 	bl	8003074 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <pvPortMalloc+0x154>
        __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60fb      	str	r3, [r7, #12]
    }
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <pvPortMalloc+0x152>
    return pvReturn;
 8004b80:	69fb      	ldr	r3, [r7, #28]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3728      	adds	r7, #40	; 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20012e28 	.word	0x20012e28
 8004b90:	20012e2c 	.word	0x20012e2c
 8004b94:	20012e20 	.word	0x20012e20
 8004b98:	20012e30 	.word	0x20012e30
 8004b9c:	20012e34 	.word	0x20012e34

08004ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d049      	beq.n	8004c46 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4413      	add	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	db0a      	blt.n	8004bde <vPortFree+0x3e>
        __asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60fb      	str	r3, [r7, #12]
    }
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <vPortFree+0x5c>
        __asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
    }
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0fdb      	lsrs	r3, r3, #31
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01c      	beq.n	8004c46 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d118      	bne.n	8004c46 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004c20:	f7fe fa1a 	bl	8003058 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <vPortFree+0xb0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <vPortFree+0xb0>)
 8004c30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c32:	6938      	ldr	r0, [r7, #16]
 8004c34:	f000 f86c 	bl	8004d10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <vPortFree+0xb4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <vPortFree+0xb4>)
 8004c40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c42:	f7fe fa17 	bl	8003074 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c46:	bf00      	nop
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20012e2c 	.word	0x20012e2c
 8004c54:	20012e38 	.word	0x20012e38

08004c58 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c5e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <prvHeapInit+0xa4>)
 8004c66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3307      	adds	r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <prvHeapInit+0xa4>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <prvHeapInit+0xa8>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <prvHeapInit+0xa8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0307 	bic.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <prvHeapInit+0xac>)
 8004cb8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <prvHeapInit+0xac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <prvHeapInit+0xac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvHeapInit+0xac>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <prvHeapInit+0xb0>)
 8004ce6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <prvHeapInit+0xb4>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000220 	.word	0x20000220
 8004d00:	20012e20 	.word	0x20012e20
 8004d04:	20012e28 	.word	0x20012e28
 8004d08:	20012e30 	.word	0x20012e30
 8004d0c:	20012e2c 	.word	0x20012e2c

08004d10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <prvInsertBlockIntoFreeList+0xac>)
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e002      	b.n	8004d24 <prvInsertBlockIntoFreeList+0x14>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d8f7      	bhi.n	8004d1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4413      	add	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d108      	bne.n	8004d52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d118      	bne.n	8004d98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d00d      	beq.n	8004d8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	441a      	add	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e008      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e003      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d002      	beq.n	8004dae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20012e20 	.word	0x20012e20
 8004dc0:	20012e28 	.word	0x20012e28

08004dc4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004dc8:	4803      	ldr	r0, [pc, #12]	; (8004dd8 <_cbSendSystemDesc+0x14>)
 8004dca:	f002 f9c3 	bl	8007154 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004dce:	4803      	ldr	r0, [pc, #12]	; (8004ddc <_cbSendSystemDesc+0x18>)
 8004dd0:	f002 f9c0 	bl	8007154 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	0800794c 	.word	0x0800794c
 8004ddc:	08007980 	.word	0x08007980

08004de0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <SEGGER_SYSVIEW_Conf+0x20>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dee:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <SEGGER_SYSVIEW_Conf+0x28>)
 8004df0:	f001 fd2c 	bl	800684c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004df4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004df8:	f001 fd6c 	bl	80068d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004dfc:	bf00      	nop
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000000 	.word	0x20000000
 8004e04:	08004dc5 	.word	0x08004dc5
 8004e08:	08007a14 	.word	0x08007a14

08004e0c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	e033      	b.n	8004e80 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e18:	491e      	ldr	r1, [pc, #120]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	491a      	ldr	r1, [pc, #104]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3304      	adds	r3, #4
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	4c16      	ldr	r4, [pc, #88]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4423      	add	r3, r4
 8004e48:	3308      	adds	r3, #8
 8004e4a:	681c      	ldr	r4, [r3, #0]
 8004e4c:	4d11      	ldr	r5, [pc, #68]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	442b      	add	r3, r5
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	681d      	ldr	r5, [r3, #0]
 8004e5e:	4e0d      	ldr	r6, [pc, #52]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4433      	add	r3, r6
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	462b      	mov	r3, r5
 8004e74:	4622      	mov	r2, r4
 8004e76:	f000 f979 	bl	800516c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <_cbSendTaskList+0x8c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3c6      	bcc.n	8004e18 <_cbSendTaskList+0xc>
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e94:	20012e3c 	.word	0x20012e3c
 8004e98:	20012edc 	.word	0x20012edc

08004e9c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ea4:	f7fe f9f6 	bl	8003294 <xTaskGetTickCountFromISR>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2200      	movs	r2, #0
 8004eac:	469a      	mov	sl, r3
 8004eae:	4693      	mov	fp, r2
 8004eb0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	f04f 0a00 	mov.w	sl, #0
 8004ec0:	f04f 0b00 	mov.w	fp, #0
 8004ec4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ec8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ecc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	1a14      	subs	r4, r2, r0
 8004ed6:	eb63 0501 	sbc.w	r5, r3, r1
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	00ab      	lsls	r3, r5, #2
 8004ee4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ee8:	00a2      	lsls	r2, r4, #2
 8004eea:	4614      	mov	r4, r2
 8004eec:	461d      	mov	r5, r3
 8004eee:	eb14 0800 	adds.w	r8, r4, r0
 8004ef2:	eb45 0901 	adc.w	r9, r5, r1
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f0a:	4690      	mov	r8, r2
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f12:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f32:	2205      	movs	r2, #5
 8004f34:	492b      	ldr	r1, [pc, #172]	; (8004fe4 <SYSVIEW_AddTask+0xc0>)
 8004f36:	68b8      	ldr	r0, [r7, #8]
 8004f38:	f002 fc6c 	bl	8007814 <memcmp>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04b      	beq.n	8004fda <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f42:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b07      	cmp	r3, #7
 8004f48:	d903      	bls.n	8004f52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f4a:	4828      	ldr	r0, [pc, #160]	; (8004fec <SYSVIEW_AddTask+0xc8>)
 8004f4c:	f002 fbb4 	bl	80076b8 <SEGGER_SYSVIEW_Warn>
    return;
 8004f50:	e044      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f52:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4926      	ldr	r1, [pc, #152]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4921      	ldr	r1, [pc, #132]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3304      	adds	r3, #4
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3310      	adds	r3, #16
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f8ca 	bl	800516c <SYSVIEW_SendTaskInfo>
 8004fd8:	e000      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
    return;
 8004fda:	bf00      	nop

}
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08007990 	.word	0x08007990
 8004fe8:	20012edc 	.word	0x20012edc
 8004fec:	08007998 	.word	0x08007998
 8004ff0:	20012e3c 	.word	0x20012e3c

08004ff4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004ffc:	4b59      	ldr	r3, [pc, #356]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80ab 	beq.w	800515c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e00d      	b.n	8005028 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800500c:	4956      	ldr	r1, [pc, #344]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d008      	beq.n	8005034 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	4b4e      	ldr	r3, [pc, #312]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	429a      	cmp	r2, r3
 8005030:	d3ec      	bcc.n	800500c <SYSVIEW_DeleteTask+0x18>
 8005032:	e000      	b.n	8005036 <SYSVIEW_DeleteTask+0x42>
      break;
 8005034:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005036:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	429a      	cmp	r2, r3
 8005040:	d111      	bne.n	8005066 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4a46      	ldr	r2, [pc, #280]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 800504e:	4413      	add	r3, r2
 8005050:	2214      	movs	r2, #20
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f002 fbfb 	bl	8007850 <memset>
    _NumTasks--;
 800505a:	4b42      	ldr	r3, [pc, #264]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	4a40      	ldr	r2, [pc, #256]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e07b      	b.n	800515e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d276      	bcs.n	800515e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005070:	4b3c      	ldr	r3, [pc, #240]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	493c      	ldr	r1, [pc, #240]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	4838      	ldr	r0, [pc, #224]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4403      	add	r3, r0
 8005092:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005094:	4b33      	ldr	r3, [pc, #204]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	4933      	ldr	r1, [pc, #204]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3304      	adds	r3, #4
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	482f      	ldr	r0, [pc, #188]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4403      	add	r3, r0
 80050b8:	3304      	adds	r3, #4
 80050ba:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	4929      	ldr	r1, [pc, #164]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	3308      	adds	r3, #8
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	4825      	ldr	r0, [pc, #148]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4403      	add	r3, r0
 80050e0:	3308      	adds	r3, #8
 80050e2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	491f      	ldr	r1, [pc, #124]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	330c      	adds	r3, #12
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	481b      	ldr	r0, [pc, #108]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4403      	add	r3, r0
 8005108:	330c      	adds	r3, #12
 800510a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800510c:	4b15      	ldr	r3, [pc, #84]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	4915      	ldr	r1, [pc, #84]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3310      	adds	r3, #16
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	4811      	ldr	r0, [pc, #68]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4403      	add	r3, r0
 8005130:	3310      	adds	r3, #16
 8005132:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005144:	4413      	add	r3, r2
 8005146:	2214      	movs	r2, #20
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f002 fb80 	bl	8007850 <memset>
    _NumTasks--;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3b01      	subs	r3, #1
 8005156:	4a03      	ldr	r2, [pc, #12]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e000      	b.n	800515e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800515c:	bf00      	nop
  }
}
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20012edc 	.word	0x20012edc
 8005168:	20012e3c 	.word	0x20012e3c

0800516c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	2214      	movs	r2, #20
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f002 fb64 	bl	8007850 <memset>
  TaskInfo.TaskID     = TaskID;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800519c:	f107 0314 	add.w	r3, r7, #20
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fedf 	bl	8006f64 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80051a6:	bf00      	nop
 80051a8:	3728      	adds	r7, #40	; 0x28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <__NVIC_EnableIRQ>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db0b      	blt.n	80051da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	f003 021f 	and.w	r2, r3, #31
 80051c8:	4907      	ldr	r1, [pc, #28]	; (80051e8 <__NVIC_EnableIRQ+0x38>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2001      	movs	r0, #1
 80051d2:	fa00 f202 	lsl.w	r2, r0, r2
 80051d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	e000e100 	.word	0xe000e100

080051ec <__NVIC_SetPriority>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db0a      	blt.n	8005216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	490c      	ldr	r1, [pc, #48]	; (8005238 <__NVIC_SetPriority+0x4c>)
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	440b      	add	r3, r1
 8005210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005214:	e00a      	b.n	800522c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4908      	ldr	r1, [pc, #32]	; (800523c <__NVIC_SetPriority+0x50>)
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	3b04      	subs	r3, #4
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	440b      	add	r3, r1
 800522a:	761a      	strb	r2, [r3, #24]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000e100 	.word	0xe000e100
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005246:	f002 fa93 	bl	8007770 <SEGGER_SYSVIEW_IsStarted>
 800524a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005252:	f001 fd0b 	bl	8006c6c <SEGGER_SYSVIEW_Start>
  }
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <_cbOnUARTRx+0x3c>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d806      	bhi.n	8005280 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <_cbOnUARTRx+0x3c>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	3301      	adds	r3, #1
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <_cbOnUARTRx+0x3c>)
 800527c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800527e:	e009      	b.n	8005294 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005280:	f7ff ffde 	bl	8005240 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <_cbOnUARTRx+0x3c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	1dfb      	adds	r3, r7, #7
 800528c:	2201      	movs	r2, #1
 800528e:	4619      	mov	r1, r3
 8005290:	f000 fb9c 	bl	80059cc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005294:	bf00      	nop
}
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000014 	.word	0x20000014

080052a0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d80f      	bhi.n	80052d0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <_cbOnUARTTx+0x60>)
 80052b8:	5c9a      	ldrb	r2, [r3, r2]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	3301      	adds	r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052c8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
    goto Done;
 80052ce:	e00f      	b.n	80052f0 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fa1b 	bl	8005714 <SEGGER_RTT_ReadUpBufferNoLock>
 80052de:	4603      	mov	r3, r0
 80052e0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da02      	bge.n	80052ee <_cbOnUARTTx+0x4e>
    r = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e000      	b.n	80052f0 <_cbOnUARTTx+0x50>
  }
Done:
 80052ee:	bf00      	nop
  return r;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000014 	.word	0x20000014
 8005300:	08007a1c 	.word	0x08007a1c

08005304 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <SEGGER_UART_init+0x1c>)
 800530e:	4905      	ldr	r1, [pc, #20]	; (8005324 <SEGGER_UART_init+0x20>)
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f863 	bl	80053dc <HIF_UART_Init>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08005261 	.word	0x08005261
 8005324:	080052a1 	.word	0x080052a1

08005328 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800532e:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <USART2_IRQHandler+0x80>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d011      	beq.n	8005362 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800533e:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <USART2_IRQHandler+0x84>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 030b 	and.w	r3, r3, #11
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005350:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <USART2_IRQHandler+0x88>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <USART2_IRQHandler+0x88>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	4610      	mov	r0, r2
 8005360:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01a      	beq.n	80053a2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <USART2_IRQHandler+0x8c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d015      	beq.n	80053a0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <USART2_IRQHandler+0x8c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1dfa      	adds	r2, r7, #7
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
 800537e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <USART2_IRQHandler+0x90>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a0b      	ldr	r2, [pc, #44]	; (80053b8 <USART2_IRQHandler+0x90>)
 800538c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e006      	b.n	80053a2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <USART2_IRQHandler+0x80>)
 8005396:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005398:	79fa      	ldrb	r2, [r7, #7]
 800539a:	4b04      	ldr	r3, [pc, #16]	; (80053ac <USART2_IRQHandler+0x84>)
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e000      	b.n	80053a2 <USART2_IRQHandler+0x7a>
      return;
 80053a0:	bf00      	nop
    }
  }
}
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40004400 	.word	0x40004400
 80053ac:	40004404 	.word	0x40004404
 80053b0:	20012ee0 	.word	0x20012ee0
 80053b4:	20012ee4 	.word	0x20012ee4
 80053b8:	4000440c 	.word	0x4000440c

080053bc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	6013      	str	r3, [r2, #0]
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	4000440c 	.word	0x4000440c

080053dc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80053e8:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <HIF_UART_Init+0xc8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <HIF_UART_Init+0xc8>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f2:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <HIF_UART_Init+0xcc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2b      	ldr	r2, [pc, #172]	; (80054a8 <HIF_UART_Init+0xcc>)
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005400:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <HIF_UART_Init+0xd0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005414:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005416:	4a25      	ldr	r2, [pc, #148]	; (80054ac <HIF_UART_Init+0xd0>)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <HIF_UART_Init+0xd4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005428:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005430:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HIF_UART_Init+0xd4>)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005438:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <HIF_UART_Init+0xd8>)
 800543a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800543e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HIF_UART_Init+0xdc>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005446:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <HIF_UART_Init+0xe0>)
 8005448:	2280      	movs	r2, #128	; 0x80
 800544a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005452:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HIF_UART_Init+0xe4>)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	3301      	adds	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d302      	bcc.n	8005472 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800546c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005470:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <HIF_UART_Init+0xe8>)
 800547e:	b29b      	uxth	r3, r3
 8005480:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005482:	4a11      	ldr	r2, [pc, #68]	; (80054c8 <HIF_UART_Init+0xec>)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005488:	4a10      	ldr	r2, [pc, #64]	; (80054cc <HIF_UART_Init+0xf0>)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800548e:	2106      	movs	r1, #6
 8005490:	2026      	movs	r0, #38	; 0x26
 8005492:	f7ff feab 	bl	80051ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005496:	2026      	movs	r0, #38	; 0x26
 8005498:	f7ff fe8a 	bl	80051b0 <__NVIC_EnableIRQ>
}
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023840 	.word	0x40023840
 80054a8:	40023830 	.word	0x40023830
 80054ac:	40020020 	.word	0x40020020
 80054b0:	40020000 	.word	0x40020000
 80054b4:	4000440c 	.word	0x4000440c
 80054b8:	40004410 	.word	0x40004410
 80054bc:	40004414 	.word	0x40004414
 80054c0:	0501bd00 	.word	0x0501bd00
 80054c4:	40004408 	.word	0x40004408
 80054c8:	20012ee0 	.word	0x20012ee0
 80054cc:	20012ee4 	.word	0x20012ee4

080054d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80054d6:	4b26      	ldr	r3, [pc, #152]	; (8005570 <_DoInit+0xa0>)
 80054d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80054da:	22a8      	movs	r2, #168	; 0xa8
 80054dc:	2100      	movs	r1, #0
 80054de:	6838      	ldr	r0, [r7, #0]
 80054e0:	f002 f9b6 	bl	8007850 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2203      	movs	r2, #3
 80054e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2203      	movs	r2, #3
 80054ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4a20      	ldr	r2, [pc, #128]	; (8005574 <_DoInit+0xa4>)
 80054f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	4a1f      	ldr	r2, [pc, #124]	; (8005578 <_DoInit+0xa8>)
 80054fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005502:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	4a16      	ldr	r2, [pc, #88]	; (8005574 <_DoInit+0xa4>)
 800551a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4a17      	ldr	r2, [pc, #92]	; (800557c <_DoInit+0xac>)
 8005520:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2210      	movs	r2, #16
 8005526:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800553a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	e00c      	b.n	800555e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1c3 030f 	rsb	r3, r3, #15
 800554a:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <_DoInit+0xb0>)
 800554c:	5cd1      	ldrb	r1, [r2, r3]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	460a      	mov	r2, r1
 8005556:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b0f      	cmp	r3, #15
 8005562:	d9ef      	bls.n	8005544 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005564:	f3bf 8f5f 	dmb	sy
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20012ee8 	.word	0x20012ee8
 8005574:	080079e8 	.word	0x080079e8
 8005578:	20012f90 	.word	0x20012f90
 800557c:	20013390 	.word	0x20013390
 8005580:	08007a20 	.word	0x08007a20

08005584 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005590:	2300      	movs	r3, #0
 8005592:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d905      	bls.n	80055b4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	e007      	b.n	80055c4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	69b9      	ldr	r1, [r7, #24]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	1acb      	subs	r3, r1, r3
 80055be:	4413      	add	r3, r2
 80055c0:	3b01      	subs	r3, #1
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bf28      	it	cs
 80055d2:	4613      	movcs	r3, r2
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4293      	cmp	r3, r2
 80055dc:	bf28      	it	cs
 80055de:	4613      	movcs	r3, r2
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80055ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	6978      	ldr	r0, [r7, #20]
 80055f2:	f002 f91f 	bl	8007834 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80055f6:	6a3a      	ldr	r2, [r7, #32]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	4413      	add	r3, r2
 80055fc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	4413      	add	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	4413      	add	r3, r2
 8005614:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	429a      	cmp	r2, r3
 800561e:	d101      	bne.n	8005624 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005624:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1b2      	bne.n	800559a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005634:	6a3b      	ldr	r3, [r7, #32]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3728      	adds	r7, #40	; 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d911      	bls.n	8005686 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f002 f8df 	bl	8007834 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005676:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	441a      	add	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005684:	e01f      	b.n	80056c6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	6938      	ldr	r0, [r7, #16]
 800569a:	f002 f8cb 	bl	8007834 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	4413      	add	r3, r2
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f002 f8bc 	bl	8007834 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056bc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	60da      	str	r2, [r3, #12]
}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d808      	bhi.n	80056fc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	3b01      	subs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e004      	b.n	8005706 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005706:	697b      	ldr	r3, [r7, #20]
}
 8005708:	4618      	mov	r0, r3
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b08c      	sub	sp, #48	; 0x30
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800572e:	f7ff fecf 	bl	80054d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4a37      	ldr	r2, [pc, #220]	; (800581c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005740:	4413      	add	r3, r2
 8005742:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005754:	2300      	movs	r3, #0
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	429a      	cmp	r2, r3
 800575e:	d92b      	bls.n	80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4293      	cmp	r3, r2
 8005770:	bf28      	it	cs
 8005772:	4613      	movcs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	4413      	add	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005786:	f002 f855 	bl	8007834 <memcpy>
    NumBytesRead += NumBytesRem;
 800578a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d101      	bne.n	80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80057b4:	2300      	movs	r3, #0
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bf28      	it	cs
 80057c8:	4613      	movcs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d019      	beq.n	8005806 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	4413      	add	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e2:	f002 f827 	bl	8007834 <memcpy>
    NumBytesRead += NumBytesRem;
 80057e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005810:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20012ee8 	.word	0x20012ee8

08005820 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800582c:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <SEGGER_RTT_ReadNoLock+0x108>)
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <SEGGER_RTT_ReadNoLock+0x1e>
 800583a:	f7ff fe49 	bl	80054d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	3360      	adds	r3, #96	; 0x60
 800584a:	4a37      	ldr	r2, [pc, #220]	; (8005928 <SEGGER_RTT_ReadNoLock+0x108>)
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005860:	2300      	movs	r3, #0
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d92b      	bls.n	80058c4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4293      	cmp	r3, r2
 800587c:	bf28      	it	cs
 800587e:	4613      	movcs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	4413      	add	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005892:	f001 ffcf 	bl	8007834 <memcpy>
    NumBytesRead += NumBytesRem;
 8005896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058bc:	429a      	cmp	r2, r3
 80058be:	d101      	bne.n	80058c4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf28      	it	cs
 80058d4:	4613      	movcs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d019      	beq.n	8005912 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	4413      	add	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ee:	f001 ffa1 	bl	8007834 <memcpy>
    NumBytesRead += NumBytesRem;
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800590a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005920:	4618      	mov	r0, r3
 8005922:	3730      	adds	r7, #48	; 0x30
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20012ee8 	.word	0x20012ee8

0800592c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4613      	mov	r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4413      	add	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	3360      	adds	r3, #96	; 0x60
 8005948:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800594a:	4413      	add	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d029      	beq.n	80059aa <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005956:	2b02      	cmp	r3, #2
 8005958:	d82e      	bhi.n	80059b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d013      	beq.n	800598a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005962:	e029      	b.n	80059b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005964:	6978      	ldr	r0, [r7, #20]
 8005966:	f7ff feb2 	bl	80056ce <_GetAvailWriteSpace>
 800596a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d202      	bcs.n	800597a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005978:	e021      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff fe5b 	bl	800563e <_WriteNoCheck>
    break;
 8005988:	e019      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f7ff fe9f 	bl	80056ce <_GetAvailWriteSpace>
 8005990:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4293      	cmp	r3, r2
 8005998:	bf28      	it	cs
 800599a:	4613      	movcs	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	69b9      	ldr	r1, [r7, #24]
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff fe4b 	bl	800563e <_WriteNoCheck>
    break;
 80059a8:	e009      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff fde8 	bl	8005584 <_WriteBlocking>
 80059b4:	61f8      	str	r0, [r7, #28]
    break;
 80059b6:	e002      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
    break;
 80059bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80059be:	69fb      	ldr	r3, [r7, #28]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20012ee8 	.word	0x20012ee8

080059cc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <SEGGER_RTT_WriteDownBuffer+0x1e>
 80059e6:	f7ff fd73 	bl	80054d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80059ea:	f3ef 8311 	mrs	r3, BASEPRI
 80059ee:	f04f 0120 	mov.w	r1, #32
 80059f2:	f381 8811 	msr	BASEPRI, r1
 80059f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff95 	bl	800592c <SEGGER_RTT_WriteDownBufferNoLock>
 8005a02:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a0a:	697b      	ldr	r3, [r7, #20]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20012ee8 	.word	0x20012ee8

08005a18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a26:	4b3d      	ldr	r3, [pc, #244]	; (8005b1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005a34:	f7ff fd4c 	bl	80054d0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a38:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3c:	f04f 0120 	mov.w	r1, #32
 8005a40:	f381 8811 	msr	BASEPRI, r1
 8005a44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a46:	4b35      	ldr	r3, [pc, #212]	; (8005b1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a4e:	6939      	ldr	r1, [r7, #16]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	dbeb      	blt.n	8005a4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a76:	e000      	b.n	8005a7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	da3f      	bge.n	8005b04 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a84:	6939      	ldr	r1, [r7, #16]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a98:	6939      	ldr	r1, [r7, #16]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005aae:	6939      	ldr	r1, [r7, #16]
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	3320      	adds	r3, #32
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ac2:	6939      	ldr	r1, [r7, #16]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	3328      	adds	r3, #40	; 0x28
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3324      	adds	r3, #36	; 0x24
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	332c      	adds	r3, #44	; 0x2c
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005afe:	f3bf 8f5f 	dmb	sy
 8005b02:	e002      	b.n	8005b0a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b08:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b10:	69fb      	ldr	r3, [r7, #28]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20012ee8 	.word	0x20012ee8

08005b20 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005b2e:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b3c:	f7ff fcc8 	bl	80054d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b42:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d82c      	bhi.n	8005ba4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b4e:	f04f 0120 	mov.w	r1, #32
 8005b52:	f381 8811 	msr	BASEPRI, r1
 8005b56:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	3360      	adds	r3, #96	; 0x60
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b94:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba2:	e002      	b.n	8005baa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	; 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20012ee8 	.word	0x20012ee8

08005bb8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00f      	beq.n	8005bee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005bce:	e002      	b.n	8005bd6 <_EncodeStr+0x1e>
      Len++;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4413      	add	r3, r2
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f6      	bne.n	8005bd0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d901      	bls.n	8005bee <_EncodeStr+0x36>
      Len = Limit;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2bfe      	cmp	r3, #254	; 0xfe
 8005bf2:	d806      	bhi.n	8005c02 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	60fa      	str	r2, [r7, #12]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	e011      	b.n	8005c26 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	60fa      	str	r2, [r7, #12]
 8005c08:	22ff      	movs	r2, #255	; 0xff
 8005c0a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	60fa      	str	r2, [r7, #12]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	0a19      	lsrs	r1, r3, #8
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	60fa      	str	r2, [r7, #12]
 8005c22:	b2ca      	uxtb	r2, r1
 8005c24:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c2a:	e00a      	b.n	8005c42 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	1c53      	adds	r3, r2, #1
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1c59      	adds	r1, r3, #1
 8005c36:	60f9      	str	r1, [r7, #12]
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	701a      	strb	r2, [r3, #0]
    n++;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d3f0      	bcc.n	8005c2c <_EncodeStr+0x74>
  }
  return pPayload;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3307      	adds	r3, #7
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c76:	4b35      	ldr	r3, [pc, #212]	; (8005d4c <_HandleIncomingPacket+0xdc>)
 8005c78:	7e1b      	ldrb	r3, [r3, #24]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	1cfb      	adds	r3, r7, #3
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7ff fdcd 	bl	8005820 <SEGGER_RTT_ReadNoLock>
 8005c86:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d052      	beq.n	8005d34 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d031      	beq.n	8005cf8 <_HandleIncomingPacket+0x88>
 8005c94:	2b80      	cmp	r3, #128	; 0x80
 8005c96:	dc40      	bgt.n	8005d1a <_HandleIncomingPacket+0xaa>
 8005c98:	2b07      	cmp	r3, #7
 8005c9a:	dc15      	bgt.n	8005cc8 <_HandleIncomingPacket+0x58>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dd3c      	ble.n	8005d1a <_HandleIncomingPacket+0xaa>
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d839      	bhi.n	8005d1a <_HandleIncomingPacket+0xaa>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <_HandleIncomingPacket+0x3c>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005ccf 	.word	0x08005ccf
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdb 	.word	0x08005cdb
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce7 	.word	0x08005ce7
 8005cc0:	08005ced 	.word	0x08005ced
 8005cc4:	08005cf3 	.word	0x08005cf3
 8005cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cca:	d035      	beq.n	8005d38 <_HandleIncomingPacket+0xc8>
 8005ccc:	e025      	b.n	8005d1a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cce:	f000 ffcd 	bl	8006c6c <SEGGER_SYSVIEW_Start>
      break;
 8005cd2:	e036      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005cd4:	f001 f886 	bl	8006de4 <SEGGER_SYSVIEW_Stop>
      break;
 8005cd8:	e033      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005cda:	f001 fa5f 	bl	800719c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cde:	e030      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ce0:	f001 fa24 	bl	800712c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ce4:	e02d      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ce6:	f001 f8a3 	bl	8006e30 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cea:	e02a      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cec:	f001 fc92 	bl	8007614 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cf0:	e027      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cf2:	f001 fc71 	bl	80075d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005cf6:	e024      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <_HandleIncomingPacket+0xdc>)
 8005cfa:	7e1b      	ldrb	r3, [r3, #24]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	1cfb      	adds	r3, r7, #3
 8005d00:	2201      	movs	r2, #1
 8005d02:	4619      	mov	r1, r3
 8005d04:	f7ff fd8c 	bl	8005820 <SEGGER_RTT_ReadNoLock>
 8005d08:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d015      	beq.n	8005d3c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fbe0 	bl	80074d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d18:	e010      	b.n	8005d3c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	b25b      	sxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da0e      	bge.n	8005d40 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d22:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <_HandleIncomingPacket+0xdc>)
 8005d24:	7e1b      	ldrb	r3, [r3, #24]
 8005d26:	4618      	mov	r0, r3
 8005d28:	1cfb      	adds	r3, r7, #3
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f7ff fd77 	bl	8005820 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d32:	e005      	b.n	8005d40 <_HandleIncomingPacket+0xd0>
    }
  }
 8005d34:	bf00      	nop
 8005d36:	e004      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
      break;
 8005d38:	bf00      	nop
 8005d3a:	e002      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
      break;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <_HandleIncomingPacket+0xd2>
      break;
 8005d40:	bf00      	nop
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200143a8 	.word	0x200143a8

08005d50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d56:	2301      	movs	r3, #1
 8005d58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d64:	4b32      	ldr	r3, [pc, #200]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d6a:	e00b      	b.n	8005d84 <_TrySendOverflowPacket+0x34>
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	1c59      	adds	r1, r3, #1
 8005d74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	09db      	lsrs	r3, r3, #7
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b7f      	cmp	r3, #127	; 0x7f
 8005d88:	d8f0      	bhi.n	8005d6c <_TrySendOverflowPacket+0x1c>
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d9a:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <_TrySendOverflowPacket+0xe4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005da0:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	e00b      	b.n	8005dcc <_TrySendOverflowPacket+0x7c>
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	6279      	str	r1, [r7, #36]	; 0x24
 8005dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d8f0      	bhi.n	8005db4 <_TrySendOverflowPacket+0x64>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005de2:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	4618      	mov	r0, r3
 8005de8:	1d3b      	adds	r3, r7, #4
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	f7fa f9ec 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005dfc:	f7ff fade 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e06:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e0c:	4b08      	ldr	r3, [pc, #32]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e004      	b.n	8005e24 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <_TrySendOverflowPacket+0xe0>)
 8005e22:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e24:	693b      	ldr	r3, [r7, #16]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3730      	adds	r7, #48	; 0x30
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	200143a8 	.word	0x200143a8
 8005e34:	e0001004 	.word	0xe0001004

08005e38 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	; 0x28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e44:	4b96      	ldr	r3, [pc, #600]	; (80060a0 <_SendPacket+0x268>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d010      	beq.n	8005e6e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e4c:	4b94      	ldr	r3, [pc, #592]	; (80060a0 <_SendPacket+0x268>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8130 	beq.w	80060b6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e56:	4b92      	ldr	r3, [pc, #584]	; (80060a0 <_SendPacket+0x268>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d109      	bne.n	8005e72 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e5e:	f7ff ff77 	bl	8005d50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e62:	4b8f      	ldr	r3, [pc, #572]	; (80060a0 <_SendPacket+0x268>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	f040 8127 	bne.w	80060ba <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005e6c:	e001      	b.n	8005e72 <_SendPacket+0x3a>
    goto Send;
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <_SendPacket+0x3c>
Send:
 8005e72:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b1f      	cmp	r3, #31
 8005e78:	d809      	bhi.n	8005e8e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e7a:	4b89      	ldr	r3, [pc, #548]	; (80060a0 <_SendPacket+0x268>)
 8005e7c:	69da      	ldr	r2, [r3, #28]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 8118 	bne.w	80060be <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b17      	cmp	r3, #23
 8005e92:	d807      	bhi.n	8005ea4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e0c4      	b.n	800602e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb0:	d912      	bls.n	8005ed8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	09da      	lsrs	r2, r3, #7
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	60fa      	str	r2, [r7, #12]
 8005ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e006      	b.n	8005ee6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b7e      	cmp	r3, #126	; 0x7e
 8005eea:	d807      	bhi.n	8005efc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e098      	b.n	800602e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f02:	d212      	bcs.n	8005f2a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	09da      	lsrs	r2, r3, #7
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	3a01      	subs	r2, #1
 8005f1c:	60fa      	str	r2, [r7, #12]
 8005f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e081      	b.n	800602e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f30:	d21d      	bcs.n	8005f6e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0b9a      	lsrs	r2, r3, #14
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	09db      	lsrs	r3, r3, #7
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	3a01      	subs	r2, #1
 8005f4c:	60fa      	str	r2, [r7, #12]
 8005f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	3a01      	subs	r2, #1
 8005f60:	60fa      	str	r2, [r7, #12]
 8005f62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	e05f      	b.n	800602e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f74:	d228      	bcs.n	8005fc8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	0d5a      	lsrs	r2, r3, #21
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0b9b      	lsrs	r3, r3, #14
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	3a01      	subs	r2, #1
 8005f90:	60fa      	str	r2, [r7, #12]
 8005f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	09db      	lsrs	r3, r3, #7
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	60fa      	str	r2, [r7, #12]
 8005fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	3a01      	subs	r2, #1
 8005fba:	60fa      	str	r2, [r7, #12]
 8005fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e032      	b.n	800602e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	0f1a      	lsrs	r2, r3, #28
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	0d5b      	lsrs	r3, r3, #21
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	3a01      	subs	r2, #1
 8005fe2:	60fa      	str	r2, [r7, #12]
 8005fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0b9b      	lsrs	r3, r3, #14
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	3a01      	subs	r2, #1
 8005ff8:	60fa      	str	r2, [r7, #12]
 8005ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	09db      	lsrs	r3, r3, #7
 8006008:	b2db      	uxtb	r3, r3
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	3a01      	subs	r2, #1
 800600e:	60fa      	str	r2, [r7, #12]
 8006010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	3a01      	subs	r2, #1
 8006022:	60fa      	str	r2, [r7, #12]
 8006024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <_SendPacket+0x26c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006034:	4b1a      	ldr	r3, [pc, #104]	; (80060a0 <_SendPacket+0x268>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	e00b      	b.n	8006060 <_SendPacket+0x228>
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	6279      	str	r1, [r7, #36]	; 0x24
 8006052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	09db      	lsrs	r3, r3, #7
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	2b7f      	cmp	r3, #127	; 0x7f
 8006064:	d8f0      	bhi.n	8006048 <_SendPacket+0x210>
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	627a      	str	r2, [r7, #36]	; 0x24
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <_SendPacket+0x268>)
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	4618      	mov	r0, r3
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	461a      	mov	r2, r3
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	f7fa f8a3 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800608a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800608c:	f7ff f996 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006096:	4a02      	ldr	r2, [pc, #8]	; (80060a0 <_SendPacket+0x268>)
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	60d3      	str	r3, [r2, #12]
 800609c:	e010      	b.n	80060c0 <_SendPacket+0x288>
 800609e:	bf00      	nop
 80060a0:	200143a8 	.word	0x200143a8
 80060a4:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80060a8:	4b19      	ldr	r3, [pc, #100]	; (8006110 <_SendPacket+0x2d8>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	4b17      	ldr	r3, [pc, #92]	; (8006110 <_SendPacket+0x2d8>)
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	e004      	b.n	80060c0 <_SendPacket+0x288>
    goto SendDone;
 80060b6:	bf00      	nop
 80060b8:	e002      	b.n	80060c0 <_SendPacket+0x288>
      goto SendDone;
 80060ba:	bf00      	nop
 80060bc:	e000      	b.n	80060c0 <_SendPacket+0x288>
      goto SendDone;
 80060be:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80060c0:	4b13      	ldr	r3, [pc, #76]	; (8006110 <_SendPacket+0x2d8>)
 80060c2:	7e1b      	ldrb	r3, [r3, #24]
 80060c4:	4619      	mov	r1, r3
 80060c6:	4a13      	ldr	r2, [pc, #76]	; (8006114 <_SendPacket+0x2dc>)
 80060c8:	460b      	mov	r3, r1
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	440b      	add	r3, r1
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4413      	add	r3, r2
 80060d2:	336c      	adds	r3, #108	; 0x6c
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <_SendPacket+0x2d8>)
 80060d8:	7e1b      	ldrb	r3, [r3, #24]
 80060da:	4618      	mov	r0, r3
 80060dc:	490d      	ldr	r1, [pc, #52]	; (8006114 <_SendPacket+0x2dc>)
 80060de:	4603      	mov	r3, r0
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4403      	add	r3, r0
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	440b      	add	r3, r1
 80060e8:	3370      	adds	r3, #112	; 0x70
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d00b      	beq.n	8006108 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <_SendPacket+0x2d8>)
 80060f2:	789b      	ldrb	r3, [r3, #2]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80060f8:	4b05      	ldr	r3, [pc, #20]	; (8006110 <_SendPacket+0x2d8>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80060fe:	f7ff fdb7 	bl	8005c70 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006102:	4b03      	ldr	r3, [pc, #12]	; (8006110 <_SendPacket+0x2d8>)
 8006104:	2200      	movs	r2, #0
 8006106:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006108:	bf00      	nop
 800610a:	3728      	adds	r7, #40	; 0x28
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	200143a8 	.word	0x200143a8
 8006114:	20012ee8 	.word	0x20012ee8

08006118 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	; 0x28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	3301      	adds	r3, #1
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d80a      	bhi.n	8006148 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	1c59      	adds	r1, r3, #1
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6051      	str	r1, [r2, #4]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d15a      	bne.n	8006206 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	623b      	str	r3, [r7, #32]
 8006170:	e00b      	b.n	800618a <_StoreChar+0x72>
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	1c59      	adds	r1, r3, #1
 800617a:	6279      	str	r1, [r7, #36]	; 0x24
 800617c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	09db      	lsrs	r3, r3, #7
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	2b7f      	cmp	r3, #127	; 0x7f
 800618e:	d8f0      	bhi.n	8006172 <_StoreChar+0x5a>
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	627a      	str	r2, [r7, #36]	; 0x24
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	e00b      	b.n	80061c2 <_StoreChar+0xaa>
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	1c59      	adds	r1, r3, #1
 80061b2:	61f9      	str	r1, [r7, #28]
 80061b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	09db      	lsrs	r3, r3, #7
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b7f      	cmp	r3, #127	; 0x7f
 80061c6:	d8f0      	bhi.n	80061aa <_StoreChar+0x92>
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	61fa      	str	r2, [r7, #28]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	221a      	movs	r2, #26
 80061de:	6939      	ldr	r1, [r7, #16]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fe29 	bl	8005e38 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fd34 	bl	8005c58 <_PreparePacket>
 80061f0:	4602      	mov	r2, r0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	611a      	str	r2, [r3, #16]
  }
}
 8006206:	bf00      	nop
 8006208:	3728      	adds	r7, #40	; 0x28
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	; 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006222:	2301      	movs	r3, #1
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006226:	2301      	movs	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800622a:	e007      	b.n	800623c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	623b      	str	r3, [r7, #32]
    Width++;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d2f3      	bcs.n	800622c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	429a      	cmp	r2, r3
 800624a:	d901      	bls.n	8006250 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11f      	bne.n	800629a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01c      	beq.n	800629a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <_PrintUnsigned+0x66>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <_PrintUnsigned+0x66>
        c = '0';
 8006270:	2330      	movs	r3, #48	; 0x30
 8006272:	76fb      	strb	r3, [r7, #27]
 8006274:	e001      	b.n	800627a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006276:	2320      	movs	r3, #32
 8006278:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800627a:	e007      	b.n	800628c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	3b01      	subs	r3, #1
 8006280:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006282:	7efb      	ldrb	r3, [r7, #27]
 8006284:	4619      	mov	r1, r3
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff ff46 	bl	8006118 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <_PrintUnsigned+0x8a>
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	429a      	cmp	r2, r3
 8006298:	d3f0      	bcc.n	800627c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d903      	bls.n	80062a8 <_PrintUnsigned+0x98>
      NumDigits--;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	e009      	b.n	80062bc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d200      	bcs.n	80062bc <_PrintUnsigned+0xac>
        break;
 80062ba:	e005      	b.n	80062c8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80062c6:	e7e8      	b.n	800629a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <_PrintUnsigned+0x128>)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	4619      	mov	r1, r3
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f7ff ff14 	bl	8006118 <_StoreChar>
    Digit /= Base;
 80062f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e3      	bne.n	80062c8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d011      	beq.n	800632e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00e      	beq.n	800632e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006310:	e006      	b.n	8006320 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	3b01      	subs	r3, #1
 8006316:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006318:	2120      	movs	r1, #32
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fefc 	bl	8006118 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <_PrintUnsigned+0x11e>
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	429a      	cmp	r2, r3
 800632c:	d3f1      	bcc.n	8006312 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800632e:	bf00      	nop
 8006330:	3728      	adds	r7, #40	; 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	08007a40 	.word	0x08007a40

0800633c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	bfb8      	it	lt
 8006350:	425b      	neglt	r3, r3
 8006352:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006354:	2301      	movs	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006358:	e007      	b.n	800636a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006362:	613b      	str	r3, [r7, #16]
    Width++;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	3301      	adds	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	429a      	cmp	r2, r3
 8006370:	daf3      	bge.n	800635a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	429a      	cmp	r2, r3
 8006378:	d901      	bls.n	800637e <_PrintInt+0x42>
    Width = NumDigits;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <_PrintInt+0x5e>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	db04      	blt.n	8006394 <_PrintInt+0x58>
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <_PrintInt+0x5e>
    FieldWidth--;
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	3b01      	subs	r3, #1
 8006398:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <_PrintInt+0x6e>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d016      	beq.n	80063d8 <_PrintInt+0x9c>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d111      	bne.n	80063d8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00e      	beq.n	80063d8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063ba:	e006      	b.n	80063ca <_PrintInt+0x8e>
        FieldWidth--;
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	3b01      	subs	r3, #1
 80063c0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80063c2:	2120      	movs	r1, #32
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff fea7 	bl	8006118 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <_PrintInt+0x9c>
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d3f1      	bcc.n	80063bc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da07      	bge.n	80063ee <_PrintInt+0xb2>
    v = -v;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	425b      	negs	r3, r3
 80063e2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80063e4:	212d      	movs	r1, #45	; 0x2d
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff fe96 	bl	8006118 <_StoreChar>
 80063ec:	e008      	b.n	8006400 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80063f8:	212b      	movs	r1, #43	; 0x2b
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff fe8c 	bl	8006118 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d019      	beq.n	800643e <_PrintInt+0x102>
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d114      	bne.n	800643e <_PrintInt+0x102>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d111      	bne.n	800643e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00e      	beq.n	800643e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006420:	e006      	b.n	8006430 <_PrintInt+0xf4>
        FieldWidth--;
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	3b01      	subs	r3, #1
 8006426:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006428:	2130      	movs	r1, #48	; 0x30
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff fe74 	bl	8006118 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <_PrintInt+0x102>
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	429a      	cmp	r2, r3
 800643c:	d3f1      	bcc.n	8006422 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	9301      	str	r3, [sp, #4]
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff fedf 	bl	8006210 <_PrintUnsigned>
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b098      	sub	sp, #96	; 0x60
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006468:	f3ef 8311 	mrs	r3, BASEPRI
 800646c:	f04f 0120 	mov.w	r1, #32
 8006470:	f381 8811 	msr	BASEPRI, r1
 8006474:	633b      	str	r3, [r7, #48]	; 0x30
 8006476:	48b7      	ldr	r0, [pc, #732]	; (8006754 <_VPrintTarget+0x2f8>)
 8006478:	f7ff fbee 	bl	8005c58 <_PreparePacket>
 800647c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800647e:	4bb5      	ldr	r3, [pc, #724]	; (8006754 <_VPrintTarget+0x2f8>)
 8006480:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006482:	2300      	movs	r3, #0
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	3301      	adds	r3, #1
 800648e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80064a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8183 	beq.w	80067b2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80064ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b0:	2b25      	cmp	r3, #37	; 0x25
 80064b2:	f040 8170 	bne.w	8006796 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80064b6:	2300      	movs	r3, #0
 80064b8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80064ba:	2301      	movs	r3, #1
 80064bc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80064c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ca:	3b23      	subs	r3, #35	; 0x23
 80064cc:	2b0d      	cmp	r3, #13
 80064ce:	d83f      	bhi.n	8006550 <_VPrintTarget+0xf4>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <_VPrintTarget+0x7c>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	08006541 	.word	0x08006541
 80064dc:	08006551 	.word	0x08006551
 80064e0:	08006551 	.word	0x08006551
 80064e4:	08006551 	.word	0x08006551
 80064e8:	08006551 	.word	0x08006551
 80064ec:	08006551 	.word	0x08006551
 80064f0:	08006551 	.word	0x08006551
 80064f4:	08006551 	.word	0x08006551
 80064f8:	08006531 	.word	0x08006531
 80064fc:	08006551 	.word	0x08006551
 8006500:	08006511 	.word	0x08006511
 8006504:	08006551 	.word	0x08006551
 8006508:	08006551 	.word	0x08006551
 800650c:	08006521 	.word	0x08006521
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	64bb      	str	r3, [r7, #72]	; 0x48
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	e01a      	b.n	8006556 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	64bb      	str	r3, [r7, #72]	; 0x48
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e012      	b.n	8006556 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	64bb      	str	r3, [r7, #72]	; 0x48
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	e00a      	b.n	8006556 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006542:	f043 0308 	orr.w	r3, r3, #8
 8006546:	64bb      	str	r3, [r7, #72]	; 0x48
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	e002      	b.n	8006556 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006550:	2300      	movs	r3, #0
 8006552:	653b      	str	r3, [r7, #80]	; 0x50
 8006554:	bf00      	nop
        }
      } while (v);
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1b0      	bne.n	80064be <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800655c:	2300      	movs	r3, #0
 800655e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800656c:	2b2f      	cmp	r3, #47	; 0x2f
 800656e:	d912      	bls.n	8006596 <_VPrintTarget+0x13a>
 8006570:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006574:	2b39      	cmp	r3, #57	; 0x39
 8006576:	d80e      	bhi.n	8006596 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800657e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	461a      	mov	r2, r3
 800658a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800658e:	4413      	add	r3, r2
 8006590:	3b30      	subs	r3, #48	; 0x30
 8006592:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006594:	e7e4      	b.n	8006560 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006596:	2300      	movs	r3, #0
 8006598:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80065a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065a6:	2b2e      	cmp	r3, #46	; 0x2e
 80065a8:	d11d      	bne.n	80065e6 <_VPrintTarget+0x18a>
        sFormat++;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80065b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065bc:	2b2f      	cmp	r3, #47	; 0x2f
 80065be:	d912      	bls.n	80065e6 <_VPrintTarget+0x18a>
 80065c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065c4:	2b39      	cmp	r3, #57	; 0x39
 80065c6:	d80e      	bhi.n	80065e6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80065ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	461a      	mov	r2, r3
 80065da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065de:	4413      	add	r3, r2
 80065e0:	3b30      	subs	r3, #48	; 0x30
 80065e2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80065e4:	e7e4      	b.n	80065b0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80065ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065f2:	2b6c      	cmp	r3, #108	; 0x6c
 80065f4:	d003      	beq.n	80065fe <_VPrintTarget+0x1a2>
 80065f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065fa:	2b68      	cmp	r3, #104	; 0x68
 80065fc:	d107      	bne.n	800660e <_VPrintTarget+0x1b2>
          c = *sFormat;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800660c:	e7ef      	b.n	80065ee <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800660e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006612:	2b25      	cmp	r3, #37	; 0x25
 8006614:	f000 80b3 	beq.w	800677e <_VPrintTarget+0x322>
 8006618:	2b25      	cmp	r3, #37	; 0x25
 800661a:	f2c0 80b7 	blt.w	800678c <_VPrintTarget+0x330>
 800661e:	2b78      	cmp	r3, #120	; 0x78
 8006620:	f300 80b4 	bgt.w	800678c <_VPrintTarget+0x330>
 8006624:	2b58      	cmp	r3, #88	; 0x58
 8006626:	f2c0 80b1 	blt.w	800678c <_VPrintTarget+0x330>
 800662a:	3b58      	subs	r3, #88	; 0x58
 800662c:	2b20      	cmp	r3, #32
 800662e:	f200 80ad 	bhi.w	800678c <_VPrintTarget+0x330>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <_VPrintTarget+0x1dc>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	0800672f 	.word	0x0800672f
 800663c:	0800678d 	.word	0x0800678d
 8006640:	0800678d 	.word	0x0800678d
 8006644:	0800678d 	.word	0x0800678d
 8006648:	0800678d 	.word	0x0800678d
 800664c:	0800678d 	.word	0x0800678d
 8006650:	0800678d 	.word	0x0800678d
 8006654:	0800678d 	.word	0x0800678d
 8006658:	0800678d 	.word	0x0800678d
 800665c:	0800678d 	.word	0x0800678d
 8006660:	0800678d 	.word	0x0800678d
 8006664:	080066bd 	.word	0x080066bd
 8006668:	080066e3 	.word	0x080066e3
 800666c:	0800678d 	.word	0x0800678d
 8006670:	0800678d 	.word	0x0800678d
 8006674:	0800678d 	.word	0x0800678d
 8006678:	0800678d 	.word	0x0800678d
 800667c:	0800678d 	.word	0x0800678d
 8006680:	0800678d 	.word	0x0800678d
 8006684:	0800678d 	.word	0x0800678d
 8006688:	0800678d 	.word	0x0800678d
 800668c:	0800678d 	.word	0x0800678d
 8006690:	0800678d 	.word	0x0800678d
 8006694:	0800678d 	.word	0x0800678d
 8006698:	08006759 	.word	0x08006759
 800669c:	0800678d 	.word	0x0800678d
 80066a0:	0800678d 	.word	0x0800678d
 80066a4:	0800678d 	.word	0x0800678d
 80066a8:	0800678d 	.word	0x0800678d
 80066ac:	08006709 	.word	0x08006709
 80066b0:	0800678d 	.word	0x0800678d
 80066b4:	0800678d 	.word	0x0800678d
 80066b8:	0800672f 	.word	0x0800672f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	1d19      	adds	r1, r3, #4
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6011      	str	r1, [r2, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80066ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80066d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fd1c 	bl	8006118 <_StoreChar>
        break;
 80066e0:	e055      	b.n	800678e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	1d19      	adds	r1, r3, #4
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6011      	str	r1, [r2, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80066f0:	f107 0014 	add.w	r0, r7, #20
 80066f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	220a      	movs	r2, #10
 8006700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006702:	f7ff fe1b 	bl	800633c <_PrintInt>
        break;
 8006706:	e042      	b.n	800678e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	1d19      	adds	r1, r3, #4
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6011      	str	r1, [r2, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006718:	f107 0014 	add.w	r0, r7, #20
 800671c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006726:	220a      	movs	r2, #10
 8006728:	f7ff fd72 	bl	8006210 <_PrintUnsigned>
        break;
 800672c:	e02f      	b.n	800678e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1d19      	adds	r1, r3, #4
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6011      	str	r1, [r2, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800673c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800673e:	f107 0014 	add.w	r0, r7, #20
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	2210      	movs	r2, #16
 800674e:	f7ff fd5f 	bl	8006210 <_PrintUnsigned>
        break;
 8006752:	e01c      	b.n	800678e <_VPrintTarget+0x332>
 8006754:	200143d8 	.word	0x200143d8
      case 'p':
        v = va_arg(*pParamList, int);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	1d19      	adds	r1, r3, #4
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006766:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006768:	f107 0014 	add.w	r0, r7, #20
 800676c:	2300      	movs	r3, #0
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	2308      	movs	r3, #8
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	2308      	movs	r3, #8
 8006776:	2210      	movs	r2, #16
 8006778:	f7ff fd4a 	bl	8006210 <_PrintUnsigned>
        break;
 800677c:	e007      	b.n	800678e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800677e:	f107 0314 	add.w	r3, r7, #20
 8006782:	2125      	movs	r1, #37	; 0x25
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fcc7 	bl	8006118 <_StoreChar>
        break;
 800678a:	e000      	b.n	800678e <_VPrintTarget+0x332>
      default:
        break;
 800678c:	bf00      	nop
      }
      sFormat++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e007      	b.n	80067a6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006796:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800679a:	f107 0314 	add.w	r3, r7, #20
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fcb9 	bl	8006118 <_StoreChar>
    }
  } while (*sFormat);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f47f ae72 	bne.w	8006494 <_VPrintTarget+0x38>
 80067b0:	e000      	b.n	80067b4 <_VPrintTarget+0x358>
      break;
 80067b2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d041      	beq.n	800683e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80067ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	643b      	str	r3, [r7, #64]	; 0x40
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ca:	e00b      	b.n	80067e4 <_VPrintTarget+0x388>
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	6439      	str	r1, [r7, #64]	; 0x40
 80067d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e0:	09db      	lsrs	r3, r3, #7
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e6:	2b7f      	cmp	r3, #127	; 0x7f
 80067e8:	d8f0      	bhi.n	80067cc <_VPrintTarget+0x370>
 80067ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	643a      	str	r2, [r7, #64]	; 0x40
 80067f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80067fe:	2300      	movs	r3, #0
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	e00b      	b.n	800681c <_VPrintTarget+0x3c0>
 8006804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006806:	b2da      	uxtb	r2, r3
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	1c59      	adds	r1, r3, #1
 800680c:	63b9      	str	r1, [r7, #56]	; 0x38
 800680e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	09db      	lsrs	r3, r3, #7
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
 800681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681e:	2b7f      	cmp	r3, #127	; 0x7f
 8006820:	d8f0      	bhi.n	8006804 <_VPrintTarget+0x3a8>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	63ba      	str	r2, [r7, #56]	; 0x38
 8006828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	221a      	movs	r2, #26
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fafd 	bl	8005e38 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006844:	bf00      	nop
 8006846:	3758      	adds	r7, #88	; 0x58
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800685a:	2300      	movs	r3, #0
 800685c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006860:	4917      	ldr	r1, [pc, #92]	; (80068c0 <SEGGER_SYSVIEW_Init+0x74>)
 8006862:	4818      	ldr	r0, [pc, #96]	; (80068c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006864:	f7ff f8d8 	bl	8005a18 <SEGGER_RTT_AllocUpBuffer>
 8006868:	4603      	mov	r3, r0
 800686a:	b2da      	uxtb	r2, r3
 800686c:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800686e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006870:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006872:	785a      	ldrb	r2, [r3, #1]
 8006874:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006876:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006878:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800687a:	7e1b      	ldrb	r3, [r3, #24]
 800687c:	4618      	mov	r0, r3
 800687e:	2300      	movs	r3, #0
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	2308      	movs	r3, #8
 8006884:	4a11      	ldr	r2, [pc, #68]	; (80068cc <SEGGER_SYSVIEW_Init+0x80>)
 8006886:	490f      	ldr	r1, [pc, #60]	; (80068c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006888:	f7ff f94a 	bl	8005b20 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800688c:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800688e:	2200      	movs	r2, #0
 8006890:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <SEGGER_SYSVIEW_Init+0x84>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a0c      	ldr	r2, [pc, #48]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006898:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800689a:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80068a0:	4a09      	ldr	r2, [pc, #36]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80068a6:	4a08      	ldr	r2, [pc, #32]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80068ac:	4a06      	ldr	r2, [pc, #24]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	200133a0 	.word	0x200133a0
 80068c4:	080079f4 	.word	0x080079f4
 80068c8:	200143a8 	.word	0x200143a8
 80068cc:	200143a0 	.word	0x200143a0
 80068d0:	e0001004 	.word	0xe0001004

080068d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80068dc:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6113      	str	r3, [r2, #16]
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	200143a8 	.word	0x200143a8

080068f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006900:	f04f 0120 	mov.w	r1, #32
 8006904:	f381 8811 	msr	BASEPRI, r1
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	4808      	ldr	r0, [pc, #32]	; (800692c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800690c:	f7ff f9a4 	bl	8005c58 <_PreparePacket>
 8006910:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	68b8      	ldr	r0, [r7, #8]
 8006918:	f7ff fa8e 	bl	8005e38 <_SendPacket>
  RECORD_END();
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f383 8811 	msr	BASEPRI, r3
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200143d8 	.word	0x200143d8

08006930 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800693a:	f3ef 8311 	mrs	r3, BASEPRI
 800693e:	f04f 0120 	mov.w	r1, #32
 8006942:	f381 8811 	msr	BASEPRI, r1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	4816      	ldr	r0, [pc, #88]	; (80069a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800694a:	f7ff f985 	bl	8005c58 <_PreparePacket>
 800694e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	61bb      	str	r3, [r7, #24]
 800695c:	e00b      	b.n	8006976 <SEGGER_SYSVIEW_RecordU32+0x46>
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1c59      	adds	r1, r3, #1
 8006966:	61f9      	str	r1, [r7, #28]
 8006968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	09db      	lsrs	r3, r3, #7
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b7f      	cmp	r3, #127	; 0x7f
 800697a:	d8f0      	bhi.n	800695e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	61fa      	str	r2, [r7, #28]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	6938      	ldr	r0, [r7, #16]
 8006992:	f7ff fa51 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f383 8811 	msr	BASEPRI, r3
}
 800699c:	bf00      	nop
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	200143d8 	.word	0x200143d8

080069a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08c      	sub	sp, #48	; 0x30
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069b4:	f3ef 8311 	mrs	r3, BASEPRI
 80069b8:	f04f 0120 	mov.w	r1, #32
 80069bc:	f381 8811 	msr	BASEPRI, r1
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	4825      	ldr	r0, [pc, #148]	; (8006a58 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80069c4:	f7ff f948 	bl	8005c58 <_PreparePacket>
 80069c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d6:	e00b      	b.n	80069f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	1c59      	adds	r1, r3, #1
 80069e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	09db      	lsrs	r3, r3, #7
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	2b7f      	cmp	r3, #127	; 0x7f
 80069f4:	d8f0      	bhi.n	80069d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	e00b      	b.n	8006a28 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	1c59      	adds	r1, r3, #1
 8006a18:	6279      	str	r1, [r7, #36]	; 0x24
 8006a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	09db      	lsrs	r3, r3, #7
 8006a26:	623b      	str	r3, [r7, #32]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2c:	d8f0      	bhi.n	8006a10 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	627a      	str	r2, [r7, #36]	; 0x24
 8006a34:	6a3a      	ldr	r2, [r7, #32]
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	6979      	ldr	r1, [r7, #20]
 8006a42:	69b8      	ldr	r0, [r7, #24]
 8006a44:	f7ff f9f8 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	f383 8811 	msr	BASEPRI, r3
}
 8006a4e:	bf00      	nop
 8006a50:	3730      	adds	r7, #48	; 0x30
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200143d8 	.word	0x200143d8

08006a5c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08e      	sub	sp, #56	; 0x38
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a6e:	f04f 0120 	mov.w	r1, #32
 8006a72:	f381 8811 	msr	BASEPRI, r1
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	4832      	ldr	r0, [pc, #200]	; (8006b44 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006a7a:	f7ff f8ed 	bl	8005c58 <_PreparePacket>
 8006a7e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a8c:	e00b      	b.n	8006aa6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	1c59      	adds	r1, r3, #1
 8006a96:	6379      	str	r1, [r7, #52]	; 0x34
 8006a98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	09db      	lsrs	r3, r3, #7
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aaa:	d8f0      	bhi.n	8006a8e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	637a      	str	r2, [r7, #52]	; 0x34
 8006ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac4:	e00b      	b.n	8006ade <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	1c59      	adds	r1, r3, #1
 8006ace:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	09db      	lsrs	r3, r3, #7
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae2:	d8f0      	bhi.n	8006ac6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	e00b      	b.n	8006b16 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	1c59      	adds	r1, r3, #1
 8006b06:	6279      	str	r1, [r7, #36]	; 0x24
 8006b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	09db      	lsrs	r3, r3, #7
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1a:	d8f0      	bhi.n	8006afe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	627a      	str	r2, [r7, #36]	; 0x24
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	6979      	ldr	r1, [r7, #20]
 8006b30:	69b8      	ldr	r0, [r7, #24]
 8006b32:	f7ff f981 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	f383 8811 	msr	BASEPRI, r3
}
 8006b3c:	bf00      	nop
 8006b3e:	3738      	adds	r7, #56	; 0x38
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200143d8 	.word	0x200143d8

08006b48 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b090      	sub	sp, #64	; 0x40
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b56:	f3ef 8311 	mrs	r3, BASEPRI
 8006b5a:	f04f 0120 	mov.w	r1, #32
 8006b5e:	f381 8811 	msr	BASEPRI, r1
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	4840      	ldr	r0, [pc, #256]	; (8006c68 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006b66:	f7ff f877 	bl	8005c58 <_PreparePacket>
 8006b6a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b78:	e00b      	b.n	8006b92 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b80:	1c59      	adds	r1, r3, #1
 8006b82:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	09db      	lsrs	r3, r3, #7
 8006b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	2b7f      	cmp	r3, #127	; 0x7f
 8006b96:	d8f0      	bhi.n	8006b7a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb0:	e00b      	b.n	8006bca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	6379      	str	r1, [r7, #52]	; 0x34
 8006bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	09db      	lsrs	r3, r3, #7
 8006bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bce:	d8f0      	bhi.n	8006bb2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	637a      	str	r2, [r7, #52]	; 0x34
 8006bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	e00b      	b.n	8006c02 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	09db      	lsrs	r3, r3, #7
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d8f0      	bhi.n	8006bea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	e00b      	b.n	8006c3a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	1c59      	adds	r1, r3, #1
 8006c2a:	6279      	str	r1, [r7, #36]	; 0x24
 8006c2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	09db      	lsrs	r3, r3, #7
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3e:	d8f0      	bhi.n	8006c22 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	627a      	str	r2, [r7, #36]	; 0x24
 8006c46:	6a3a      	ldr	r2, [r7, #32]
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	69b8      	ldr	r0, [r7, #24]
 8006c56:	f7ff f8ef 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f383 8811 	msr	BASEPRI, r3
}
 8006c60:	bf00      	nop
 8006c62:	3740      	adds	r7, #64	; 0x40
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	200143d8 	.word	0x200143d8

08006c6c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08c      	sub	sp, #48	; 0x30
 8006c70:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006c72:	4b59      	ldr	r3, [pc, #356]	; (8006dd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006c78:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7c:	f04f 0120 	mov.w	r1, #32
 8006c80:	f381 8811 	msr	BASEPRI, r1
 8006c84:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006c86:	4b54      	ldr	r3, [pc, #336]	; (8006dd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	220a      	movs	r2, #10
 8006c8c:	4953      	ldr	r1, [pc, #332]	; (8006ddc <SEGGER_SYSVIEW_Start+0x170>)
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7f9 fa9e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006c9a:	f7fe fb8f 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006c9e:	200a      	movs	r0, #10
 8006ca0:	f7ff fe28 	bl	80068f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca8:	f04f 0120 	mov.w	r1, #32
 8006cac:	f381 8811 	msr	BASEPRI, r1
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	484b      	ldr	r0, [pc, #300]	; (8006de0 <SEGGER_SYSVIEW_Start+0x174>)
 8006cb4:	f7fe ffd0 	bl	8005c58 <_PreparePacket>
 8006cb8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc2:	4b45      	ldr	r3, [pc, #276]	; (8006dd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc8:	e00b      	b.n	8006ce2 <SEGGER_SYSVIEW_Start+0x76>
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	1c59      	adds	r1, r3, #1
 8006cd2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	09db      	lsrs	r3, r3, #7
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce6:	d8f0      	bhi.n	8006cca <SEGGER_SYSVIEW_Start+0x5e>
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfc:	4b36      	ldr	r3, [pc, #216]	; (8006dd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	e00b      	b.n	8006d1c <SEGGER_SYSVIEW_Start+0xb0>
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	1c59      	adds	r1, r3, #1
 8006d0c:	6279      	str	r1, [r7, #36]	; 0x24
 8006d0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	09db      	lsrs	r3, r3, #7
 8006d1a:	623b      	str	r3, [r7, #32]
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d20:	d8f0      	bhi.n	8006d04 <SEGGER_SYSVIEW_Start+0x98>
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	627a      	str	r2, [r7, #36]	; 0x24
 8006d28:	6a3a      	ldr	r2, [r7, #32]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	e00b      	b.n	8006d56 <SEGGER_SYSVIEW_Start+0xea>
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	61f9      	str	r1, [r7, #28]
 8006d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	09db      	lsrs	r3, r3, #7
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5a:	d8f0      	bhi.n	8006d3e <SEGGER_SYSVIEW_Start+0xd2>
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	e00b      	b.n	8006d8e <SEGGER_SYSVIEW_Start+0x122>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	1c59      	adds	r1, r3, #1
 8006d7e:	6179      	str	r1, [r7, #20]
 8006d80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	09db      	lsrs	r3, r3, #7
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b7f      	cmp	r3, #127	; 0x7f
 8006d92:	d8f0      	bhi.n	8006d76 <SEGGER_SYSVIEW_Start+0x10a>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	617a      	str	r2, [r7, #20]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006da4:	2218      	movs	r2, #24
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff f845 	bl	8005e38 <_SendPacket>
      RECORD_END();
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006db4:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006dc2:	f000 f9eb 	bl	800719c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006dc6:	f000 f9b1 	bl	800712c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006dca:	f000 fc23 	bl	8007614 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006dce:	bf00      	nop
 8006dd0:	3730      	adds	r7, #48	; 0x30
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200143a8 	.word	0x200143a8
 8006ddc:	08007a34 	.word	0x08007a34
 8006de0:	200143d8 	.word	0x200143d8

08006de4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dea:	f3ef 8311 	mrs	r3, BASEPRI
 8006dee:	f04f 0120 	mov.w	r1, #32
 8006df2:	f381 8811 	msr	BASEPRI, r1
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	480b      	ldr	r0, [pc, #44]	; (8006e28 <SEGGER_SYSVIEW_Stop+0x44>)
 8006dfa:	f7fe ff2d 	bl	8005c58 <_PreparePacket>
 8006dfe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <SEGGER_SYSVIEW_Stop+0x48>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006e08:	220b      	movs	r2, #11
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6838      	ldr	r0, [r7, #0]
 8006e0e:	f7ff f813 	bl	8005e38 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <SEGGER_SYSVIEW_Stop+0x48>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f383 8811 	msr	BASEPRI, r3
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	200143d8 	.word	0x200143d8
 8006e2c:	200143a8 	.word	0x200143a8

08006e30 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08c      	sub	sp, #48	; 0x30
 8006e34:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e36:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3a:	f04f 0120 	mov.w	r1, #32
 8006e3e:	f381 8811 	msr	BASEPRI, r1
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	4845      	ldr	r0, [pc, #276]	; (8006f5c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006e46:	f7fe ff07 	bl	8005c58 <_PreparePacket>
 8006e4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e54:	4b42      	ldr	r3, [pc, #264]	; (8006f60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e5a:	e00b      	b.n	8006e74 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	09db      	lsrs	r3, r3, #7
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2b7f      	cmp	r3, #127	; 0x7f
 8006e78:	d8f0      	bhi.n	8006e5c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8e:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	623b      	str	r3, [r7, #32]
 8006e94:	e00b      	b.n	8006eae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	1c59      	adds	r1, r3, #1
 8006e9e:	6279      	str	r1, [r7, #36]	; 0x24
 8006ea0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	09db      	lsrs	r3, r3, #7
 8006eac:	623b      	str	r3, [r7, #32]
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb2:	d8f0      	bhi.n	8006e96 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	627a      	str	r2, [r7, #36]	; 0x24
 8006eba:	6a3a      	ldr	r2, [r7, #32]
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	4b25      	ldr	r3, [pc, #148]	; (8006f60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e00b      	b.n	8006ee8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	1c59      	adds	r1, r3, #1
 8006ed8:	61f9      	str	r1, [r7, #28]
 8006eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	09db      	lsrs	r3, r3, #7
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b7f      	cmp	r3, #127	; 0x7f
 8006eec:	d8f0      	bhi.n	8006ed0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	61fa      	str	r2, [r7, #28]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e00b      	b.n	8006f20 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	1c59      	adds	r1, r3, #1
 8006f10:	6179      	str	r1, [r7, #20]
 8006f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	09db      	lsrs	r3, r3, #7
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b7f      	cmp	r3, #127	; 0x7f
 8006f24:	d8f0      	bhi.n	8006f08 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	617a      	str	r2, [r7, #20]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f36:	2218      	movs	r2, #24
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f7fe ff7c 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f46:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006f4e:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	4798      	blx	r3
  }
}
 8006f54:	bf00      	nop
 8006f56:	3730      	adds	r7, #48	; 0x30
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	200143d8 	.word	0x200143d8
 8006f60:	200143a8 	.word	0x200143a8

08006f64 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b092      	sub	sp, #72	; 0x48
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f70:	f04f 0120 	mov.w	r1, #32
 8006f74:	f381 8811 	msr	BASEPRI, r1
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	486a      	ldr	r0, [pc, #424]	; (8007124 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006f7c:	f7fe fe6c 	bl	8005c58 <_PreparePacket>
 8006f80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b66      	ldr	r3, [pc, #408]	; (8007128 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	643b      	str	r3, [r7, #64]	; 0x40
 8006f96:	e00b      	b.n	8006fb0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9e:	1c59      	adds	r1, r3, #1
 8006fa0:	6479      	str	r1, [r7, #68]	; 0x44
 8006fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fac:	09db      	lsrs	r3, r3, #7
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb4:	d8f0      	bhi.n	8006f98 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	647a      	str	r2, [r7, #68]	; 0x44
 8006fbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fd0:	e00b      	b.n	8006fea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	1c59      	adds	r1, r3, #1
 8006fda:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	09db      	lsrs	r3, r3, #7
 8006fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	2b7f      	cmp	r3, #127	; 0x7f
 8006fee:	d8f0      	bhi.n	8006fd2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	4619      	mov	r1, r3
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7fe fdd5 	bl	8005bb8 <_EncodeStr>
 800700e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007010:	2209      	movs	r2, #9
 8007012:	68f9      	ldr	r1, [r7, #12]
 8007014:	6938      	ldr	r0, [r7, #16]
 8007016:	f7fe ff0f 	bl	8005e38 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b40      	ldr	r3, [pc, #256]	; (8007128 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	633b      	str	r3, [r7, #48]	; 0x30
 800702e:	e00b      	b.n	8007048 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	b2da      	uxtb	r2, r3
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	1c59      	adds	r1, r3, #1
 8007038:	6379      	str	r1, [r7, #52]	; 0x34
 800703a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	09db      	lsrs	r3, r3, #7
 8007046:	633b      	str	r3, [r7, #48]	; 0x30
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	2b7f      	cmp	r3, #127	; 0x7f
 800704c:	d8f0      	bhi.n	8007030 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	637a      	str	r2, [r7, #52]	; 0x34
 8007054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
 8007068:	e00b      	b.n	8007082 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	b2da      	uxtb	r2, r3
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	1c59      	adds	r1, r3, #1
 8007072:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	09db      	lsrs	r3, r3, #7
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	2b7f      	cmp	r3, #127	; 0x7f
 8007086:	d8f0      	bhi.n	800706a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800708e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	623b      	str	r3, [r7, #32]
 80070a2:	e00b      	b.n	80070bc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	6279      	str	r1, [r7, #36]	; 0x24
 80070ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	09db      	lsrs	r3, r3, #7
 80070ba:	623b      	str	r3, [r7, #32]
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	2b7f      	cmp	r3, #127	; 0x7f
 80070c0:	d8f0      	bhi.n	80070a4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	627a      	str	r2, [r7, #36]	; 0x24
 80070c8:	6a3a      	ldr	r2, [r7, #32]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	2300      	movs	r3, #0
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e00b      	b.n	80070f4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	61f9      	str	r1, [r7, #28]
 80070e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	09db      	lsrs	r3, r3, #7
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b7f      	cmp	r3, #127	; 0x7f
 80070f8:	d8f0      	bhi.n	80070dc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	61fa      	str	r2, [r7, #28]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800710a:	2215      	movs	r2, #21
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	6938      	ldr	r0, [r7, #16]
 8007110:	f7fe fe92 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f383 8811 	msr	BASEPRI, r3
}
 800711a:	bf00      	nop
 800711c:	3748      	adds	r7, #72	; 0x48
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200143d8 	.word	0x200143d8
 8007128:	200143a8 	.word	0x200143a8

0800712c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d008      	beq.n	800714a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007142:	4b03      	ldr	r3, [pc, #12]	; (8007150 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4798      	blx	r3
  }
}
 800714a:	bf00      	nop
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200143a8 	.word	0x200143a8

08007154 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800715c:	f3ef 8311 	mrs	r3, BASEPRI
 8007160:	f04f 0120 	mov.w	r1, #32
 8007164:	f381 8811 	msr	BASEPRI, r1
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	480b      	ldr	r0, [pc, #44]	; (8007198 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800716c:	f7fe fd74 	bl	8005c58 <_PreparePacket>
 8007170:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007172:	2280      	movs	r2, #128	; 0x80
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	6938      	ldr	r0, [r7, #16]
 8007178:	f7fe fd1e 	bl	8005bb8 <_EncodeStr>
 800717c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800717e:	220e      	movs	r2, #14
 8007180:	68f9      	ldr	r1, [r7, #12]
 8007182:	6938      	ldr	r0, [r7, #16]
 8007184:	f7fe fe58 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bf00      	nop
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	200143d8 	.word	0x200143d8

0800719c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80071a2:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01a      	beq.n	80071e0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d015      	beq.n	80071e0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4798      	blx	r3
 80071bc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80071c0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80071c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	000a      	movs	r2, r1
 80071d0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80071d2:	4613      	mov	r3, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4621      	mov	r1, r4
 80071d8:	200d      	movs	r0, #13
 80071da:	f7ff fbe5 	bl	80069a8 <SEGGER_SYSVIEW_RecordU32x2>
 80071de:	e006      	b.n	80071ee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4619      	mov	r1, r3
 80071e6:	200c      	movs	r0, #12
 80071e8:	f7ff fba2 	bl	8006930 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd90      	pop	{r4, r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200143a8 	.word	0x200143a8
 80071fc:	e0001004 	.word	0xe0001004

08007200 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007206:	f3ef 8311 	mrs	r3, BASEPRI
 800720a:	f04f 0120 	mov.w	r1, #32
 800720e:	f381 8811 	msr	BASEPRI, r1
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	4819      	ldr	r0, [pc, #100]	; (800727c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007216:	f7fe fd1f 	bl	8005c58 <_PreparePacket>
 800721a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007228:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	e00b      	b.n	800724c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	6179      	str	r1, [r7, #20]
 800723e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	09db      	lsrs	r3, r3, #7
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b7f      	cmp	r3, #127	; 0x7f
 8007250:	d8f0      	bhi.n	8007234 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	617a      	str	r2, [r7, #20]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007262:	2202      	movs	r2, #2
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	68b8      	ldr	r0, [r7, #8]
 8007268:	f7fe fde6 	bl	8005e38 <_SendPacket>
  RECORD_END();
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f383 8811 	msr	BASEPRI, r3
}
 8007272:	bf00      	nop
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	200143d8 	.word	0x200143d8
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800728a:	f3ef 8311 	mrs	r3, BASEPRI
 800728e:	f04f 0120 	mov.w	r1, #32
 8007292:	f381 8811 	msr	BASEPRI, r1
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	4807      	ldr	r0, [pc, #28]	; (80072b8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800729a:	f7fe fcdd 	bl	8005c58 <_PreparePacket>
 800729e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80072a0:	2203      	movs	r2, #3
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6838      	ldr	r0, [r7, #0]
 80072a6:	f7fe fdc7 	bl	8005e38 <_SendPacket>
  RECORD_END();
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f383 8811 	msr	BASEPRI, r3
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200143d8 	.word	0x200143d8

080072bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80072c2:	f3ef 8311 	mrs	r3, BASEPRI
 80072c6:	f04f 0120 	mov.w	r1, #32
 80072ca:	f381 8811 	msr	BASEPRI, r1
 80072ce:	607b      	str	r3, [r7, #4]
 80072d0:	4807      	ldr	r0, [pc, #28]	; (80072f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80072d2:	f7fe fcc1 	bl	8005c58 <_PreparePacket>
 80072d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80072d8:	2212      	movs	r2, #18
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6838      	ldr	r0, [r7, #0]
 80072de:	f7fe fdab 	bl	8005e38 <_SendPacket>
  RECORD_END();
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f383 8811 	msr	BASEPRI, r3
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	200143d8 	.word	0x200143d8

080072f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80072fa:	f3ef 8311 	mrs	r3, BASEPRI
 80072fe:	f04f 0120 	mov.w	r1, #32
 8007302:	f381 8811 	msr	BASEPRI, r1
 8007306:	607b      	str	r3, [r7, #4]
 8007308:	4807      	ldr	r0, [pc, #28]	; (8007328 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800730a:	f7fe fca5 	bl	8005c58 <_PreparePacket>
 800730e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007310:	2211      	movs	r2, #17
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6838      	ldr	r0, [r7, #0]
 8007316:	f7fe fd8f 	bl	8005e38 <_SendPacket>
  RECORD_END();
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f383 8811 	msr	BASEPRI, r3
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	200143d8 	.word	0x200143d8

0800732c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007334:	f3ef 8311 	mrs	r3, BASEPRI
 8007338:	f04f 0120 	mov.w	r1, #32
 800733c:	f381 8811 	msr	BASEPRI, r1
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	4819      	ldr	r0, [pc, #100]	; (80073a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007344:	f7fe fc88 	bl	8005c58 <_PreparePacket>
 8007348:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800734e:	4b17      	ldr	r3, [pc, #92]	; (80073ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	61bb      	str	r3, [r7, #24]
 8007360:	e00b      	b.n	800737a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	1c59      	adds	r1, r3, #1
 800736a:	61f9      	str	r1, [r7, #28]
 800736c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	09db      	lsrs	r3, r3, #7
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b7f      	cmp	r3, #127	; 0x7f
 800737e:	d8f0      	bhi.n	8007362 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	61fa      	str	r2, [r7, #28]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007390:	2208      	movs	r2, #8
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	6938      	ldr	r0, [r7, #16]
 8007396:	f7fe fd4f 	bl	8005e38 <_SendPacket>
  RECORD_END();
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f383 8811 	msr	BASEPRI, r3
}
 80073a0:	bf00      	nop
 80073a2:	3720      	adds	r7, #32
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	200143d8 	.word	0x200143d8
 80073ac:	200143a8 	.word	0x200143a8

080073b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073b8:	f3ef 8311 	mrs	r3, BASEPRI
 80073bc:	f04f 0120 	mov.w	r1, #32
 80073c0:	f381 8811 	msr	BASEPRI, r1
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	4819      	ldr	r0, [pc, #100]	; (800742c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80073c8:	f7fe fc46 	bl	8005c58 <_PreparePacket>
 80073cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	e00b      	b.n	80073fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	1c59      	adds	r1, r3, #1
 80073ee:	61f9      	str	r1, [r7, #28]
 80073f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	09db      	lsrs	r3, r3, #7
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b7f      	cmp	r3, #127	; 0x7f
 8007402:	d8f0      	bhi.n	80073e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	61fa      	str	r2, [r7, #28]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007414:	2204      	movs	r2, #4
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	6938      	ldr	r0, [r7, #16]
 800741a:	f7fe fd0d 	bl	8005e38 <_SendPacket>
  RECORD_END();
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f383 8811 	msr	BASEPRI, r3
}
 8007424:	bf00      	nop
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200143d8 	.word	0x200143d8
 8007430:	200143a8 	.word	0x200143a8

08007434 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800743c:	f3ef 8311 	mrs	r3, BASEPRI
 8007440:	f04f 0120 	mov.w	r1, #32
 8007444:	f381 8811 	msr	BASEPRI, r1
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	4819      	ldr	r0, [pc, #100]	; (80074b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800744c:	f7fe fc04 	bl	8005c58 <_PreparePacket>
 8007450:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007456:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	e00b      	b.n	8007482 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	b2da      	uxtb	r2, r3
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	1c59      	adds	r1, r3, #1
 8007472:	61f9      	str	r1, [r7, #28]
 8007474:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	09db      	lsrs	r3, r3, #7
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b7f      	cmp	r3, #127	; 0x7f
 8007486:	d8f0      	bhi.n	800746a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	61fa      	str	r2, [r7, #28]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007498:	2206      	movs	r2, #6
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	6938      	ldr	r0, [r7, #16]
 800749e:	f7fe fccb 	bl	8005e38 <_SendPacket>
  RECORD_END();
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f383 8811 	msr	BASEPRI, r3
}
 80074a8:	bf00      	nop
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	200143d8 	.word	0x200143d8
 80074b4:	200143a8 	.word	0x200143a8

080074b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80074c0:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	1ad3      	subs	r3, r2, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	200143a8 	.word	0x200143a8

080074d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	; 0x30
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80074e2:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d06d      	beq.n	80075c6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80074ea:	4b39      	ldr	r3, [pc, #228]	; (80075d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80074f0:	2300      	movs	r3, #0
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f4:	e008      	b.n	8007508 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	3301      	adds	r3, #1
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800750c:	429a      	cmp	r2, r3
 800750e:	d3f2      	bcc.n	80074f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007510:	e000      	b.n	8007514 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007512:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d055      	beq.n	80075c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800751a:	f3ef 8311 	mrs	r3, BASEPRI
 800751e:	f04f 0120 	mov.w	r1, #32
 8007522:	f381 8811 	msr	BASEPRI, r1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	482a      	ldr	r0, [pc, #168]	; (80075d4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800752a:	f7fe fb95 	bl	8005c58 <_PreparePacket>
 800752e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	623b      	str	r3, [r7, #32]
 800753c:	e00b      	b.n	8007556 <SEGGER_SYSVIEW_SendModule+0x7e>
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	b2da      	uxtb	r2, r3
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	1c59      	adds	r1, r3, #1
 8007546:	6279      	str	r1, [r7, #36]	; 0x24
 8007548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	09db      	lsrs	r3, r3, #7
 8007554:	623b      	str	r3, [r7, #32]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2b7f      	cmp	r3, #127	; 0x7f
 800755a:	d8f0      	bhi.n	800753e <SEGGER_SYSVIEW_SendModule+0x66>
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	627a      	str	r2, [r7, #36]	; 0x24
 8007562:	6a3a      	ldr	r2, [r7, #32]
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	e00b      	b.n	8007590 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	b2da      	uxtb	r2, r3
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	1c59      	adds	r1, r3, #1
 8007580:	61f9      	str	r1, [r7, #28]
 8007582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	09db      	lsrs	r3, r3, #7
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	2b7f      	cmp	r3, #127	; 0x7f
 8007594:	d8f0      	bhi.n	8007578 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	61fa      	str	r2, [r7, #28]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2280      	movs	r2, #128	; 0x80
 80075ac:	4619      	mov	r1, r3
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7fe fb02 	bl	8005bb8 <_EncodeStr>
 80075b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80075b6:	2216      	movs	r2, #22
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	6938      	ldr	r0, [r7, #16]
 80075bc:	f7fe fc3c 	bl	8005e38 <_SendPacket>
      RECORD_END();
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80075c6:	bf00      	nop
 80075c8:	3730      	adds	r7, #48	; 0x30
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200143d0 	.word	0x200143d0
 80075d4:	200143d8 	.word	0x200143d8

080075d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80075de:	4b0c      	ldr	r3, [pc, #48]	; (8007610 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00f      	beq.n	8007606 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80075e6:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f2      	bne.n	80075ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200143d0 	.word	0x200143d0

08007614 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800761a:	f3ef 8311 	mrs	r3, BASEPRI
 800761e:	f04f 0120 	mov.w	r1, #32
 8007622:	f381 8811 	msr	BASEPRI, r1
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	4817      	ldr	r0, [pc, #92]	; (8007688 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800762a:	f7fe fb15 	bl	8005c58 <_PreparePacket>
 800762e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	4b14      	ldr	r3, [pc, #80]	; (800768c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	613b      	str	r3, [r7, #16]
 800763e:	e00b      	b.n	8007658 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	6179      	str	r1, [r7, #20]
 800764a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	09db      	lsrs	r3, r3, #7
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b7f      	cmp	r3, #127	; 0x7f
 800765c:	d8f0      	bhi.n	8007640 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	617a      	str	r2, [r7, #20]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800766e:	221b      	movs	r2, #27
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	68b8      	ldr	r0, [r7, #8]
 8007674:	f7fe fbe0 	bl	8005e38 <_SendPacket>
  RECORD_END();
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f383 8811 	msr	BASEPRI, r3
}
 800767e:	bf00      	nop
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	200143d8 	.word	0x200143d8
 800768c:	200143d4 	.word	0x200143d4

08007690 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007690:	b40f      	push	{r0, r1, r2, r3}
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007698:	f107 0314 	add.w	r3, r7, #20
 800769c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	461a      	mov	r2, r3
 80076a2:	2100      	movs	r1, #0
 80076a4:	6938      	ldr	r0, [r7, #16]
 80076a6:	f7fe fed9 	bl	800645c <_VPrintTarget>
  va_end(ParamList);
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b4:	b004      	add	sp, #16
 80076b6:	4770      	bx	lr

080076b8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80076c0:	f3ef 8311 	mrs	r3, BASEPRI
 80076c4:	f04f 0120 	mov.w	r1, #32
 80076c8:	f381 8811 	msr	BASEPRI, r1
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	4827      	ldr	r0, [pc, #156]	; (800776c <SEGGER_SYSVIEW_Warn+0xb4>)
 80076d0:	f7fe fac2 	bl	8005c58 <_PreparePacket>
 80076d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80076d6:	2280      	movs	r2, #128	; 0x80
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	6938      	ldr	r0, [r7, #16]
 80076dc:	f7fe fa6c 	bl	8005bb8 <_EncodeStr>
 80076e0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
 80076e6:	2301      	movs	r3, #1
 80076e8:	623b      	str	r3, [r7, #32]
 80076ea:	e00b      	b.n	8007704 <SEGGER_SYSVIEW_Warn+0x4c>
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	1c59      	adds	r1, r3, #1
 80076f4:	6279      	str	r1, [r7, #36]	; 0x24
 80076f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	09db      	lsrs	r3, r3, #7
 8007702:	623b      	str	r3, [r7, #32]
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	2b7f      	cmp	r3, #127	; 0x7f
 8007708:	d8f0      	bhi.n	80076ec <SEGGER_SYSVIEW_Warn+0x34>
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	627a      	str	r2, [r7, #36]	; 0x24
 8007710:	6a3a      	ldr	r2, [r7, #32]
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	2300      	movs	r3, #0
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	e00b      	b.n	800773c <SEGGER_SYSVIEW_Warn+0x84>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	1c59      	adds	r1, r3, #1
 800772c:	61f9      	str	r1, [r7, #28]
 800772e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	09db      	lsrs	r3, r3, #7
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b7f      	cmp	r3, #127	; 0x7f
 8007740:	d8f0      	bhi.n	8007724 <SEGGER_SYSVIEW_Warn+0x6c>
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	61fa      	str	r2, [r7, #28]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007752:	221a      	movs	r2, #26
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	6938      	ldr	r0, [r7, #16]
 8007758:	f7fe fb6e 	bl	8005e38 <_SendPacket>
  RECORD_END();
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f383 8811 	msr	BASEPRI, r3
}
 8007762:	bf00      	nop
 8007764:	3728      	adds	r7, #40	; 0x28
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	200143d8 	.word	0x200143d8

08007770 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007774:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007776:	7e1b      	ldrb	r3, [r3, #24]
 8007778:	4619      	mov	r1, r3
 800777a:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800777c:	460b      	mov	r3, r1
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	440b      	add	r3, r1
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	4413      	add	r3, r2
 8007786:	336c      	adds	r3, #108	; 0x6c
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800778c:	7e1b      	ldrb	r3, [r3, #24]
 800778e:	4618      	mov	r0, r3
 8007790:	490d      	ldr	r1, [pc, #52]	; (80077c8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007792:	4603      	mov	r3, r0
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4403      	add	r3, r0
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	440b      	add	r3, r1
 800779c:	3370      	adds	r3, #112	; 0x70
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d00b      	beq.n	80077bc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80077a6:	789b      	ldrb	r3, [r3, #2]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d107      	bne.n	80077bc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80077b2:	f7fe fa5d 	bl	8005c70 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80077b6:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80077bc:	4b01      	ldr	r3, [pc, #4]	; (80077c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80077be:	781b      	ldrb	r3, [r3, #0]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200143a8 	.word	0x200143a8
 80077c8:	20012ee8 	.word	0x20012ee8

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4d0d      	ldr	r5, [pc, #52]	; (8007804 <__libc_init_array+0x38>)
 80077d0:	4c0d      	ldr	r4, [pc, #52]	; (8007808 <__libc_init_array+0x3c>)
 80077d2:	1b64      	subs	r4, r4, r5
 80077d4:	10a4      	asrs	r4, r4, #2
 80077d6:	2600      	movs	r6, #0
 80077d8:	42a6      	cmp	r6, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	4d0b      	ldr	r5, [pc, #44]	; (800780c <__libc_init_array+0x40>)
 80077de:	4c0c      	ldr	r4, [pc, #48]	; (8007810 <__libc_init_array+0x44>)
 80077e0:	f000 f83e 	bl	8007860 <_init>
 80077e4:	1b64      	subs	r4, r4, r5
 80077e6:	10a4      	asrs	r4, r4, #2
 80077e8:	2600      	movs	r6, #0
 80077ea:	42a6      	cmp	r6, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f4:	4798      	blx	r3
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fe:	4798      	blx	r3
 8007800:	3601      	adds	r6, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	08007a58 	.word	0x08007a58
 8007808:	08007a58 	.word	0x08007a58
 800780c:	08007a58 	.word	0x08007a58
 8007810:	08007a5c 	.word	0x08007a5c

08007814 <memcmp>:
 8007814:	b510      	push	{r4, lr}
 8007816:	3901      	subs	r1, #1
 8007818:	4402      	add	r2, r0
 800781a:	4290      	cmp	r0, r2
 800781c:	d101      	bne.n	8007822 <memcmp+0xe>
 800781e:	2000      	movs	r0, #0
 8007820:	e005      	b.n	800782e <memcmp+0x1a>
 8007822:	7803      	ldrb	r3, [r0, #0]
 8007824:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007828:	42a3      	cmp	r3, r4
 800782a:	d001      	beq.n	8007830 <memcmp+0x1c>
 800782c:	1b18      	subs	r0, r3, r4
 800782e:	bd10      	pop	{r4, pc}
 8007830:	3001      	adds	r0, #1
 8007832:	e7f2      	b.n	800781a <memcmp+0x6>

08007834 <memcpy>:
 8007834:	440a      	add	r2, r1
 8007836:	4291      	cmp	r1, r2
 8007838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800783c:	d100      	bne.n	8007840 <memcpy+0xc>
 800783e:	4770      	bx	lr
 8007840:	b510      	push	{r4, lr}
 8007842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800784a:	4291      	cmp	r1, r2
 800784c:	d1f9      	bne.n	8007842 <memcpy+0xe>
 800784e:	bd10      	pop	{r4, pc}

08007850 <memset>:
 8007850:	4402      	add	r2, r0
 8007852:	4603      	mov	r3, r0
 8007854:	4293      	cmp	r3, r2
 8007856:	d100      	bne.n	800785a <memset+0xa>
 8007858:	4770      	bx	lr
 800785a:	f803 1b01 	strb.w	r1, [r3], #1
 800785e:	e7f9      	b.n	8007854 <memset+0x4>

08007860 <_init>:
 8007860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007862:	bf00      	nop
 8007864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007866:	bc08      	pop	{r3}
 8007868:	469e      	mov	lr, r3
 800786a:	4770      	bx	lr

0800786c <_fini>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	bf00      	nop
 8007870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007872:	bc08      	pop	{r3}
 8007874:	469e      	mov	lr, r3
 8007876:	4770      	bx	lr
