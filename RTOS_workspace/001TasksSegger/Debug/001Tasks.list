
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eec  08004eec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef4  08004ef4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e20  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e98  20012e98  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f60d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271b  00000000  00000000  0002f6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00031dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  00032d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cd4  00000000  00000000  00033b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010af3  00000000  00000000  000567fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3415  00000000  00000000  000672ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a704  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045b8  00000000  00000000  0013a754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e00 	.word	0x08004e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004e00 	.word	0x08004e00

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fbcd 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f845 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8ad 	bl	8000640 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200,"Hello world from Task-1",2,&task1_handle);
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2302      	movs	r3, #2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x80>)
 80004f2:	22c8      	movs	r2, #200	; 0xc8
 80004f4:	4918      	ldr	r1, [pc, #96]	; (8000558 <main+0x84>)
 80004f6:	4819      	ldr	r0, [pc, #100]	; (800055c <main+0x88>)
 80004f8:	f002 f97e 	bl	80027f8 <xTaskCreate>
 80004fc:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00a      	beq.n	800051a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000508:	f383 8811 	msr	BASEPRI, r3
 800050c:	f3bf 8f6f 	isb	sy
 8000510:	f3bf 8f4f 	dsb	sy
 8000514:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000516:	bf00      	nop
 8000518:	e7fe      	b.n	8000518 <main+0x44>
  status = xTaskCreate(task2_handler, "Task-2", 200,"Hello world from Task-2",2,&task2_handle);
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2302      	movs	r3, #2
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <main+0x8c>)
 8000524:	22c8      	movs	r2, #200	; 0xc8
 8000526:	490f      	ldr	r1, [pc, #60]	; (8000564 <main+0x90>)
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <main+0x94>)
 800052a:	f002 f965 	bl	80027f8 <xTaskCreate>
 800052e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d00a      	beq.n	800054c <main+0x78>
        __asm volatile
 8000536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053a:	f383 8811 	msr	BASEPRI, r3
 800053e:	f3bf 8f6f 	isb	sy
 8000542:	f3bf 8f4f 	dsb	sy
 8000546:	60fb      	str	r3, [r7, #12]
    }
 8000548:	bf00      	nop
 800054a:	e7fe      	b.n	800054a <main+0x76>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 800054c:	f002 fabe 	bl	8002acc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x7c>
 8000552:	bf00      	nop
 8000554:	08004e18 	.word	0x08004e18
 8000558:	08004e30 	.word	0x08004e30
 800055c:	080008fd 	.word	0x080008fd
 8000560:	08004e38 	.word	0x08004e38
 8000564:	08004e50 	.word	0x08004e50
 8000568:	0800090d 	.word	0x0800090d

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 ff2c 	bl	80043d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005e0:	2332      	movs	r3, #50	; 0x32
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fe1b 	bl	800122c <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f9a0 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f87c 	bl	800171c <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800062a:	f000 f989 	bl	8000940 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4ba2      	ldr	r3, [pc, #648]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4aa1      	ldr	r2, [pc, #644]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000660:	f043 0310 	orr.w	r3, r3, #16
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b9f      	ldr	r3, [pc, #636]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0310 	and.w	r3, r3, #16
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	4b9b      	ldr	r3, [pc, #620]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a9a      	ldr	r2, [pc, #616]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b98      	ldr	r3, [pc, #608]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b94      	ldr	r3, [pc, #592]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a93      	ldr	r2, [pc, #588]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b91      	ldr	r3, [pc, #580]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a8c      	ldr	r2, [pc, #560]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b86      	ldr	r3, [pc, #536]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a85      	ldr	r2, [pc, #532]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b83      	ldr	r3, [pc, #524]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b7f      	ldr	r3, [pc, #508]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a7e      	ldr	r2, [pc, #504]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b7c      	ldr	r3, [pc, #496]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2108      	movs	r1, #8
 8000702:	4879      	ldr	r0, [pc, #484]	; (80008e8 <MX_GPIO_Init+0x2a8>)
 8000704:	f000 fd78 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2101      	movs	r1, #1
 800070c:	4877      	ldr	r0, [pc, #476]	; (80008ec <MX_GPIO_Init+0x2ac>)
 800070e:	f000 fd73 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000712:	2200      	movs	r2, #0
 8000714:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000718:	4875      	ldr	r0, [pc, #468]	; (80008f0 <MX_GPIO_Init+0x2b0>)
 800071a:	f000 fd6d 	bl	80011f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800071e:	2308      	movs	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	486c      	ldr	r0, [pc, #432]	; (80008e8 <MX_GPIO_Init+0x2a8>)
 8000736:	f000 fbc3 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4866      	ldr	r0, [pc, #408]	; (80008ec <MX_GPIO_Init+0x2ac>)
 8000752:	f000 fbb5 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000766:	2305      	movs	r3, #5
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	485e      	ldr	r0, [pc, #376]	; (80008ec <MX_GPIO_Init+0x2ac>)
 8000772:	f000 fba5 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	2301      	movs	r3, #1
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	485a      	ldr	r0, [pc, #360]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 800078c:	f000 fb98 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000790:	2310      	movs	r3, #16
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a0:	2306      	movs	r3, #6
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4852      	ldr	r0, [pc, #328]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 80007ac:	f000 fb88 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007b0:	23e0      	movs	r3, #224	; 0xe0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007c0:	2305      	movs	r3, #5
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	484a      	ldr	r0, [pc, #296]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 80007cc:	f000 fb78 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007d0:	2304      	movs	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4845      	ldr	r0, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x2b8>)
 80007e4:	f000 fb6c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fa:	2305      	movs	r3, #5
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	483c      	ldr	r0, [pc, #240]	; (80008f8 <MX_GPIO_Init+0x2b8>)
 8000806:	f000 fb5b 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800080a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800080e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4833      	ldr	r0, [pc, #204]	; (80008f0 <MX_GPIO_Init+0x2b0>)
 8000824:	f000 fb4c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000828:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083a:	2306      	movs	r3, #6
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4829      	ldr	r0, [pc, #164]	; (80008ec <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fb3b 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800084a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4825      	ldr	r0, [pc, #148]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 8000860:	f000 fb2e 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000864:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000876:	230a      	movs	r3, #10
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 8000882:	f000 fb1d 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4815      	ldr	r0, [pc, #84]	; (80008f0 <MX_GPIO_Init+0x2b0>)
 800089a:	f000 fb11 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800089e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a4:	2312      	movs	r3, #18
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b0:	2304      	movs	r3, #4
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480f      	ldr	r0, [pc, #60]	; (80008f8 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb00 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0x2a8>)
 80008d6:	f000 faf3 	bl	8000ec0 <HAL_GPIO_Init>

}
 80008da:	bf00      	nop
 80008dc:	3730      	adds	r7, #48	; 0x30
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400

080008fc <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parameters);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f003 fddd 	bl	80044c4 <puts>
 800090a:	e7fb      	b.n	8000904 <task1_handler+0x8>

0800090c <task2_handler>:
		//taskYIELD();
	}
}
static void task2_handler(void *parameters){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parameters);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f003 fdd5 	bl	80044c4 <puts>
 800091a:	e7fb      	b.n	8000914 <task2_handler+0x8>

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f9c5 	bl	8000cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40001000 	.word	0x40001000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <HAL_InitTick+0xe4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <HAL_InitTick+0xe4>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_InitTick+0xe4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 0210 	add.w	r2, r7, #16
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f8ae 	bl	8001b34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e2:	f001 f893 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 80009e6:	6378      	str	r0, [r7, #52]	; 0x34
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ea:	f001 f88f 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 80009ee:	4603      	mov	r3, r0
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <HAL_InitTick+0xe8>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9b      	lsrs	r3, r3, #18
 80009fe:	3b01      	subs	r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_InitTick+0xec>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_InitTick+0xec>)
 8000a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_InitTick+0xec>)
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_InitTick+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_InitTick+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_InitTick+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a28:	4817      	ldr	r0, [pc, #92]	; (8000a88 <HAL_InitTick+0xec>)
 8000a2a:	f001 f8b5 	bl	8001b98 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11b      	bne.n	8000a74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <HAL_InitTick+0xec>)
 8000a3e:	f001 f905 	bl	8001c4c <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a50:	2036      	movs	r0, #54	; 0x36
 8000a52:	f000 fa27 	bl	8000ea4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d808      	bhi.n	8000a6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2036      	movs	r0, #54	; 0x36
 8000a62:	f000 fa03 	bl	8000e6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0xf4>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e002      	b.n	8000a74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3738      	adds	r7, #56	; 0x38
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	20000094 	.word	0x20000094
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM6_DAC_IRQHandler+0x10>)
 8000ac6:	f001 f931 	bl	8001d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000094 	.word	0x20000094

08000ad4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <ITM_SendChar+0x48>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <ITM_SendChar+0x48>)
 8000ae4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ae8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <ITM_SendChar+0x4c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <ITM_SendChar+0x4c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000af6:	bf00      	nop
 8000af8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f8      	beq.n	8000af8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000edfc 	.word	0xe000edfc
 8000b20:	e0000e00 	.word	0xe0000e00

08000b24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b36:	f3af 8000 	nop.w
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
  }

  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ffab 	bl	8000ad4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
  }
  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f003 fb8f 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc3d 	bl	80004d4 <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c68:	08004efc 	.word	0x08004efc
  ldr r2, =_sbss
 8000c6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c70:	20012e98 	.word	0x20012e98

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f8d8 	bl	8000e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fe78 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fe4e 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200000dc 	.word	0x200000dc

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200000dc 	.word	0x200000dc

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff4c 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7e:	f7ff ff61 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	6978      	ldr	r0, [r7, #20]
 8000e8a:	f7ff ffb1 	bl	8000df0 <NVIC_EncodePriority>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff80 	bl	8000d9c <__NVIC_SetPriority>
}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff54 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e16b      	b.n	80011b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f040 815a 	bne.w	80011ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d130      	bne.n	8000f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d017      	beq.n	8000fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	69b9      	ldr	r1, [r7, #24]
 8001000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0203 	and.w	r2, r3, #3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80b4 	beq.w	80011ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b60      	ldr	r3, [pc, #384]	; (80011cc <HAL_GPIO_Init+0x30c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <HAL_GPIO_Init+0x30c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <HAL_GPIO_Init+0x30c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001062:	4a5b      	ldr	r2, [pc, #364]	; (80011d0 <HAL_GPIO_Init+0x310>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_GPIO_Init+0x314>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d02b      	beq.n	80010e6 <HAL_GPIO_Init+0x226>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_GPIO_Init+0x318>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x222>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a50      	ldr	r2, [pc, #320]	; (80011dc <HAL_GPIO_Init+0x31c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x21e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x320>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x21a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <HAL_GPIO_Init+0x324>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x216>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4d      	ldr	r2, [pc, #308]	; (80011e8 <HAL_GPIO_Init+0x328>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x212>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4c      	ldr	r2, [pc, #304]	; (80011ec <HAL_GPIO_Init+0x32c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x20e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4b      	ldr	r2, [pc, #300]	; (80011f0 <HAL_GPIO_Init+0x330>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x20a>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00e      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010ca:	2308      	movs	r3, #8
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010ce:	2306      	movs	r3, #6
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x310>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <HAL_GPIO_Init+0x334>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_GPIO_Init+0x334>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_GPIO_Init+0x334>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f ae90 	bls.w	8000edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40021c00 	.word	0x40021c00
 80011f4:	40013c00 	.word	0x40013c00

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e267      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d075      	beq.n	8001336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_RCC_OscConfig+0x240>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b04      	cmp	r3, #4
 8001254:	d00c      	beq.n	8001270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125e:	2b08      	cmp	r3, #8
 8001260:	d112      	bne.n	8001288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b82      	ldr	r3, [pc, #520]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126e:	d10b      	bne.n	8001288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	4b7e      	ldr	r3, [pc, #504]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d05b      	beq.n	8001334 <HAL_RCC_OscConfig+0x108>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d157      	bne.n	8001334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e242      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001290:	d106      	bne.n	80012a0 <HAL_RCC_OscConfig+0x74>
 8001292:	4b76      	ldr	r3, [pc, #472]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a75      	ldr	r2, [pc, #468]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xb0>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x98>
 80012aa:	4b70      	ldr	r3, [pc, #448]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6f      	ldr	r2, [pc, #444]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6d      	ldr	r3, [pc, #436]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6c      	ldr	r2, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xb0>
 80012c4:	4b69      	ldr	r3, [pc, #420]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a68      	ldr	r2, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b66      	ldr	r3, [pc, #408]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a65      	ldr	r2, [pc, #404]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcfe 	bl	8000ce4 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcfa 	bl	8000ce4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e207      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xc0>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcea 	bl	8000ce4 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fce6 	bl	8000ce4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1f3      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	4b51      	ldr	r3, [pc, #324]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0xe8>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d063      	beq.n	800140a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001356:	2b08      	cmp	r3, #8
 8001358:	d11c      	bne.n	8001394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <HAL_RCC_OscConfig+0x240>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	4b41      	ldr	r3, [pc, #260]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x152>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1c7      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4937      	ldr	r1, [pc, #220]	; (800146c <HAL_RCC_OscConfig+0x240>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	e03a      	b.n	800140a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x244>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff fc9f 	bl	8000ce4 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc9b 	bl	8000ce4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1a8      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4925      	ldr	r1, [pc, #148]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x244>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc7e 	bl	8000ce4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc7a 	bl	8000ce4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e187      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d036      	beq.n	8001484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d016      	beq.n	800144c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x248>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff fc5e 	bl	8000ce4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fc5a 	bl	8000ce4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e167      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x200>
 800144a:	e01b      	b.n	8001484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_OscConfig+0x248>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fc47 	bl	8000ce4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	e00e      	b.n	8001478 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145a:	f7ff fc43 	bl	8000ce4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d907      	bls.n	8001478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e150      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
 800146c:	40023800 	.word	0x40023800
 8001470:	42470000 	.word	0x42470000
 8001474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800147a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ea      	bne.n	800145a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8097 	beq.w	80015c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a7c      	ldr	r2, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b74      	ldr	r3, [pc, #464]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a73      	ldr	r2, [pc, #460]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fc03 	bl	8000ce4 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e2:	f7ff fbff 	bl	8000ce4 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e10c      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x2ea>
 8001508:	4b64      	ldr	r3, [pc, #400]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	e01c      	b.n	8001550 <HAL_RCC_OscConfig+0x324>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x30c>
 800151e:	4b5f      	ldr	r3, [pc, #380]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a5e      	ldr	r2, [pc, #376]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
 800152a:	4b5c      	ldr	r3, [pc, #368]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0x324>
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a57      	ldr	r2, [pc, #348]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	4b55      	ldr	r3, [pc, #340]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a54      	ldr	r2, [pc, #336]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0304 	bic.w	r3, r3, #4
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d015      	beq.n	8001584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fbc4 	bl	8000ce4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fbc0 	bl	8000ce4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0cb      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0ee      	beq.n	8001560 <HAL_RCC_OscConfig+0x334>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fbae 	bl	8000ce4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff fbaa 	bl	8000ce4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e0b5      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ee      	bne.n	800158c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a38      	ldr	r2, [pc, #224]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a1 	beq.w	800170c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d05c      	beq.n	8001690 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d141      	bne.n	8001662 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_RCC_OscConfig+0x478>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb7e 	bl	8000ce4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fb7a 	bl	8000ce4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e087      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69da      	ldr	r2, [r3, #28]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	019b      	lsls	r3, r3, #6
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	3b01      	subs	r3, #1
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	491b      	ldr	r1, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x478>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fb53 	bl	8000ce4 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff fb4f 	bl	8000ce4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e05c      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x416>
 8001660:	e054      	b.n	800170c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_OscConfig+0x478>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fb3c 	bl	8000ce4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fb38 	bl	8000ce4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e045      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x444>
 800168e:	e03d      	b.n	800170c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e038      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000
 80016a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x4ec>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d028      	beq.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d121      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d11a      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d8:	4013      	ands	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d111      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	3b01      	subs	r3, #1
 80016f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0cc      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d90c      	bls.n	8001758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b8      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d044      	beq.n	800183c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d119      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d003      	beq.n	80017da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e067      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4934      	ldr	r1, [pc, #208]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff fa6a 	bl	8000ce4 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff fa66 	bl	8000ce4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e04f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d20c      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e032      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f821 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	5ccb      	ldrb	r3, [r1, r3]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f86a 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00
 80018d8:	40023800 	.word	0x40023800
 80018dc:	08004e70 	.word	0x08004e70
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ec:	b094      	sub	sp, #80	; 0x50
 80018ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018f8:	2300      	movs	r3, #0
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001900:	4b79      	ldr	r3, [pc, #484]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d00d      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x40>
 800190c:	2b08      	cmp	r3, #8
 800190e:	f200 80e1 	bhi.w	8001ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x34>
 8001916:	2b04      	cmp	r3, #4
 8001918:	d003      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x3a>
 800191a:	e0db      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800191c:	4b73      	ldr	r3, [pc, #460]	; (8001aec <HAL_RCC_GetSysClockFreq+0x204>)
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001920:	e0db      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001926:	e0d8      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193e:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	099b      	lsrs	r3, r3, #6
 8001944:	2200      	movs	r2, #0
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
 8001948:	63fa      	str	r2, [r7, #60]	; 0x3c
 800194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
 8001952:	2300      	movs	r3, #0
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
 8001956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800195a:	4622      	mov	r2, r4
 800195c:	462b      	mov	r3, r5
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0159      	lsls	r1, r3, #5
 8001968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196c:	0150      	lsls	r0, r2, #5
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4621      	mov	r1, r4
 8001974:	1a51      	subs	r1, r2, r1
 8001976:	6139      	str	r1, [r7, #16]
 8001978:	4629      	mov	r1, r5
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800198c:	4659      	mov	r1, fp
 800198e:	018b      	lsls	r3, r1, #6
 8001990:	4651      	mov	r1, sl
 8001992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001996:	4651      	mov	r1, sl
 8001998:	018a      	lsls	r2, r1, #6
 800199a:	4651      	mov	r1, sl
 800199c:	ebb2 0801 	subs.w	r8, r2, r1
 80019a0:	4659      	mov	r1, fp
 80019a2:	eb63 0901 	sbc.w	r9, r3, r1
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ba:	4690      	mov	r8, r2
 80019bc:	4699      	mov	r9, r3
 80019be:	4623      	mov	r3, r4
 80019c0:	eb18 0303 	adds.w	r3, r8, r3
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	462b      	mov	r3, r5
 80019c8:	eb49 0303 	adc.w	r3, r9, r3
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019da:	4629      	mov	r1, r5
 80019dc:	024b      	lsls	r3, r1, #9
 80019de:	4621      	mov	r1, r4
 80019e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e4:	4621      	mov	r1, r4
 80019e6:	024a      	lsls	r2, r1, #9
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ee:	2200      	movs	r2, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019f8:	f7fe fbea 	bl	80001d0 <__aeabi_uldivmod>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4613      	mov	r3, r2
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a04:	e058      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	4611      	mov	r1, r2
 8001a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a20:	4642      	mov	r2, r8
 8001a22:	464b      	mov	r3, r9
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	0159      	lsls	r1, r3, #5
 8001a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a32:	0150      	lsls	r0, r2, #5
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4641      	mov	r1, r8
 8001a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a3e:	4649      	mov	r1, r9
 8001a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a58:	ebb2 040a 	subs.w	r4, r2, sl
 8001a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	00eb      	lsls	r3, r5, #3
 8001a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6e:	00e2      	lsls	r2, r4, #3
 8001a70:	4614      	mov	r4, r2
 8001a72:	461d      	mov	r5, r3
 8001a74:	4643      	mov	r3, r8
 8001a76:	18e3      	adds	r3, r4, r3
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	eb45 0303 	adc.w	r3, r5, r3
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8e:	4629      	mov	r1, r5
 8001a90:	028b      	lsls	r3, r1, #10
 8001a92:	4621      	mov	r1, r4
 8001a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a98:	4621      	mov	r1, r4
 8001a9a:	028a      	lsls	r2, r1, #10
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	61fa      	str	r2, [r7, #28]
 8001aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aac:	f7fe fb90 	bl	80001d0 <__aeabi_uldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08004e80 	.word	0x08004e80

08001b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	220f      	movs	r2, #15
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_GetClockConfig+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0207 	and.w	r2, r3, #7
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f839 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f9d8 	bl	8001f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e04e      	b.n	8001d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d022      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d01d      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d018      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00e      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d010      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	e007      	b.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00
 8001d20:	40010400 	.word	0x40010400
 8001d24:	40014000 	.word	0x40014000
 8001d28:	40001800 	.word	0x40001800

08001d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0202 	mvn.w	r2, #2
 8001d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8ee 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8e0 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8f1 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0204 	mvn.w	r2, #4
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c4 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8b6 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8c7 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f89a 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f88c 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f89d 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0210 	mvn.w	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f870 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f862 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f873 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0201 	mvn.w	r2, #1
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fd36 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b80      	cmp	r3, #128	; 0x80
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f902 	bl	80020e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f838 	bl	8001f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0220 	mvn.w	r2, #32
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8cc 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d00f      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d108      	bne.n	8001fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d027      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d023      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d017      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <TIM_Base_SetConfig+0x128>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <TIM_Base_SetConfig+0x12c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <TIM_Base_SetConfig+0x130>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <TIM_Base_SetConfig+0x134>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <TIM_Base_SetConfig+0x138>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d003      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <TIM_Base_SetConfig+0x13c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d108      	bne.n	8002050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0xf8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d103      	bne.n	800208c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	615a      	str	r2, [r3, #20]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40010400 	.word	0x40010400
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800
 80020c0:	40001800 	.word	0x40001800
 80020c4:	40001c00 	.word	0x40001c00
 80020c8:	40002000 	.word	0x40002000

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f103 0208 	add.w	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800210c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f103 0208 	add.w	r2, r3, #8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0208 	add.w	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002164:	d103      	bne.n	800216e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e00c      	b.n	8002188 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3308      	adds	r3, #8
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e002      	b.n	800217c <vListInsert+0x2e>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	d2f6      	bcs.n	8002176 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6892      	ldr	r2, [r2, #8]
 80021d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6852      	ldr	r2, [r2, #4]
 80021e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d103      	bne.n	80021f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1e5a      	subs	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800221e:	2301      	movs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <xQueueGenericReset+0x2e>
        __asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	60fb      	str	r3, [r7, #12]
    }
 800223e:	bf00      	nop
 8002240:	e7fe      	b.n	8002240 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05d      	beq.n	8002304 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	d059      	beq.n	8002304 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	2100      	movs	r1, #0
 800225a:	fba3 2302 	umull	r2, r3, r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d000      	beq.n	8002264 <xQueueGenericReset+0x50>
 8002262:	2101      	movs	r1, #1
 8002264:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d14c      	bne.n	8002304 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800226a:	f001 fdd5 	bl	8003e18 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	6939      	ldr	r1, [r7, #16]
 8002278:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	441a      	add	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2200      	movs	r2, #0
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	3b01      	subs	r3, #1
 800229c:	6939      	ldr	r1, [r7, #16]
 800229e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	441a      	add	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	22ff      	movs	r2, #255	; 0xff
 80022ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d114      	bne.n	80022ea <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01a      	beq.n	80022fe <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	3310      	adds	r3, #16
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 ff45 	bl	800315c <xTaskRemoveFromEventList>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d012      	beq.n	80022fe <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <xQueueGenericReset+0x11c>)
 80022da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	e009      	b.n	80022fe <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	3310      	adds	r3, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff00 	bl	80020f4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3324      	adds	r3, #36	; 0x24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fefb 	bl	80020f4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022fe:	f001 fdbb 	bl	8003e78 <vPortExitCritical>
 8002302:	e001      	b.n	8002308 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <xQueueGenericReset+0x110>
        __asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	60bb      	str	r3, [r7, #8]
    }
 8002320:	bf00      	nop
 8002322:	e7fe      	b.n	8002322 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002324:	697b      	ldr	r3, [r7, #20]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02e      	beq.n	80023aa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800234c:	2100      	movs	r1, #0
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	fba3 2302 	umull	r2, r3, r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d000      	beq.n	800235c <xQueueGenericCreate+0x28>
 800235a:	2101      	movs	r1, #1
 800235c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800235e:	2b00      	cmp	r3, #0
 8002360:	d123      	bne.n	80023aa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800236a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800236e:	d81c      	bhi.n	80023aa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3350      	adds	r3, #80	; 0x50
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fe2c 	bl	8003fdc <pvPortMalloc>
 8002384:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01c      	beq.n	80023c6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3350      	adds	r3, #80	; 0x50
 8002394:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002396:	79fa      	ldrb	r2, [r7, #7]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f814 	bl	80023d0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023a8:	e00d      	b.n	80023c6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <xQueueGenericCreate+0x92>
        __asm volatile
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	613b      	str	r3, [r7, #16]
    }
 80023c2:	bf00      	nop
 80023c4:	e7fe      	b.n	80023c4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023c6:	69fb      	ldr	r3, [r7, #28]
    }
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e002      	b.n	80023f2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023fe:	2101      	movs	r1, #1
 8002400:	69b8      	ldr	r0, [r7, #24]
 8002402:	f7ff ff07 	bl	8002214 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	; 0x30
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <xQueueReceive+0x30>
        __asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	623b      	str	r3, [r7, #32]
    }
 8002444:	bf00      	nop
 8002446:	e7fe      	b.n	8002446 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <xQueueReceive+0x3e>
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <xQueueReceive+0x42>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <xQueueReceive+0x44>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <xQueueReceive+0x5e>
        __asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	61fb      	str	r3, [r7, #28]
    }
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002476:	f001 f881 	bl	800357c <xTaskGetSchedulerState>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <xQueueReceive+0x6e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <xQueueReceive+0x72>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <xQueueReceive+0x74>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <xQueueReceive+0x8e>
        __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	61bb      	str	r3, [r7, #24]
    }
 80024a2:	bf00      	nop
 80024a4:	e7fe      	b.n	80024a4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024a6:	f001 fcb7 	bl	8003e18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01f      	beq.n	80024f6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ba:	f000 f88d 	bl	80025d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00f      	beq.n	80024ee <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	3310      	adds	r3, #16
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fe42 	bl	800315c <xTaskRemoveFromEventList>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <xQueueReceive+0x1bc>)
 80024e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024ee:	f001 fcc3 	bl	8003e78 <vPortExitCritical>
                return pdPASS;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e069      	b.n	80025ca <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024fc:	f001 fcbc 	bl	8003e78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002500:	2300      	movs	r3, #0
 8002502:	e062      	b.n	80025ca <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fefa 	bl	8003308 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002514:	2301      	movs	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002518:	f001 fcae 	bl	8003e78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800251c:	f000 fb28 	bl	8002b70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002520:	f001 fc7a 	bl	8003e18 <vPortEnterCritical>
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800252a:	b25b      	sxtb	r3, r3
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002530:	d103      	bne.n	800253a <xQueueReceive+0x122>
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002540:	b25b      	sxtb	r3, r3
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002546:	d103      	bne.n	8002550 <xQueueReceive+0x138>
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002550:	f001 fc92 	bl	8003e78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002554:	1d3a      	adds	r2, r7, #4
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fee9 	bl	8003334 <xTaskCheckForTimeOut>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d123      	bne.n	80025b0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800256a:	f000 f8ad 	bl	80026c8 <prvIsQueueEmpty>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d017      	beq.n	80025a4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	3324      	adds	r3, #36	; 0x24
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fd83 	bl	8003088 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002584:	f000 f84e 	bl	8002624 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002588:	f000 fb00 	bl	8002b8c <xTaskResumeAll>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d189      	bne.n	80024a6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <xQueueReceive+0x1bc>)
 8002594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	e780      	b.n	80024a6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a6:	f000 f83d 	bl	8002624 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025aa:	f000 faef 	bl	8002b8c <xTaskResumeAll>
 80025ae:	e77a      	b.n	80024a6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f000 f837 	bl	8002624 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025b6:	f000 fae9 	bl	8002b8c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025bc:	f000 f884 	bl	80026c8 <prvIsQueueEmpty>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f43f af6f 	beq.w	80024a6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3730      	adds	r7, #48	; 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000ed04 	.word	0xe000ed04

080025d8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d018      	beq.n	800261c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	441a      	add	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	d303      	bcc.n	800260c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68d9      	ldr	r1, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	461a      	mov	r2, r3
 8002616:	6838      	ldr	r0, [r7, #0]
 8002618:	f001 fed0 	bl	80043bc <memcpy>
    }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800262c:	f001 fbf4 	bl	8003e18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002636:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002638:	e011      	b.n	800265e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d012      	beq.n	8002668 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3324      	adds	r3, #36	; 0x24
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fd88 	bl	800315c <xTaskRemoveFromEventList>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002652:	f000 fed5 	bl	8003400 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	3b01      	subs	r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	dce9      	bgt.n	800263a <prvUnlockQueue+0x16>
 8002666:	e000      	b.n	800266a <prvUnlockQueue+0x46>
                    break;
 8002668:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	22ff      	movs	r2, #255	; 0xff
 800266e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002672:	f001 fc01 	bl	8003e78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002676:	f001 fbcf 	bl	8003e18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002680:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002682:	e011      	b.n	80026a8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3310      	adds	r3, #16
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fd63 	bl	800315c <xTaskRemoveFromEventList>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800269c:	f000 feb0 	bl	8003400 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026a0:	7bbb      	ldrb	r3, [r7, #14]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	dce9      	bgt.n	8002684 <prvUnlockQueue+0x60>
 80026b0:	e000      	b.n	80026b4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026b2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026bc:	f001 fbdc 	bl	8003e78 <vPortExitCritical>
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026d0:	f001 fba2 	bl	8003e18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026dc:	2301      	movs	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e001      	b.n	80026e6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026e6:	f001 fbc7 	bl	8003e78 <vPortExitCritical>

    return xReturn;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	60fb      	str	r3, [r7, #12]
    }
 800271a:	bf00      	nop
 800271c:	e7fe      	b.n	800271c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d024      	beq.n	800276e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e01e      	b.n	8002768 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800272a:	4a18      	ldr	r2, [pc, #96]	; (800278c <vQueueAddToRegistry+0x98>)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	d105      	bne.n	8002746 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <vQueueAddToRegistry+0x98>)
 8002740:	4413      	add	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
                    break;
 8002744:	e013      	b.n	800276e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <vQueueAddToRegistry+0x6e>
 800274c:	4a0f      	ldr	r2, [pc, #60]	; (800278c <vQueueAddToRegistry+0x98>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4a0b      	ldr	r2, [pc, #44]	; (800278c <vQueueAddToRegistry+0x98>)
 800275e:	4413      	add	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b07      	cmp	r3, #7
 800276c:	d9dd      	bls.n	800272a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	200000e0 	.word	0x200000e0

08002790 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027a0:	f001 fb3a 	bl	8003e18 <vPortEnterCritical>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b0:	d103      	bne.n	80027ba <vQueueWaitForMessageRestricted+0x2a>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c6:	d103      	bne.n	80027d0 <vQueueWaitForMessageRestricted+0x40>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d0:	f001 fb52 	bl	8003e78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fc73 	bl	80030d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff1a 	bl	8002624 <prvUnlockQueue>
    }
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fbe5 	bl	8003fdc <pvPortMalloc>
 8002812:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d013      	beq.n	8002842 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800281a:	2058      	movs	r0, #88	; 0x58
 800281c:	f001 fbde 	bl	8003fdc <pvPortMalloc>
 8002820:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002828:	2258      	movs	r2, #88	; 0x58
 800282a:	2100      	movs	r1, #0
 800282c:	69f8      	ldr	r0, [r7, #28]
 800282e:	f001 fdd3 	bl	80043d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
 8002838:	e005      	b.n	8002846 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f001 fc88 	bl	8004150 <vPortFree>
 8002840:	e001      	b.n	8002846 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	2300      	movs	r3, #0
 8002850:	9303      	str	r3, [sp, #12]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f80e 	bl	8002884 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002868:	69f8      	ldr	r0, [r7, #28]
 800286a:	f000 f899 	bl	80029a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e002      	b.n	800287a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002878:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800287a:	69bb      	ldr	r3, [r7, #24]
    }
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	461a      	mov	r2, r3
 800289c:	21a5      	movs	r1, #165	; 0xa5
 800289e:	f001 fd9b 	bl	80043d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ac:	3b01      	subs	r3, #1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f023 0307 	bic.w	r3, r3, #7
 80028ba:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <prvInitialiseNewTask+0x58>
        __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	617b      	str	r3, [r7, #20]
    }
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01e      	beq.n	8002920 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e012      	b.n	800290e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	7819      	ldrb	r1, [r3, #0]
 80028f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	3334      	adds	r3, #52	; 0x34
 80028f8:	460a      	mov	r2, r1
 80028fa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b09      	cmp	r3, #9
 8002912:	d9e9      	bls.n	80028e8 <prvInitialiseNewTask+0x64>
 8002914:	e000      	b.n	8002918 <prvInitialiseNewTask+0x94>
            {
                break;
 8002916:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	2b04      	cmp	r3, #4
 8002924:	d90a      	bls.n	800293c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	613b      	str	r3, [r7, #16]
    }
 8002938:	bf00      	nop
 800293a:	e7fe      	b.n	800293a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2b04      	cmp	r3, #4
 8002940:	d901      	bls.n	8002946 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002942:	2304      	movs	r3, #4
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002950:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	3304      	adds	r3, #4
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fbec 	bl	8002134 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	3318      	adds	r3, #24
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fbe7 	bl	8002134 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	f1c3 0205 	rsb	r2, r3, #5
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	69b8      	ldr	r0, [r7, #24]
 8002982:	f001 f91d 	bl	8003bc0 <pxPortInitialiseStack>
 8002986:	4602      	mov	r2, r0
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002996:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002998:	bf00      	nop
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029a8:	f001 fa36 	bl	8003e18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <prvAddNewTaskToReadyList+0x110>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a3f      	ldr	r2, [pc, #252]	; (8002ab0 <prvAddNewTaskToReadyList+0x110>)
 80029b4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <prvAddNewTaskToReadyList+0x114>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029be:	4a3d      	ldr	r2, [pc, #244]	; (8002ab4 <prvAddNewTaskToReadyList+0x114>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <prvAddNewTaskToReadyList+0x110>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d110      	bne.n	80029ee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029cc:	f000 fd3c 	bl	8003448 <prvInitialiseTaskLists>
 80029d0:	e00d      	b.n	80029ee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <prvAddNewTaskToReadyList+0x118>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <prvAddNewTaskToReadyList+0x114>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d802      	bhi.n	80029ee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029e8:	4a32      	ldr	r2, [pc, #200]	; (8002ab4 <prvAddNewTaskToReadyList+0x114>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029ee:	4b33      	ldr	r3, [pc, #204]	; (8002abc <prvAddNewTaskToReadyList+0x11c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a31      	ldr	r2, [pc, #196]	; (8002abc <prvAddNewTaskToReadyList+0x11c>)
 80029f6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029f8:	4b30      	ldr	r3, [pc, #192]	; (8002abc <prvAddNewTaskToReadyList+0x11c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <prvAddNewTaskToReadyList+0x120>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <prvAddNewTaskToReadyList+0x120>)
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a16:	492b      	ldr	r1, [pc, #172]	; (8002ac4 <prvAddNewTaskToReadyList+0x124>)
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3304      	adds	r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	3204      	adds	r2, #4
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1d1a      	adds	r2, r3, #4
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <prvAddNewTaskToReadyList+0x124>)
 8002a56:	441a      	add	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4918      	ldr	r1, [pc, #96]	; (8002ac4 <prvAddNewTaskToReadyList+0x124>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <prvAddNewTaskToReadyList+0x124>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4403      	add	r3, r0
 8002a7c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a7e:	f001 f9fb 	bl	8003e78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <prvAddNewTaskToReadyList+0x118>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00e      	beq.n	8002aa8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <prvAddNewTaskToReadyList+0x114>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d207      	bcs.n	8002aa8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <prvAddNewTaskToReadyList+0x128>)
 8002a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200001f8 	.word	0x200001f8
 8002ab4:	20000120 	.word	0x20000120
 8002ab8:	20000204 	.word	0x20000204
 8002abc:	20000214 	.word	0x20000214
 8002ac0:	20000200 	.word	0x20000200
 8002ac4:	20000124 	.word	0x20000124
 8002ac8:	e000ed04 	.word	0xe000ed04

08002acc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <vTaskStartScheduler+0x88>)
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2300      	movs	r3, #0
 8002adc:	2282      	movs	r2, #130	; 0x82
 8002ade:	491e      	ldr	r1, [pc, #120]	; (8002b58 <vTaskStartScheduler+0x8c>)
 8002ae0:	481e      	ldr	r0, [pc, #120]	; (8002b5c <vTaskStartScheduler+0x90>)
 8002ae2:	f7ff fe89 	bl	80027f8 <xTaskCreate>
 8002ae6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002aee:	f000 fde3 	bl	80036b8 <xTimerCreateTimerTask>
 8002af2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d116      	bne.n	8002b28 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	60bb      	str	r3, [r7, #8]
    }
 8002b0c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <vTaskStartScheduler+0x94>)
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b14:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <vTaskStartScheduler+0x98>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <vTaskStartScheduler+0x9c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002b22:	f001 f8d7 	bl	8003cd4 <xPortStartScheduler>
 8002b26:	e00e      	b.n	8002b46 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2e:	d10a      	bne.n	8002b46 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	607b      	str	r3, [r7, #4]
    }
 8002b42:	bf00      	nop
 8002b44:	e7fe      	b.n	8002b44 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <vTaskStartScheduler+0xa0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000021c 	.word	0x2000021c
 8002b58:	08004e58 	.word	0x08004e58
 8002b5c:	08003419 	.word	0x08003419
 8002b60:	20000218 	.word	0x20000218
 8002b64:	20000204 	.word	0x20000204
 8002b68:	200001fc 	.word	0x200001fc
 8002b6c:	2000000c 	.word	0x2000000c

08002b70 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <vTaskSuspendAll+0x18>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <vTaskSuspendAll+0x18>)
 8002b7c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20000220 	.word	0x20000220

08002b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b9a:	4b71      	ldr	r3, [pc, #452]	; (8002d60 <xTaskResumeAll+0x1d4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	607b      	str	r3, [r7, #4]
    }
 8002bb4:	bf00      	nop
 8002bb6:	e7fe      	b.n	8002bb6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002bb8:	f001 f92e 	bl	8003e18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <xTaskResumeAll+0x1d4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	4a67      	ldr	r2, [pc, #412]	; (8002d60 <xTaskResumeAll+0x1d4>)
 8002bc4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bc6:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <xTaskResumeAll+0x1d4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 80c0 	bne.w	8002d50 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bd0:	4b64      	ldr	r3, [pc, #400]	; (8002d64 <xTaskResumeAll+0x1d8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80bb 	beq.w	8002d50 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bda:	e08a      	b.n	8002cf2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bdc:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <xTaskResumeAll+0x1dc>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	6a12      	ldr	r2, [r2, #32]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	69d2      	ldr	r2, [r2, #28]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3318      	adds	r3, #24
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d103      	bne.n	8002c12 <xTaskResumeAll+0x86>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2200      	movs	r2, #0
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	68d2      	ldr	r2, [r2, #12]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	6892      	ldr	r2, [r2, #8]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	3304      	adds	r3, #4
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d103      	bne.n	8002c50 <xTaskResumeAll+0xc4>
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2200      	movs	r2, #0
 8002c54:	615a      	str	r2, [r3, #20]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1e5a      	subs	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <xTaskResumeAll+0x1e0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	4a3f      	ldr	r2, [pc, #252]	; (8002d6c <xTaskResumeAll+0x1e0>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	493e      	ldr	r1, [pc, #248]	; (8002d70 <xTaskResumeAll+0x1e4>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3304      	adds	r3, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	3204      	adds	r2, #4
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	; (8002d70 <xTaskResumeAll+0x1e4>)
 8002cb6:	441a      	add	r2, r3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	615a      	str	r2, [r3, #20]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	492b      	ldr	r1, [pc, #172]	; (8002d70 <xTaskResumeAll+0x1e4>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1c59      	adds	r1, r3, #1
 8002cd0:	4827      	ldr	r0, [pc, #156]	; (8002d70 <xTaskResumeAll+0x1e4>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4403      	add	r3, r0
 8002cdc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <xTaskResumeAll+0x1e8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d302      	bcc.n	8002cf2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <xTaskResumeAll+0x1ec>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <xTaskResumeAll+0x1dc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f af70 	bne.w	8002bdc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d02:	f000 fc1f 	bl	8003544 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <xTaskResumeAll+0x1f0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d010      	beq.n	8002d34 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d12:	f000 f847 	bl	8002da4 <xTaskIncrementTick>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <xTaskResumeAll+0x1ec>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f1      	bne.n	8002d12 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <xTaskResumeAll+0x1f0>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <xTaskResumeAll+0x1ec>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <xTaskResumeAll+0x1f4>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d50:	f001 f892 	bl	8003e78 <vPortExitCritical>

    return xAlreadyYielded;
 8002d54:	69bb      	ldr	r3, [r7, #24]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000220 	.word	0x20000220
 8002d64:	200001f8 	.word	0x200001f8
 8002d68:	200001b8 	.word	0x200001b8
 8002d6c:	20000200 	.word	0x20000200
 8002d70:	20000124 	.word	0x20000124
 8002d74:	20000120 	.word	0x20000120
 8002d78:	2000020c 	.word	0x2000020c
 8002d7c:	20000208 	.word	0x20000208
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <xTaskGetTickCount+0x1c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d90:	687b      	ldr	r3, [r7, #4]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	200001fc 	.word	0x200001fc

08002da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dae:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <xTaskIncrementTick+0x200>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 80ec 	bne.w	8002f90 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002db8:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <xTaskIncrementTick+0x204>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002dc0:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <xTaskIncrementTick+0x204>)
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d120      	bne.n	8002e0e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002dcc:	4b77      	ldr	r3, [pc, #476]	; (8002fac <xTaskIncrementTick+0x208>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <xTaskIncrementTick+0x48>
        __asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	607b      	str	r3, [r7, #4]
    }
 8002de8:	bf00      	nop
 8002dea:	e7fe      	b.n	8002dea <xTaskIncrementTick+0x46>
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <xTaskIncrementTick+0x208>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <xTaskIncrementTick+0x20c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6d      	ldr	r2, [pc, #436]	; (8002fac <xTaskIncrementTick+0x208>)
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <xTaskIncrementTick+0x20c>)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <xTaskIncrementTick+0x210>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	4a6b      	ldr	r2, [pc, #428]	; (8002fb4 <xTaskIncrementTick+0x210>)
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	f000 fb9b 	bl	8003544 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <xTaskIncrementTick+0x214>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a3a      	ldr	r2, [r7, #32]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f0c0 80a6 	bcc.w	8002f66 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e1a:	4b64      	ldr	r3, [pc, #400]	; (8002fac <xTaskIncrementTick+0x208>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e24:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <xTaskIncrementTick+0x214>)
 8002e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e2a:	601a      	str	r2, [r3, #0]
                    break;
 8002e2c:	e09b      	b.n	8002f66 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <xTaskIncrementTick+0x208>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e3e:	6a3a      	ldr	r2, [r7, #32]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d203      	bcs.n	8002e4e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e46:	4a5c      	ldr	r2, [pc, #368]	; (8002fb8 <xTaskIncrementTick+0x214>)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e4c:	e08b      	b.n	8002f66 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	68d2      	ldr	r2, [r2, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	6892      	ldr	r2, [r2, #8]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d103      	bne.n	8002e7c <xTaskIncrementTick+0xd8>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01e      	beq.n	8002ed2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	6a12      	ldr	r2, [r2, #32]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	69d2      	ldr	r2, [r2, #28]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3318      	adds	r3, #24
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d103      	bne.n	8002ec2 <xTaskIncrementTick+0x11e>
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <xTaskIncrementTick+0x218>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <xTaskIncrementTick+0x218>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	4935      	ldr	r1, [pc, #212]	; (8002fc0 <xTaskIncrementTick+0x21c>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	3204      	adds	r2, #4
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <xTaskIncrementTick+0x21c>)
 8002f28:	441a      	add	r2, r3
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	615a      	str	r2, [r3, #20]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f32:	4923      	ldr	r1, [pc, #140]	; (8002fc0 <xTaskIncrementTick+0x21c>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	481f      	ldr	r0, [pc, #124]	; (8002fc0 <xTaskIncrementTick+0x21c>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4403      	add	r3, r0
 8002f4e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <xTaskIncrementTick+0x220>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	f67f af5d 	bls.w	8002e1a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f64:	e759      	b.n	8002e1a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <xTaskIncrementTick+0x220>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	4914      	ldr	r1, [pc, #80]	; (8002fc0 <xTaskIncrementTick+0x21c>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d901      	bls.n	8002f82 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <xTaskIncrementTick+0x224>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	e004      	b.n	8002f9a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <xTaskIncrementTick+0x228>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <xTaskIncrementTick+0x228>)
 8002f98:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000220 	.word	0x20000220
 8002fa8:	200001fc 	.word	0x200001fc
 8002fac:	200001b0 	.word	0x200001b0
 8002fb0:	200001b4 	.word	0x200001b4
 8002fb4:	20000210 	.word	0x20000210
 8002fb8:	20000218 	.word	0x20000218
 8002fbc:	20000200 	.word	0x20000200
 8002fc0:	20000124 	.word	0x20000124
 8002fc4:	20000120 	.word	0x20000120
 8002fc8:	2000020c 	.word	0x2000020c
 8002fcc:	20000208 	.word	0x20000208

08002fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fd6:	4b27      	ldr	r3, [pc, #156]	; (8003074 <vTaskSwitchContext+0xa4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <vTaskSwitchContext+0xa8>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002fe4:	e03f      	b.n	8003066 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <vTaskSwitchContext+0xa8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fec:	4b23      	ldr	r3, [pc, #140]	; (800307c <vTaskSwitchContext+0xac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	f1c3 031f 	rsb	r3, r3, #31
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	491f      	ldr	r1, [pc, #124]	; (8003080 <vTaskSwitchContext+0xb0>)
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	607b      	str	r3, [r7, #4]
    }
 8003028:	bf00      	nop
 800302a:	e7fe      	b.n	800302a <vTaskSwitchContext+0x5a>
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <vTaskSwitchContext+0xb0>)
 8003038:	4413      	add	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3308      	adds	r3, #8
 800304e:	429a      	cmp	r2, r3
 8003050:	d104      	bne.n	800305c <vTaskSwitchContext+0x8c>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <vTaskSwitchContext+0xb4>)
 8003064:	6013      	str	r3, [r2, #0]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000220 	.word	0x20000220
 8003078:	2000020c 	.word	0x2000020c
 800307c:	20000200 	.word	0x20000200
 8003080:	20000124 	.word	0x20000124
 8003084:	20000120 	.word	0x20000120

08003088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	60fb      	str	r3, [r7, #12]
    }
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <vTaskPlaceOnEventList+0x44>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3318      	adds	r3, #24
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff f849 	bl	800214e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030bc:	2101      	movs	r1, #1
 80030be:	6838      	ldr	r0, [r7, #0]
 80030c0:	f000 fa7a 	bl	80035b8 <prvAddCurrentTaskToDelayedList>
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000120 	.word	0x20000120

080030d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	613b      	str	r3, [r7, #16]
    }
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <vTaskPlaceOnEventListRestricted+0x88>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	61da      	str	r2, [r3, #28]
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <vTaskPlaceOnEventListRestricted+0x88>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	621a      	str	r2, [r3, #32]
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <vTaskPlaceOnEventListRestricted+0x88>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	3218      	adds	r2, #24
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <vTaskPlaceOnEventListRestricted+0x88>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f103 0218 	add.w	r2, r3, #24
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <vTaskPlaceOnEventListRestricted+0x88>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003144:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	68b8      	ldr	r0, [r7, #8]
 800314a:	f000 fa35 	bl	80035b8 <prvAddCurrentTaskToDelayedList>
    }
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000120 	.word	0x20000120

0800315c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800315c:	b480      	push	{r7}
 800315e:	b08b      	sub	sp, #44	; 0x2c
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	60fb      	str	r3, [r7, #12]
    }
 8003184:	bf00      	nop
 8003186:	e7fe      	b.n	8003186 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	6a12      	ldr	r2, [r2, #32]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	69d2      	ldr	r2, [r2, #28]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	3318      	adds	r3, #24
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d103      	bne.n	80031b6 <xTaskRemoveFromEventList+0x5a>
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <xTaskRemoveFromEventList+0x194>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d15e      	bne.n	800328c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	68d2      	ldr	r2, [r2, #12]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	6a3a      	ldr	r2, [r7, #32]
 80031e4:	6892      	ldr	r2, [r2, #8]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	3304      	adds	r3, #4
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d103      	bne.n	80031fc <xTaskRemoveFromEventList+0xa0>
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <xTaskRemoveFromEventList+0x198>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	4a36      	ldr	r2, [pc, #216]	; (80032f4 <xTaskRemoveFromEventList+0x198>)
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	4935      	ldr	r1, [pc, #212]	; (80032f8 <xTaskRemoveFromEventList+0x19c>)
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3304      	adds	r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	3204      	adds	r2, #4
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <xTaskRemoveFromEventList+0x19c>)
 8003262:	441a      	add	r2, r3
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	615a      	str	r2, [r3, #20]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	4922      	ldr	r1, [pc, #136]	; (80032f8 <xTaskRemoveFromEventList+0x19c>)
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1c59      	adds	r1, r3, #1
 800327c:	481e      	ldr	r0, [pc, #120]	; (80032f8 <xTaskRemoveFromEventList+0x19c>)
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4403      	add	r3, r0
 8003288:	6019      	str	r1, [r3, #0]
 800328a:	e01b      	b.n	80032c4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <xTaskRemoveFromEventList+0x1a0>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	61da      	str	r2, [r3, #28]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	621a      	str	r2, [r3, #32]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	3218      	adds	r2, #24
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f103 0218 	add.w	r2, r3, #24
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <xTaskRemoveFromEventList+0x1a0>)
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <xTaskRemoveFromEventList+0x1a0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <xTaskRemoveFromEventList+0x1a0>)
 80032c2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <xTaskRemoveFromEventList+0x1a4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d905      	bls.n	80032de <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <xTaskRemoveFromEventList+0x1a8>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e001      	b.n	80032e2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	372c      	adds	r7, #44	; 0x2c
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	20000220 	.word	0x20000220
 80032f4:	20000200 	.word	0x20000200
 80032f8:	20000124 	.word	0x20000124
 80032fc:	200001b8 	.word	0x200001b8
 8003300:	20000120 	.word	0x20000120
 8003304:	2000020c 	.word	0x2000020c

08003308 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <vTaskInternalSetTimeOutState+0x24>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <vTaskInternalSetTimeOutState+0x28>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	20000210 	.word	0x20000210
 8003330:	200001fc 	.word	0x200001fc

08003334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	613b      	str	r3, [r7, #16]
    }
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	60fb      	str	r3, [r7, #12]
    }
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003376:	f000 fd4f 	bl	8003e18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <xTaskCheckForTimeOut+0xc4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003392:	d102      	bne.n	800339a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e026      	b.n	80033e8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <xTaskCheckForTimeOut+0xc8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d00a      	beq.n	80033bc <xTaskCheckForTimeOut+0x88>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d305      	bcc.n	80033bc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e015      	b.n	80033e8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d20b      	bcs.n	80033de <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	1ad2      	subs	r2, r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff98 	bl	8003308 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	e004      	b.n	80033e8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80033e8:	f000 fd46 	bl	8003e78 <vPortExitCritical>

    return xReturn;
 80033ec:	69fb      	ldr	r3, [r7, #28]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200001fc 	.word	0x200001fc
 80033fc:	20000210 	.word	0x20000210

08003400 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <vTaskMissedYield+0x14>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	2000020c 	.word	0x2000020c

08003418 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003420:	f000 f852 	bl	80034c8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <prvIdleTask+0x28>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d9f9      	bls.n	8003420 <prvIdleTask+0x8>
            {
                taskYIELD();
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <prvIdleTask+0x2c>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800343c:	e7f0      	b.n	8003420 <prvIdleTask+0x8>
 800343e:	bf00      	nop
 8003440:	20000124 	.word	0x20000124
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	e00c      	b.n	800346e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <prvInitialiseTaskLists+0x60>)
 8003460:	4413      	add	r3, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fe46 	bl	80020f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3301      	adds	r3, #1
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d9ef      	bls.n	8003454 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003474:	480d      	ldr	r0, [pc, #52]	; (80034ac <prvInitialiseTaskLists+0x64>)
 8003476:	f7fe fe3d 	bl	80020f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800347a:	480d      	ldr	r0, [pc, #52]	; (80034b0 <prvInitialiseTaskLists+0x68>)
 800347c:	f7fe fe3a 	bl	80020f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003480:	480c      	ldr	r0, [pc, #48]	; (80034b4 <prvInitialiseTaskLists+0x6c>)
 8003482:	f7fe fe37 	bl	80020f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003486:	480c      	ldr	r0, [pc, #48]	; (80034b8 <prvInitialiseTaskLists+0x70>)
 8003488:	f7fe fe34 	bl	80020f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800348c:	480b      	ldr	r0, [pc, #44]	; (80034bc <prvInitialiseTaskLists+0x74>)
 800348e:	f7fe fe31 	bl	80020f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <prvInitialiseTaskLists+0x78>)
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <prvInitialiseTaskLists+0x64>)
 8003496:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <prvInitialiseTaskLists+0x7c>)
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <prvInitialiseTaskLists+0x68>)
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000124 	.word	0x20000124
 80034ac:	20000188 	.word	0x20000188
 80034b0:	2000019c 	.word	0x2000019c
 80034b4:	200001b8 	.word	0x200001b8
 80034b8:	200001cc 	.word	0x200001cc
 80034bc:	200001e4 	.word	0x200001e4
 80034c0:	200001b0 	.word	0x200001b0
 80034c4:	200001b4 	.word	0x200001b4

080034c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ce:	e019      	b.n	8003504 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80034d0:	f000 fca2 	bl	8003e18 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <prvCheckTasksWaitingTermination+0x50>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fe6d 	bl	80021c0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <prvCheckTasksWaitingTermination+0x54>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	4a0b      	ldr	r2, [pc, #44]	; (800351c <prvCheckTasksWaitingTermination+0x54>)
 80034ee:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <prvCheckTasksWaitingTermination+0x58>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <prvCheckTasksWaitingTermination+0x58>)
 80034f8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80034fa:	f000 fcbd 	bl	8003e78 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f810 	bl	8003524 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <prvCheckTasksWaitingTermination+0x58>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e1      	bne.n	80034d0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200001cc 	.word	0x200001cc
 800351c:	200001f8 	.word	0x200001f8
 8003520:	200001e0 	.word	0x200001e0

08003524 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fe0d 	bl	8004150 <vPortFree>
            vPortFree( pxTCB );
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fe0a 	bl	8004150 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <prvResetNextTaskUnblockTime+0x30>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <prvResetNextTaskUnblockTime+0x34>)
 8003554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003558:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800355a:	e005      	b.n	8003568 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <prvResetNextTaskUnblockTime+0x30>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <prvResetNextTaskUnblockTime+0x34>)
 8003566:	6013      	str	r3, [r2, #0]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	200001b0 	.word	0x200001b0
 8003578:	20000218 	.word	0x20000218

0800357c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <xTaskGetSchedulerState+0x34>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800358a:	2301      	movs	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	e008      	b.n	80035a2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <xTaskGetSchedulerState+0x38>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003598:	2302      	movs	r3, #2
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	e001      	b.n	80035a2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80035a2:	687b      	ldr	r3, [r7, #4]
    }
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	20000204 	.word	0x20000204
 80035b4:	20000220 	.word	0x20000220

080035b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <prvAddCurrentTaskToDelayedList+0xe4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c8:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fdf6 	bl	80021c0 <uxListRemove>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	2201      	movs	r2, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4013      	ands	r3, r2
 80035ee:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80035f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f8:	d124      	bne.n	8003644 <prvAddCurrentTaskToDelayedList+0x8c>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d021      	beq.n	8003644 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	6892      	ldr	r2, [r2, #8]
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	3204      	adds	r2, #4
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1d1a      	adds	r2, r3, #4
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003634:	615a      	str	r2, [r3, #20]
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003642:	e026      	b.n	8003692 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d209      	bcs.n	8003670 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fe fd70 	bl	800214e <vListInsert>
}
 800366e:	e010      	b.n	8003692 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3304      	adds	r3, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f7fe fd66 	bl	800214e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d202      	bcs.n	8003692 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800368c:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6013      	str	r3, [r2, #0]
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200001fc 	.word	0x200001fc
 80036a0:	20000120 	.word	0x20000120
 80036a4:	20000200 	.word	0x20000200
 80036a8:	200001e4 	.word	0x200001e4
 80036ac:	200001b4 	.word	0x200001b4
 80036b0:	200001b0 	.word	0x200001b0
 80036b4:	20000218 	.word	0x20000218

080036b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80036c2:	f000 fa47 	bl	8003b54 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <xTimerCreateTimerTask+0x54>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <xTimerCreateTimerTask+0x58>)
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2302      	movs	r3, #2
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036dc:	490d      	ldr	r1, [pc, #52]	; (8003714 <xTimerCreateTimerTask+0x5c>)
 80036de:	480e      	ldr	r0, [pc, #56]	; (8003718 <xTimerCreateTimerTask+0x60>)
 80036e0:	f7ff f88a 	bl	80027f8 <xTaskCreate>
 80036e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	603b      	str	r3, [r7, #0]
    }
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003702:	687b      	ldr	r3, [r7, #4]
    }
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000254 	.word	0x20000254
 8003710:	20000258 	.word	0x20000258
 8003714:	08004e60 	.word	0x08004e60
 8003718:	080037c1 	.word	0x080037c1

0800371c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003728:	e008      	b.n	800373c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4413      	add	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	18d1      	adds	r1, r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f8dd 	bl	8003908 <prvInsertTimerInActiveList>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ea      	bne.n	800372a <prvReloadTimer+0xe>
        }
    }
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800376a:	4b14      	ldr	r3, [pc, #80]	; (80037bc <prvProcessExpiredTimer+0x5c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3304      	adds	r3, #4
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fd21 	bl	80021c0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ffc3 	bl	800371c <prvReloadTimer>
 8003796:	e008      	b.n	80037aa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	4798      	blx	r3
    }
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000024c 	.word	0x2000024c

080037c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f857 	bl	8003880 <prvGetNextExpireTime>
 80037d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4619      	mov	r1, r3
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f803 	bl	80037e4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037de:	f000 f8d5 	bl	800398c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037e2:	e7f1      	b.n	80037c8 <prvTimerTask+0x8>

080037e4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037ee:	f7ff f9bf 	bl	8002b70 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f866 	bl	80038c8 <prvSampleTimeNow>
 80037fc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d130      	bne.n	8003866 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <prvProcessTimerOrBlockTask+0x3c>
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	429a      	cmp	r2, r3
 8003810:	d806      	bhi.n	8003820 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003812:	f7ff f9bb 	bl	8002b8c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffa1 	bl	8003760 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800381e:	e024      	b.n	800386a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <prvProcessTimerOrBlockTask+0x90>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <prvProcessTimerOrBlockTask+0x50>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <prvProcessTimerOrBlockTask+0x52>
 8003834:	2300      	movs	r3, #0
 8003836:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <prvProcessTimerOrBlockTask+0x94>)
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	f7fe ffa3 	bl	8002790 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800384a:	f7ff f99f 	bl	8002b8c <xTaskResumeAll>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <prvProcessTimerOrBlockTask+0x98>)
 8003856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	f3bf 8f6f 	isb	sy
    }
 8003864:	e001      	b.n	800386a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003866:	f7ff f991 	bl	8002b8c <xTaskResumeAll>
    }
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000250 	.word	0x20000250
 8003878:	20000254 	.word	0x20000254
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <prvGetNextExpireTime+0x44>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <prvGetNextExpireTime+0x16>
 8003892:	2201      	movs	r2, #1
 8003894:	e000      	b.n	8003898 <prvGetNextExpireTime+0x18>
 8003896:	2200      	movs	r2, #0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <prvGetNextExpireTime+0x44>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e001      	b.n	80038b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80038b4:	68fb      	ldr	r3, [r7, #12]
    }
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	2000024c 	.word	0x2000024c

080038c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80038d0:	f7ff fa58 	bl	8002d84 <xTaskGetTickCount>
 80038d4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <prvSampleTimeNow+0x3c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d205      	bcs.n	80038ec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038e0:	f000 f912 	bl	8003b08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e002      	b.n	80038f2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <prvSampleTimeNow+0x3c>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038f8:	68fb      	ldr	r3, [r7, #12]
    }
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000025c 	.word	0x2000025c

08003908 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d812      	bhi.n	8003954 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	1ad2      	subs	r2, r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	429a      	cmp	r2, r3
 800393a:	d302      	bcc.n	8003942 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800393c:	2301      	movs	r3, #1
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e01b      	b.n	800397a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <prvInsertTimerInActiveList+0x7c>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4610      	mov	r0, r2
 800394e:	f7fe fbfe 	bl	800214e <vListInsert>
 8003952:	e012      	b.n	800397a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d206      	bcs.n	800396a <prvInsertTimerInActiveList+0x62>
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d302      	bcc.n	800396a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e007      	b.n	800397a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800396a:	4b07      	ldr	r3, [pc, #28]	; (8003988 <prvInsertTimerInActiveList+0x80>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3304      	adds	r3, #4
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f7fe fbea 	bl	800214e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800397a:	697b      	ldr	r3, [r7, #20]
    }
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000250 	.word	0x20000250
 8003988:	2000024c 	.word	0x2000024c

0800398c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003992:	e0a6      	b.n	8003ae2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f2c0 80a2 	blt.w	8003ae0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fc07 	bl	80021c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff87 	bl	80038c8 <prvSampleTimeNow>
 80039ba:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3b01      	subs	r3, #1
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	f200 808e 	bhi.w	8003ae2 <prvProcessReceivedCommands+0x156>
 80039c6:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <prvProcessReceivedCommands+0x40>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f1 	.word	0x080039f1
 80039d4:	08003a59 	.word	0x08003a59
 80039d8:	08003a6d 	.word	0x08003a6d
 80039dc:	08003ab7 	.word	0x08003ab7
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	080039f1 	.word	0x080039f1
 80039e8:	08003a59 	.word	0x08003a59
 80039ec:	08003a6d 	.word	0x08003a6d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	18d1      	adds	r1, r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	69f8      	ldr	r0, [r7, #28]
 8003a10:	f7ff ff7a 	bl	8003908 <prvInsertTimerInActiveList>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d063      	beq.n	8003ae2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	4413      	add	r3, r2
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4619      	mov	r1, r3
 8003a34:	69f8      	ldr	r0, [r7, #28]
 8003a36:	f7ff fe71 	bl	800371c <prvReloadTimer>
 8003a3a:	e008      	b.n	8003a4e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	69f8      	ldr	r0, [r7, #28]
 8003a54:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003a56:	e044      	b.n	8003ae2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003a6a:	e03a      	b.n	8003ae2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	617b      	str	r3, [r7, #20]
    }
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	18d1      	adds	r1, r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	69f8      	ldr	r0, [r7, #28]
 8003ab0:	f7ff ff2a 	bl	8003908 <prvInsertTimerInActiveList>
                        break;
 8003ab4:	e015      	b.n	8003ae2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003ac4:	69f8      	ldr	r0, [r7, #28]
 8003ac6:	f000 fb43 	bl	8004150 <vPortFree>
 8003aca:	e00a      	b.n	8003ae2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ad2:	f023 0301 	bic.w	r3, r3, #1
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ade:	e000      	b.n	8003ae2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ae0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <prvProcessReceivedCommands+0x178>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f107 0108 	add.w	r1, r7, #8
 8003aea:	2200      	movs	r2, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fc93 	bl	8002418 <xQueueReceive>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f47f af4d 	bne.w	8003994 <prvProcessReceivedCommands+0x8>
        }
    }
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000254 	.word	0x20000254

08003b08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b0e:	e009      	b.n	8003b24 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <prvSwitchTimerLists+0x44>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003b1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b1e:	6838      	ldr	r0, [r7, #0]
 8003b20:	f7ff fe1e 	bl	8003760 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <prvSwitchTimerLists+0x44>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <prvSwitchTimerLists+0x44>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <prvSwitchTimerLists+0x48>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <prvSwitchTimerLists+0x44>)
 8003b3a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <prvSwitchTimerLists+0x48>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6013      	str	r3, [r2, #0]
    }
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000024c 	.word	0x2000024c
 8003b50:	20000250 	.word	0x20000250

08003b54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b58:	f000 f95e 	bl	8003e18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <prvCheckForValidListAndQueue+0x54>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11d      	bne.n	8003ba0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b64:	4811      	ldr	r0, [pc, #68]	; (8003bac <prvCheckForValidListAndQueue+0x58>)
 8003b66:	f7fe fac5 	bl	80020f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b6a:	4811      	ldr	r0, [pc, #68]	; (8003bb0 <prvCheckForValidListAndQueue+0x5c>)
 8003b6c:	f7fe fac2 	bl	80020f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <prvCheckForValidListAndQueue+0x60>)
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <prvCheckForValidListAndQueue+0x58>)
 8003b74:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <prvCheckForValidListAndQueue+0x64>)
 8003b78:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <prvCheckForValidListAndQueue+0x5c>)
 8003b7a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	210c      	movs	r1, #12
 8003b80:	200a      	movs	r0, #10
 8003b82:	f7fe fbd7 	bl	8002334 <xQueueGenericCreate>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <prvCheckForValidListAndQueue+0x54>)
 8003b8a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <prvCheckForValidListAndQueue+0x54>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <prvCheckForValidListAndQueue+0x54>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4908      	ldr	r1, [pc, #32]	; (8003bbc <prvCheckForValidListAndQueue+0x68>)
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fdaa 	bl	80026f4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ba0:	f000 f96a 	bl	8003e78 <vPortExitCritical>
    }
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000254 	.word	0x20000254
 8003bac:	20000224 	.word	0x20000224
 8003bb0:	20000238 	.word	0x20000238
 8003bb4:	2000024c 	.word	0x2000024c
 8003bb8:	20000250 	.word	0x20000250
 8003bbc:	08004e68 	.word	0x08004e68

08003bc0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b04      	subs	r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003bf0:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <pxPortInitialiseStack+0x64>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3b14      	subs	r3, #20
 8003bfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3b04      	subs	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f06f 0202 	mvn.w	r2, #2
 8003c0e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b20      	subs	r3, #32
 8003c14:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	08003c29 	.word	0x08003c29

08003c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <prvTaskExitError+0x54>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3a:	d00a      	beq.n	8003c52 <prvTaskExitError+0x2a>
        __asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	60fb      	str	r3, [r7, #12]
    }
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <prvTaskExitError+0x28>
        __asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60bb      	str	r3, [r7, #8]
    }
 8003c64:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c66:	bf00      	nop
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0fc      	beq.n	8003c68 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	20000010 	.word	0x20000010

08003c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <pxCurrentTCBConst2>)
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	6808      	ldr	r0, [r1, #0]
 8003c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8a:	f380 8809 	msr	PSP, r0
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8811 	msr	BASEPRI, r0
 8003c9a:	4770      	bx	lr
 8003c9c:	f3af 8000 	nop.w

08003ca0 <pxCurrentTCBConst2>:
 8003ca0:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop

08003ca8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ca8:	4808      	ldr	r0, [pc, #32]	; (8003ccc <prvPortStartFirstTask+0x24>)
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	6800      	ldr	r0, [r0, #0]
 8003cae:	f380 8808 	msr	MSP, r0
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f380 8814 	msr	CONTROL, r0
 8003cba:	b662      	cpsie	i
 8003cbc:	b661      	cpsie	f
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	df00      	svc	0
 8003cc8:	bf00      	nop
 8003cca:	0000      	.short	0x0000
 8003ccc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop

08003cd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cda:	4b46      	ldr	r3, [pc, #280]	; (8003df4 <xPortStartScheduler+0x120>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a46      	ldr	r2, [pc, #280]	; (8003df8 <xPortStartScheduler+0x124>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d10a      	bne.n	8003cfa <xPortStartScheduler+0x26>
        __asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	613b      	str	r3, [r7, #16]
    }
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <xPortStartScheduler+0x120>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <xPortStartScheduler+0x128>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10a      	bne.n	8003d1a <xPortStartScheduler+0x46>
        __asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	60fb      	str	r3, [r7, #12]
    }
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <xPortStartScheduler+0x12c>)
 8003d1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b31      	ldr	r3, [pc, #196]	; (8003e04 <xPortStartScheduler+0x130>)
 8003d40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <xPortStartScheduler+0x134>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d48:	e009      	b.n	8003d5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <xPortStartScheduler+0x134>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a2d      	ldr	r2, [pc, #180]	; (8003e08 <xPortStartScheduler+0x134>)
 8003d52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d0ef      	beq.n	8003d4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d6a:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <xPortStartScheduler+0x134>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1c3 0307 	rsb	r3, r3, #7
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d00a      	beq.n	8003d8c <xPortStartScheduler+0xb8>
        __asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	60bb      	str	r3, [r7, #8]
    }
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <xPortStartScheduler+0x134>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <xPortStartScheduler+0x134>)
 8003d94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <xPortStartScheduler+0x134>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d9e:	4a1a      	ldr	r2, [pc, #104]	; (8003e08 <xPortStartScheduler+0x134>)
 8003da0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <xPortStartScheduler+0x138>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <xPortStartScheduler+0x138>)
 8003db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003db4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <xPortStartScheduler+0x138>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <xPortStartScheduler+0x138>)
 8003dbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003dc2:	f000 f8db 	bl	8003f7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <xPortStartScheduler+0x13c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003dcc:	f000 f8fa 	bl	8003fc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <xPortStartScheduler+0x140>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a0f      	ldr	r2, [pc, #60]	; (8003e14 <xPortStartScheduler+0x140>)
 8003dd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003dda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ddc:	f7ff ff64 	bl	8003ca8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003de0:	f7ff f8f6 	bl	8002fd0 <vTaskSwitchContext>
    prvTaskExitError();
 8003de4:	f7ff ff20 	bl	8003c28 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	e000ed00 	.word	0xe000ed00
 8003df8:	410fc271 	.word	0x410fc271
 8003dfc:	410fc270 	.word	0x410fc270
 8003e00:	e000e400 	.word	0xe000e400
 8003e04:	20000260 	.word	0x20000260
 8003e08:	20000264 	.word	0x20000264
 8003e0c:	e000ed20 	.word	0xe000ed20
 8003e10:	20000010 	.word	0x20000010
 8003e14:	e000ef34 	.word	0xe000ef34

08003e18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
    }
 8003e30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <vPortEnterCritical+0x58>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <vPortEnterCritical+0x58>)
 8003e3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <vPortEnterCritical+0x58>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d10f      	bne.n	8003e64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <vPortEnterCritical+0x5c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	603b      	str	r3, [r7, #0]
    }
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <vPortEnterCritical+0x4a>
    }
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	20000010 	.word	0x20000010
 8003e74:	e000ed04 	.word	0xe000ed04

08003e78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <vPortExitCritical+0x50>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <vPortExitCritical+0x24>
        __asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	607b      	str	r3, [r7, #4]
    }
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <vPortExitCritical+0x50>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <vPortExitCritical+0x50>)
 8003ea4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <vPortExitCritical+0x50>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <vPortExitCritical+0x42>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003eb8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000010 	.word	0x20000010
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ed0:	f3ef 8009 	mrs	r0, PSP
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <pxCurrentTCBConst>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f01e 0f10 	tst.w	lr, #16
 8003ee0:	bf08      	it	eq
 8003ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ef4:	f380 8811 	msr	BASEPRI, r0
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f7ff f866 	bl	8002fd0 <vTaskSwitchContext>
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f380 8811 	msr	BASEPRI, r0
 8003f0c:	bc09      	pop	{r0, r3}
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	6808      	ldr	r0, [r1, #0]
 8003f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f16:	f01e 0f10 	tst.w	lr, #16
 8003f1a:	bf08      	it	eq
 8003f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f20:	f380 8809 	msr	PSP, r0
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	f3af 8000 	nop.w

08003f30 <pxCurrentTCBConst>:
 8003f30:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop

08003f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
    }
 8003f50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f52:	f7fe ff27 	bl	8002da4 <xTaskIncrementTick>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <SysTick_Handler+0x40>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f383 8811 	msr	BASEPRI, r3
    }
 8003f6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <vPortSetupTimerInterrupt+0x34>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <vPortSetupTimerInterrupt+0x38>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <vPortSetupTimerInterrupt+0x3c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <vPortSetupTimerInterrupt+0x40>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <vPortSetupTimerInterrupt+0x44>)
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f9e:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <vPortSetupTimerInterrupt+0x34>)
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	601a      	str	r2, [r3, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000e010 	.word	0xe000e010
 8003fb4:	e000e018 	.word	0xe000e018
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	10624dd3 	.word	0x10624dd3
 8003fc0:	e000e014 	.word	0xe000e014

08003fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fd4 <vPortEnableVFP+0x10>
 8003fc8:	6801      	ldr	r1, [r0, #0]
 8003fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003fce:	6001      	str	r1, [r0, #0]
 8003fd0:	4770      	bx	lr
 8003fd2:	0000      	.short	0x0000
 8003fd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop

08003fdc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003fe8:	f7fe fdc2 	bl	8002b70 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <pvPortMalloc+0x160>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ff4:	f000 f908 	bl	8004208 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d012      	beq.n	8004024 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003ffe:	2208      	movs	r2, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	3308      	adds	r3, #8
 800400a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	43db      	mvns	r3, r3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d804      	bhi.n	8004020 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	4413      	add	r3, r2
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e001      	b.n	8004024 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	db70      	blt.n	800410c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d06d      	beq.n	800410c <pvPortMalloc+0x130>
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <pvPortMalloc+0x164>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	429a      	cmp	r2, r3
 8004038:	d868      	bhi.n	800410c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800403a:	4b42      	ldr	r3, [pc, #264]	; (8004144 <pvPortMalloc+0x168>)
 800403c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <pvPortMalloc+0x168>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004044:	e004      	b.n	8004050 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d903      	bls.n	8004062 <pvPortMalloc+0x86>
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f1      	bne.n	8004046 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <pvPortMalloc+0x160>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	429a      	cmp	r2, r3
 800406a:	d04f      	beq.n	800410c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2208      	movs	r2, #8
 8004072:	4413      	add	r3, r2
 8004074:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	1ad2      	subs	r2, r2, r3
 8004086:	2308      	movs	r3, #8
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	429a      	cmp	r2, r3
 800408c:	d91f      	bls.n	80040ce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <pvPortMalloc+0xda>
        __asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	613b      	str	r3, [r7, #16]
    }
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	1ad2      	subs	r2, r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040c8:	6978      	ldr	r0, [r7, #20]
 80040ca:	f000 f8f9 	bl	80042c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <pvPortMalloc+0x164>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	4a19      	ldr	r2, [pc, #100]	; (8004140 <pvPortMalloc+0x164>)
 80040da:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <pvPortMalloc+0x164>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <pvPortMalloc+0x16c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d203      	bcs.n	80040f0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <pvPortMalloc+0x164>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <pvPortMalloc+0x16c>)
 80040ee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <pvPortMalloc+0x170>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	4a10      	ldr	r2, [pc, #64]	; (800414c <pvPortMalloc+0x170>)
 800410a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800410c:	f7fe fd3e 	bl	8002b8c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <pvPortMalloc+0x154>
        __asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60fb      	str	r3, [r7, #12]
    }
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <pvPortMalloc+0x152>
    return pvReturn;
 8004130:	69fb      	ldr	r3, [r7, #28]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3728      	adds	r7, #40	; 0x28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20012e70 	.word	0x20012e70
 8004140:	20012e74 	.word	0x20012e74
 8004144:	20012e68 	.word	0x20012e68
 8004148:	20012e78 	.word	0x20012e78
 800414c:	20012e7c 	.word	0x20012e7c

08004150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d049      	beq.n	80041f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004162:	2308      	movs	r3, #8
 8004164:	425b      	negs	r3, r3
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <vPortFree+0x3e>
        __asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
    }
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <vPortFree+0x5c>
        __asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60bb      	str	r3, [r7, #8]
    }
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	0fdb      	lsrs	r3, r3, #31
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01c      	beq.n	80041f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d118      	bne.n	80041f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80041d0:	f7fe fcce 	bl	8002b70 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <vPortFree+0xb0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4413      	add	r3, r2
 80041de:	4a08      	ldr	r2, [pc, #32]	; (8004200 <vPortFree+0xb0>)
 80041e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041e2:	6938      	ldr	r0, [r7, #16]
 80041e4:	f000 f86c 	bl	80042c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <vPortFree+0xb4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	4a05      	ldr	r2, [pc, #20]	; (8004204 <vPortFree+0xb4>)
 80041f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80041f2:	f7fe fccb 	bl	8002b8c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20012e74 	.word	0x20012e74
 8004204:	20012e80 	.word	0x20012e80

08004208 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800420e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004212:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004214:	4b25      	ldr	r3, [pc, #148]	; (80042ac <prvHeapInit+0xa4>)
 8004216:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3307      	adds	r3, #7
 8004226:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <prvHeapInit+0xa4>)
 8004238:	4413      	add	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <prvHeapInit+0xa8>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004246:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <prvHeapInit+0xa8>)
 8004248:	2200      	movs	r2, #0
 800424a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4413      	add	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004254:	2208      	movs	r2, #8
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0307 	bic.w	r3, r3, #7
 8004262:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <prvHeapInit+0xac>)
 8004268:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <prvHeapInit+0xac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <prvHeapInit+0xac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	1ad2      	subs	r2, r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <prvHeapInit+0xac>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <prvHeapInit+0xb0>)
 8004296:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <prvHeapInit+0xb4>)
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	20000268 	.word	0x20000268
 80042b0:	20012e68 	.word	0x20012e68
 80042b4:	20012e70 	.word	0x20012e70
 80042b8:	20012e78 	.word	0x20012e78
 80042bc:	20012e74 	.word	0x20012e74

080042c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042c8:	4b28      	ldr	r3, [pc, #160]	; (800436c <prvInsertBlockIntoFreeList+0xac>)
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e002      	b.n	80042d4 <prvInsertBlockIntoFreeList+0x14>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d8f7      	bhi.n	80042ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4413      	add	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d108      	bne.n	8004302 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	441a      	add	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	441a      	add	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d118      	bne.n	8004348 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <prvInsertBlockIntoFreeList+0xb0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d00d      	beq.n	800433e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	441a      	add	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e008      	b.n	8004350 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <prvInsertBlockIntoFreeList+0xb0>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e003      	b.n	8004350 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d002      	beq.n	800435e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20012e68 	.word	0x20012e68
 8004370:	20012e70 	.word	0x20012e70

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4d0d      	ldr	r5, [pc, #52]	; (80043ac <__libc_init_array+0x38>)
 8004378:	4c0d      	ldr	r4, [pc, #52]	; (80043b0 <__libc_init_array+0x3c>)
 800437a:	1b64      	subs	r4, r4, r5
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	2600      	movs	r6, #0
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	4d0b      	ldr	r5, [pc, #44]	; (80043b4 <__libc_init_array+0x40>)
 8004386:	4c0c      	ldr	r4, [pc, #48]	; (80043b8 <__libc_init_array+0x44>)
 8004388:	f000 fd3a 	bl	8004e00 <_init>
 800438c:	1b64      	subs	r4, r4, r5
 800438e:	10a4      	asrs	r4, r4, #2
 8004390:	2600      	movs	r6, #0
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f855 3b04 	ldr.w	r3, [r5], #4
 800439c:	4798      	blx	r3
 800439e:	3601      	adds	r6, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a6:	4798      	blx	r3
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08004ef4 	.word	0x08004ef4
 80043b0:	08004ef4 	.word	0x08004ef4
 80043b4:	08004ef4 	.word	0x08004ef4
 80043b8:	08004ef8 	.word	0x08004ef8

080043bc <memcpy>:
 80043bc:	440a      	add	r2, r1
 80043be:	4291      	cmp	r1, r2
 80043c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043c4:	d100      	bne.n	80043c8 <memcpy+0xc>
 80043c6:	4770      	bx	lr
 80043c8:	b510      	push	{r4, lr}
 80043ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d2:	4291      	cmp	r1, r2
 80043d4:	d1f9      	bne.n	80043ca <memcpy+0xe>
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <memset>:
 80043d8:	4402      	add	r2, r0
 80043da:	4603      	mov	r3, r0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d100      	bne.n	80043e2 <memset+0xa>
 80043e0:	4770      	bx	lr
 80043e2:	f803 1b01 	strb.w	r1, [r3], #1
 80043e6:	e7f9      	b.n	80043dc <memset+0x4>

080043e8 <_puts_r>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	460e      	mov	r6, r1
 80043ec:	4605      	mov	r5, r0
 80043ee:	b118      	cbz	r0, 80043f8 <_puts_r+0x10>
 80043f0:	6983      	ldr	r3, [r0, #24]
 80043f2:	b90b      	cbnz	r3, 80043f8 <_puts_r+0x10>
 80043f4:	f000 fa48 	bl	8004888 <__sinit>
 80043f8:	69ab      	ldr	r3, [r5, #24]
 80043fa:	68ac      	ldr	r4, [r5, #8]
 80043fc:	b913      	cbnz	r3, 8004404 <_puts_r+0x1c>
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 fa42 	bl	8004888 <__sinit>
 8004404:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <_puts_r+0xd0>)
 8004406:	429c      	cmp	r4, r3
 8004408:	d120      	bne.n	800444c <_puts_r+0x64>
 800440a:	686c      	ldr	r4, [r5, #4]
 800440c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800440e:	07db      	lsls	r3, r3, #31
 8004410:	d405      	bmi.n	800441e <_puts_r+0x36>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	0598      	lsls	r0, r3, #22
 8004416:	d402      	bmi.n	800441e <_puts_r+0x36>
 8004418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800441a:	f000 fad3 	bl	80049c4 <__retarget_lock_acquire_recursive>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	0719      	lsls	r1, r3, #28
 8004422:	d51d      	bpl.n	8004460 <_puts_r+0x78>
 8004424:	6923      	ldr	r3, [r4, #16]
 8004426:	b1db      	cbz	r3, 8004460 <_puts_r+0x78>
 8004428:	3e01      	subs	r6, #1
 800442a:	68a3      	ldr	r3, [r4, #8]
 800442c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004430:	3b01      	subs	r3, #1
 8004432:	60a3      	str	r3, [r4, #8]
 8004434:	bb39      	cbnz	r1, 8004486 <_puts_r+0x9e>
 8004436:	2b00      	cmp	r3, #0
 8004438:	da38      	bge.n	80044ac <_puts_r+0xc4>
 800443a:	4622      	mov	r2, r4
 800443c:	210a      	movs	r1, #10
 800443e:	4628      	mov	r0, r5
 8004440:	f000 f848 	bl	80044d4 <__swbuf_r>
 8004444:	3001      	adds	r0, #1
 8004446:	d011      	beq.n	800446c <_puts_r+0x84>
 8004448:	250a      	movs	r5, #10
 800444a:	e011      	b.n	8004470 <_puts_r+0x88>
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <_puts_r+0xd4>)
 800444e:	429c      	cmp	r4, r3
 8004450:	d101      	bne.n	8004456 <_puts_r+0x6e>
 8004452:	68ac      	ldr	r4, [r5, #8]
 8004454:	e7da      	b.n	800440c <_puts_r+0x24>
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <_puts_r+0xd8>)
 8004458:	429c      	cmp	r4, r3
 800445a:	bf08      	it	eq
 800445c:	68ec      	ldreq	r4, [r5, #12]
 800445e:	e7d5      	b.n	800440c <_puts_r+0x24>
 8004460:	4621      	mov	r1, r4
 8004462:	4628      	mov	r0, r5
 8004464:	f000 f888 	bl	8004578 <__swsetup_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	d0dd      	beq.n	8004428 <_puts_r+0x40>
 800446c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004472:	07da      	lsls	r2, r3, #31
 8004474:	d405      	bmi.n	8004482 <_puts_r+0x9a>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	059b      	lsls	r3, r3, #22
 800447a:	d402      	bmi.n	8004482 <_puts_r+0x9a>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f000 faa2 	bl	80049c6 <__retarget_lock_release_recursive>
 8004482:	4628      	mov	r0, r5
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	2b00      	cmp	r3, #0
 8004488:	da04      	bge.n	8004494 <_puts_r+0xac>
 800448a:	69a2      	ldr	r2, [r4, #24]
 800448c:	429a      	cmp	r2, r3
 800448e:	dc06      	bgt.n	800449e <_puts_r+0xb6>
 8004490:	290a      	cmp	r1, #10
 8004492:	d004      	beq.n	800449e <_puts_r+0xb6>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	6022      	str	r2, [r4, #0]
 800449a:	7019      	strb	r1, [r3, #0]
 800449c:	e7c5      	b.n	800442a <_puts_r+0x42>
 800449e:	4622      	mov	r2, r4
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 f817 	bl	80044d4 <__swbuf_r>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d1bf      	bne.n	800442a <_puts_r+0x42>
 80044aa:	e7df      	b.n	800446c <_puts_r+0x84>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	250a      	movs	r5, #10
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	701d      	strb	r5, [r3, #0]
 80044b6:	e7db      	b.n	8004470 <_puts_r+0x88>
 80044b8:	08004eac 	.word	0x08004eac
 80044bc:	08004ecc 	.word	0x08004ecc
 80044c0:	08004e8c 	.word	0x08004e8c

080044c4 <puts>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <puts+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f7ff bf8d 	b.w	80043e8 <_puts_r>
 80044ce:	bf00      	nop
 80044d0:	20000014 	.word	0x20000014

080044d4 <__swbuf_r>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	460e      	mov	r6, r1
 80044d8:	4614      	mov	r4, r2
 80044da:	4605      	mov	r5, r0
 80044dc:	b118      	cbz	r0, 80044e6 <__swbuf_r+0x12>
 80044de:	6983      	ldr	r3, [r0, #24]
 80044e0:	b90b      	cbnz	r3, 80044e6 <__swbuf_r+0x12>
 80044e2:	f000 f9d1 	bl	8004888 <__sinit>
 80044e6:	4b21      	ldr	r3, [pc, #132]	; (800456c <__swbuf_r+0x98>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d12b      	bne.n	8004544 <__swbuf_r+0x70>
 80044ec:	686c      	ldr	r4, [r5, #4]
 80044ee:	69a3      	ldr	r3, [r4, #24]
 80044f0:	60a3      	str	r3, [r4, #8]
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	071a      	lsls	r2, r3, #28
 80044f6:	d52f      	bpl.n	8004558 <__swbuf_r+0x84>
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	b36b      	cbz	r3, 8004558 <__swbuf_r+0x84>
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1ac0      	subs	r0, r0, r3
 8004502:	6963      	ldr	r3, [r4, #20]
 8004504:	b2f6      	uxtb	r6, r6
 8004506:	4283      	cmp	r3, r0
 8004508:	4637      	mov	r7, r6
 800450a:	dc04      	bgt.n	8004516 <__swbuf_r+0x42>
 800450c:	4621      	mov	r1, r4
 800450e:	4628      	mov	r0, r5
 8004510:	f000 f926 	bl	8004760 <_fflush_r>
 8004514:	bb30      	cbnz	r0, 8004564 <__swbuf_r+0x90>
 8004516:	68a3      	ldr	r3, [r4, #8]
 8004518:	3b01      	subs	r3, #1
 800451a:	60a3      	str	r3, [r4, #8]
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	701e      	strb	r6, [r3, #0]
 8004524:	6963      	ldr	r3, [r4, #20]
 8004526:	3001      	adds	r0, #1
 8004528:	4283      	cmp	r3, r0
 800452a:	d004      	beq.n	8004536 <__swbuf_r+0x62>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	07db      	lsls	r3, r3, #31
 8004530:	d506      	bpl.n	8004540 <__swbuf_r+0x6c>
 8004532:	2e0a      	cmp	r6, #10
 8004534:	d104      	bne.n	8004540 <__swbuf_r+0x6c>
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 f911 	bl	8004760 <_fflush_r>
 800453e:	b988      	cbnz	r0, 8004564 <__swbuf_r+0x90>
 8004540:	4638      	mov	r0, r7
 8004542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <__swbuf_r+0x9c>)
 8004546:	429c      	cmp	r4, r3
 8004548:	d101      	bne.n	800454e <__swbuf_r+0x7a>
 800454a:	68ac      	ldr	r4, [r5, #8]
 800454c:	e7cf      	b.n	80044ee <__swbuf_r+0x1a>
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <__swbuf_r+0xa0>)
 8004550:	429c      	cmp	r4, r3
 8004552:	bf08      	it	eq
 8004554:	68ec      	ldreq	r4, [r5, #12]
 8004556:	e7ca      	b.n	80044ee <__swbuf_r+0x1a>
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f80c 	bl	8004578 <__swsetup_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	d0cb      	beq.n	80044fc <__swbuf_r+0x28>
 8004564:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004568:	e7ea      	b.n	8004540 <__swbuf_r+0x6c>
 800456a:	bf00      	nop
 800456c:	08004eac 	.word	0x08004eac
 8004570:	08004ecc 	.word	0x08004ecc
 8004574:	08004e8c 	.word	0x08004e8c

08004578 <__swsetup_r>:
 8004578:	4b32      	ldr	r3, [pc, #200]	; (8004644 <__swsetup_r+0xcc>)
 800457a:	b570      	push	{r4, r5, r6, lr}
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	4606      	mov	r6, r0
 8004580:	460c      	mov	r4, r1
 8004582:	b125      	cbz	r5, 800458e <__swsetup_r+0x16>
 8004584:	69ab      	ldr	r3, [r5, #24]
 8004586:	b913      	cbnz	r3, 800458e <__swsetup_r+0x16>
 8004588:	4628      	mov	r0, r5
 800458a:	f000 f97d 	bl	8004888 <__sinit>
 800458e:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <__swsetup_r+0xd0>)
 8004590:	429c      	cmp	r4, r3
 8004592:	d10f      	bne.n	80045b4 <__swsetup_r+0x3c>
 8004594:	686c      	ldr	r4, [r5, #4]
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800459c:	0719      	lsls	r1, r3, #28
 800459e:	d42c      	bmi.n	80045fa <__swsetup_r+0x82>
 80045a0:	06dd      	lsls	r5, r3, #27
 80045a2:	d411      	bmi.n	80045c8 <__swsetup_r+0x50>
 80045a4:	2309      	movs	r3, #9
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b2:	e03e      	b.n	8004632 <__swsetup_r+0xba>
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <__swsetup_r+0xd4>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d101      	bne.n	80045be <__swsetup_r+0x46>
 80045ba:	68ac      	ldr	r4, [r5, #8]
 80045bc:	e7eb      	b.n	8004596 <__swsetup_r+0x1e>
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <__swsetup_r+0xd8>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	bf08      	it	eq
 80045c4:	68ec      	ldreq	r4, [r5, #12]
 80045c6:	e7e6      	b.n	8004596 <__swsetup_r+0x1e>
 80045c8:	0758      	lsls	r0, r3, #29
 80045ca:	d512      	bpl.n	80045f2 <__swsetup_r+0x7a>
 80045cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ce:	b141      	cbz	r1, 80045e2 <__swsetup_r+0x6a>
 80045d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d4:	4299      	cmp	r1, r3
 80045d6:	d002      	beq.n	80045de <__swsetup_r+0x66>
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 fa5b 	bl	8004a94 <_free_r>
 80045de:	2300      	movs	r3, #0
 80045e0:	6363      	str	r3, [r4, #52]	; 0x34
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045e8:	81a3      	strh	r3, [r4, #12]
 80045ea:	2300      	movs	r3, #0
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	b94b      	cbnz	r3, 8004612 <__swsetup_r+0x9a>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d003      	beq.n	8004612 <__swsetup_r+0x9a>
 800460a:	4621      	mov	r1, r4
 800460c:	4630      	mov	r0, r6
 800460e:	f000 fa01 	bl	8004a14 <__smakebuf_r>
 8004612:	89a0      	ldrh	r0, [r4, #12]
 8004614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004618:	f010 0301 	ands.w	r3, r0, #1
 800461c:	d00a      	beq.n	8004634 <__swsetup_r+0xbc>
 800461e:	2300      	movs	r3, #0
 8004620:	60a3      	str	r3, [r4, #8]
 8004622:	6963      	ldr	r3, [r4, #20]
 8004624:	425b      	negs	r3, r3
 8004626:	61a3      	str	r3, [r4, #24]
 8004628:	6923      	ldr	r3, [r4, #16]
 800462a:	b943      	cbnz	r3, 800463e <__swsetup_r+0xc6>
 800462c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004630:	d1ba      	bne.n	80045a8 <__swsetup_r+0x30>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	0781      	lsls	r1, r0, #30
 8004636:	bf58      	it	pl
 8004638:	6963      	ldrpl	r3, [r4, #20]
 800463a:	60a3      	str	r3, [r4, #8]
 800463c:	e7f4      	b.n	8004628 <__swsetup_r+0xb0>
 800463e:	2000      	movs	r0, #0
 8004640:	e7f7      	b.n	8004632 <__swsetup_r+0xba>
 8004642:	bf00      	nop
 8004644:	20000014 	.word	0x20000014
 8004648:	08004eac 	.word	0x08004eac
 800464c:	08004ecc 	.word	0x08004ecc
 8004650:	08004e8c 	.word	0x08004e8c

08004654 <__sflush_r>:
 8004654:	898a      	ldrh	r2, [r1, #12]
 8004656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465a:	4605      	mov	r5, r0
 800465c:	0710      	lsls	r0, r2, #28
 800465e:	460c      	mov	r4, r1
 8004660:	d458      	bmi.n	8004714 <__sflush_r+0xc0>
 8004662:	684b      	ldr	r3, [r1, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	dc05      	bgt.n	8004674 <__sflush_r+0x20>
 8004668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	dc02      	bgt.n	8004674 <__sflush_r+0x20>
 800466e:	2000      	movs	r0, #0
 8004670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004676:	2e00      	cmp	r6, #0
 8004678:	d0f9      	beq.n	800466e <__sflush_r+0x1a>
 800467a:	2300      	movs	r3, #0
 800467c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004680:	682f      	ldr	r7, [r5, #0]
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	d032      	beq.n	80046ec <__sflush_r+0x98>
 8004686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	075a      	lsls	r2, r3, #29
 800468c:	d505      	bpl.n	800469a <__sflush_r+0x46>
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	1ac0      	subs	r0, r0, r3
 8004692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004694:	b10b      	cbz	r3, 800469a <__sflush_r+0x46>
 8004696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004698:	1ac0      	subs	r0, r0, r3
 800469a:	2300      	movs	r3, #0
 800469c:	4602      	mov	r2, r0
 800469e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046a0:	6a21      	ldr	r1, [r4, #32]
 80046a2:	4628      	mov	r0, r5
 80046a4:	47b0      	blx	r6
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	d106      	bne.n	80046ba <__sflush_r+0x66>
 80046ac:	6829      	ldr	r1, [r5, #0]
 80046ae:	291d      	cmp	r1, #29
 80046b0:	d82c      	bhi.n	800470c <__sflush_r+0xb8>
 80046b2:	4a2a      	ldr	r2, [pc, #168]	; (800475c <__sflush_r+0x108>)
 80046b4:	40ca      	lsrs	r2, r1
 80046b6:	07d6      	lsls	r6, r2, #31
 80046b8:	d528      	bpl.n	800470c <__sflush_r+0xb8>
 80046ba:	2200      	movs	r2, #0
 80046bc:	6062      	str	r2, [r4, #4]
 80046be:	04d9      	lsls	r1, r3, #19
 80046c0:	6922      	ldr	r2, [r4, #16]
 80046c2:	6022      	str	r2, [r4, #0]
 80046c4:	d504      	bpl.n	80046d0 <__sflush_r+0x7c>
 80046c6:	1c42      	adds	r2, r0, #1
 80046c8:	d101      	bne.n	80046ce <__sflush_r+0x7a>
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	b903      	cbnz	r3, 80046d0 <__sflush_r+0x7c>
 80046ce:	6560      	str	r0, [r4, #84]	; 0x54
 80046d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046d2:	602f      	str	r7, [r5, #0]
 80046d4:	2900      	cmp	r1, #0
 80046d6:	d0ca      	beq.n	800466e <__sflush_r+0x1a>
 80046d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046dc:	4299      	cmp	r1, r3
 80046de:	d002      	beq.n	80046e6 <__sflush_r+0x92>
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 f9d7 	bl	8004a94 <_free_r>
 80046e6:	2000      	movs	r0, #0
 80046e8:	6360      	str	r0, [r4, #52]	; 0x34
 80046ea:	e7c1      	b.n	8004670 <__sflush_r+0x1c>
 80046ec:	6a21      	ldr	r1, [r4, #32]
 80046ee:	2301      	movs	r3, #1
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b0      	blx	r6
 80046f4:	1c41      	adds	r1, r0, #1
 80046f6:	d1c7      	bne.n	8004688 <__sflush_r+0x34>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0c4      	beq.n	8004688 <__sflush_r+0x34>
 80046fe:	2b1d      	cmp	r3, #29
 8004700:	d001      	beq.n	8004706 <__sflush_r+0xb2>
 8004702:	2b16      	cmp	r3, #22
 8004704:	d101      	bne.n	800470a <__sflush_r+0xb6>
 8004706:	602f      	str	r7, [r5, #0]
 8004708:	e7b1      	b.n	800466e <__sflush_r+0x1a>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	e7ad      	b.n	8004670 <__sflush_r+0x1c>
 8004714:	690f      	ldr	r7, [r1, #16]
 8004716:	2f00      	cmp	r7, #0
 8004718:	d0a9      	beq.n	800466e <__sflush_r+0x1a>
 800471a:	0793      	lsls	r3, r2, #30
 800471c:	680e      	ldr	r6, [r1, #0]
 800471e:	bf08      	it	eq
 8004720:	694b      	ldreq	r3, [r1, #20]
 8004722:	600f      	str	r7, [r1, #0]
 8004724:	bf18      	it	ne
 8004726:	2300      	movne	r3, #0
 8004728:	eba6 0807 	sub.w	r8, r6, r7
 800472c:	608b      	str	r3, [r1, #8]
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	dd9c      	ble.n	800466e <__sflush_r+0x1a>
 8004734:	6a21      	ldr	r1, [r4, #32]
 8004736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004738:	4643      	mov	r3, r8
 800473a:	463a      	mov	r2, r7
 800473c:	4628      	mov	r0, r5
 800473e:	47b0      	blx	r6
 8004740:	2800      	cmp	r0, #0
 8004742:	dc06      	bgt.n	8004752 <__sflush_r+0xfe>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004750:	e78e      	b.n	8004670 <__sflush_r+0x1c>
 8004752:	4407      	add	r7, r0
 8004754:	eba8 0800 	sub.w	r8, r8, r0
 8004758:	e7e9      	b.n	800472e <__sflush_r+0xda>
 800475a:	bf00      	nop
 800475c:	20400001 	.word	0x20400001

08004760 <_fflush_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	690b      	ldr	r3, [r1, #16]
 8004764:	4605      	mov	r5, r0
 8004766:	460c      	mov	r4, r1
 8004768:	b913      	cbnz	r3, 8004770 <_fflush_r+0x10>
 800476a:	2500      	movs	r5, #0
 800476c:	4628      	mov	r0, r5
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	b118      	cbz	r0, 800477a <_fflush_r+0x1a>
 8004772:	6983      	ldr	r3, [r0, #24]
 8004774:	b90b      	cbnz	r3, 800477a <_fflush_r+0x1a>
 8004776:	f000 f887 	bl	8004888 <__sinit>
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <_fflush_r+0x6c>)
 800477c:	429c      	cmp	r4, r3
 800477e:	d11b      	bne.n	80047b8 <_fflush_r+0x58>
 8004780:	686c      	ldr	r4, [r5, #4]
 8004782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ef      	beq.n	800476a <_fflush_r+0xa>
 800478a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800478c:	07d0      	lsls	r0, r2, #31
 800478e:	d404      	bmi.n	800479a <_fflush_r+0x3a>
 8004790:	0599      	lsls	r1, r3, #22
 8004792:	d402      	bmi.n	800479a <_fflush_r+0x3a>
 8004794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004796:	f000 f915 	bl	80049c4 <__retarget_lock_acquire_recursive>
 800479a:	4628      	mov	r0, r5
 800479c:	4621      	mov	r1, r4
 800479e:	f7ff ff59 	bl	8004654 <__sflush_r>
 80047a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a4:	07da      	lsls	r2, r3, #31
 80047a6:	4605      	mov	r5, r0
 80047a8:	d4e0      	bmi.n	800476c <_fflush_r+0xc>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	059b      	lsls	r3, r3, #22
 80047ae:	d4dd      	bmi.n	800476c <_fflush_r+0xc>
 80047b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047b2:	f000 f908 	bl	80049c6 <__retarget_lock_release_recursive>
 80047b6:	e7d9      	b.n	800476c <_fflush_r+0xc>
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <_fflush_r+0x70>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d101      	bne.n	80047c2 <_fflush_r+0x62>
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	e7df      	b.n	8004782 <_fflush_r+0x22>
 80047c2:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <_fflush_r+0x74>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	bf08      	it	eq
 80047c8:	68ec      	ldreq	r4, [r5, #12]
 80047ca:	e7da      	b.n	8004782 <_fflush_r+0x22>
 80047cc:	08004eac 	.word	0x08004eac
 80047d0:	08004ecc 	.word	0x08004ecc
 80047d4:	08004e8c 	.word	0x08004e8c

080047d8 <std>:
 80047d8:	2300      	movs	r3, #0
 80047da:	b510      	push	{r4, lr}
 80047dc:	4604      	mov	r4, r0
 80047de:	e9c0 3300 	strd	r3, r3, [r0]
 80047e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047e6:	6083      	str	r3, [r0, #8]
 80047e8:	8181      	strh	r1, [r0, #12]
 80047ea:	6643      	str	r3, [r0, #100]	; 0x64
 80047ec:	81c2      	strh	r2, [r0, #14]
 80047ee:	6183      	str	r3, [r0, #24]
 80047f0:	4619      	mov	r1, r3
 80047f2:	2208      	movs	r2, #8
 80047f4:	305c      	adds	r0, #92	; 0x5c
 80047f6:	f7ff fdef 	bl	80043d8 <memset>
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <std+0x38>)
 80047fc:	6263      	str	r3, [r4, #36]	; 0x24
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <std+0x3c>)
 8004800:	62a3      	str	r3, [r4, #40]	; 0x28
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <std+0x40>)
 8004804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <std+0x44>)
 8004808:	6224      	str	r4, [r4, #32]
 800480a:	6323      	str	r3, [r4, #48]	; 0x30
 800480c:	bd10      	pop	{r4, pc}
 800480e:	bf00      	nop
 8004810:	08004c75 	.word	0x08004c75
 8004814:	08004c97 	.word	0x08004c97
 8004818:	08004ccf 	.word	0x08004ccf
 800481c:	08004cf3 	.word	0x08004cf3

08004820 <_cleanup_r>:
 8004820:	4901      	ldr	r1, [pc, #4]	; (8004828 <_cleanup_r+0x8>)
 8004822:	f000 b8af 	b.w	8004984 <_fwalk_reent>
 8004826:	bf00      	nop
 8004828:	08004761 	.word	0x08004761

0800482c <__sfmoreglue>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	2268      	movs	r2, #104	; 0x68
 8004830:	1e4d      	subs	r5, r1, #1
 8004832:	4355      	muls	r5, r2
 8004834:	460e      	mov	r6, r1
 8004836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800483a:	f000 f997 	bl	8004b6c <_malloc_r>
 800483e:	4604      	mov	r4, r0
 8004840:	b140      	cbz	r0, 8004854 <__sfmoreglue+0x28>
 8004842:	2100      	movs	r1, #0
 8004844:	e9c0 1600 	strd	r1, r6, [r0]
 8004848:	300c      	adds	r0, #12
 800484a:	60a0      	str	r0, [r4, #8]
 800484c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004850:	f7ff fdc2 	bl	80043d8 <memset>
 8004854:	4620      	mov	r0, r4
 8004856:	bd70      	pop	{r4, r5, r6, pc}

08004858 <__sfp_lock_acquire>:
 8004858:	4801      	ldr	r0, [pc, #4]	; (8004860 <__sfp_lock_acquire+0x8>)
 800485a:	f000 b8b3 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 800485e:	bf00      	nop
 8004860:	20012e85 	.word	0x20012e85

08004864 <__sfp_lock_release>:
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <__sfp_lock_release+0x8>)
 8004866:	f000 b8ae 	b.w	80049c6 <__retarget_lock_release_recursive>
 800486a:	bf00      	nop
 800486c:	20012e85 	.word	0x20012e85

08004870 <__sinit_lock_acquire>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__sinit_lock_acquire+0x8>)
 8004872:	f000 b8a7 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 8004876:	bf00      	nop
 8004878:	20012e86 	.word	0x20012e86

0800487c <__sinit_lock_release>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__sinit_lock_release+0x8>)
 800487e:	f000 b8a2 	b.w	80049c6 <__retarget_lock_release_recursive>
 8004882:	bf00      	nop
 8004884:	20012e86 	.word	0x20012e86

08004888 <__sinit>:
 8004888:	b510      	push	{r4, lr}
 800488a:	4604      	mov	r4, r0
 800488c:	f7ff fff0 	bl	8004870 <__sinit_lock_acquire>
 8004890:	69a3      	ldr	r3, [r4, #24]
 8004892:	b11b      	cbz	r3, 800489c <__sinit+0x14>
 8004894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004898:	f7ff bff0 	b.w	800487c <__sinit_lock_release>
 800489c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048a0:	6523      	str	r3, [r4, #80]	; 0x50
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <__sinit+0x68>)
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <__sinit+0x6c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	bf04      	itt	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	61a3      	streq	r3, [r4, #24]
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 f820 	bl	80048f8 <__sfp>
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 f81c 	bl	80048f8 <__sfp>
 80048c0:	60a0      	str	r0, [r4, #8]
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 f818 	bl	80048f8 <__sfp>
 80048c8:	2200      	movs	r2, #0
 80048ca:	60e0      	str	r0, [r4, #12]
 80048cc:	2104      	movs	r1, #4
 80048ce:	6860      	ldr	r0, [r4, #4]
 80048d0:	f7ff ff82 	bl	80047d8 <std>
 80048d4:	68a0      	ldr	r0, [r4, #8]
 80048d6:	2201      	movs	r2, #1
 80048d8:	2109      	movs	r1, #9
 80048da:	f7ff ff7d 	bl	80047d8 <std>
 80048de:	68e0      	ldr	r0, [r4, #12]
 80048e0:	2202      	movs	r2, #2
 80048e2:	2112      	movs	r1, #18
 80048e4:	f7ff ff78 	bl	80047d8 <std>
 80048e8:	2301      	movs	r3, #1
 80048ea:	61a3      	str	r3, [r4, #24]
 80048ec:	e7d2      	b.n	8004894 <__sinit+0xc>
 80048ee:	bf00      	nop
 80048f0:	08004e88 	.word	0x08004e88
 80048f4:	08004821 	.word	0x08004821

080048f8 <__sfp>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	4607      	mov	r7, r0
 80048fc:	f7ff ffac 	bl	8004858 <__sfp_lock_acquire>
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <__sfp+0x84>)
 8004902:	681e      	ldr	r6, [r3, #0]
 8004904:	69b3      	ldr	r3, [r6, #24]
 8004906:	b913      	cbnz	r3, 800490e <__sfp+0x16>
 8004908:	4630      	mov	r0, r6
 800490a:	f7ff ffbd 	bl	8004888 <__sinit>
 800490e:	3648      	adds	r6, #72	; 0x48
 8004910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004914:	3b01      	subs	r3, #1
 8004916:	d503      	bpl.n	8004920 <__sfp+0x28>
 8004918:	6833      	ldr	r3, [r6, #0]
 800491a:	b30b      	cbz	r3, 8004960 <__sfp+0x68>
 800491c:	6836      	ldr	r6, [r6, #0]
 800491e:	e7f7      	b.n	8004910 <__sfp+0x18>
 8004920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004924:	b9d5      	cbnz	r5, 800495c <__sfp+0x64>
 8004926:	4b16      	ldr	r3, [pc, #88]	; (8004980 <__sfp+0x88>)
 8004928:	60e3      	str	r3, [r4, #12]
 800492a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800492e:	6665      	str	r5, [r4, #100]	; 0x64
 8004930:	f000 f847 	bl	80049c2 <__retarget_lock_init_recursive>
 8004934:	f7ff ff96 	bl	8004864 <__sfp_lock_release>
 8004938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800493c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004940:	6025      	str	r5, [r4, #0]
 8004942:	61a5      	str	r5, [r4, #24]
 8004944:	2208      	movs	r2, #8
 8004946:	4629      	mov	r1, r5
 8004948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800494c:	f7ff fd44 	bl	80043d8 <memset>
 8004950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004958:	4620      	mov	r0, r4
 800495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495c:	3468      	adds	r4, #104	; 0x68
 800495e:	e7d9      	b.n	8004914 <__sfp+0x1c>
 8004960:	2104      	movs	r1, #4
 8004962:	4638      	mov	r0, r7
 8004964:	f7ff ff62 	bl	800482c <__sfmoreglue>
 8004968:	4604      	mov	r4, r0
 800496a:	6030      	str	r0, [r6, #0]
 800496c:	2800      	cmp	r0, #0
 800496e:	d1d5      	bne.n	800491c <__sfp+0x24>
 8004970:	f7ff ff78 	bl	8004864 <__sfp_lock_release>
 8004974:	230c      	movs	r3, #12
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	e7ee      	b.n	8004958 <__sfp+0x60>
 800497a:	bf00      	nop
 800497c:	08004e88 	.word	0x08004e88
 8004980:	ffff0001 	.word	0xffff0001

08004984 <_fwalk_reent>:
 8004984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004988:	4606      	mov	r6, r0
 800498a:	4688      	mov	r8, r1
 800498c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004990:	2700      	movs	r7, #0
 8004992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004996:	f1b9 0901 	subs.w	r9, r9, #1
 800499a:	d505      	bpl.n	80049a8 <_fwalk_reent+0x24>
 800499c:	6824      	ldr	r4, [r4, #0]
 800499e:	2c00      	cmp	r4, #0
 80049a0:	d1f7      	bne.n	8004992 <_fwalk_reent+0xe>
 80049a2:	4638      	mov	r0, r7
 80049a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a8:	89ab      	ldrh	r3, [r5, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d907      	bls.n	80049be <_fwalk_reent+0x3a>
 80049ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049b2:	3301      	adds	r3, #1
 80049b4:	d003      	beq.n	80049be <_fwalk_reent+0x3a>
 80049b6:	4629      	mov	r1, r5
 80049b8:	4630      	mov	r0, r6
 80049ba:	47c0      	blx	r8
 80049bc:	4307      	orrs	r7, r0
 80049be:	3568      	adds	r5, #104	; 0x68
 80049c0:	e7e9      	b.n	8004996 <_fwalk_reent+0x12>

080049c2 <__retarget_lock_init_recursive>:
 80049c2:	4770      	bx	lr

080049c4 <__retarget_lock_acquire_recursive>:
 80049c4:	4770      	bx	lr

080049c6 <__retarget_lock_release_recursive>:
 80049c6:	4770      	bx	lr

080049c8 <__swhatbuf_r>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	460e      	mov	r6, r1
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	2900      	cmp	r1, #0
 80049d2:	b096      	sub	sp, #88	; 0x58
 80049d4:	4614      	mov	r4, r2
 80049d6:	461d      	mov	r5, r3
 80049d8:	da08      	bge.n	80049ec <__swhatbuf_r+0x24>
 80049da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	061a      	lsls	r2, r3, #24
 80049e4:	d410      	bmi.n	8004a08 <__swhatbuf_r+0x40>
 80049e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ea:	e00e      	b.n	8004a0a <__swhatbuf_r+0x42>
 80049ec:	466a      	mov	r2, sp
 80049ee:	f000 f9a7 	bl	8004d40 <_fstat_r>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	dbf1      	blt.n	80049da <__swhatbuf_r+0x12>
 80049f6:	9a01      	ldr	r2, [sp, #4]
 80049f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a00:	425a      	negs	r2, r3
 8004a02:	415a      	adcs	r2, r3
 8004a04:	602a      	str	r2, [r5, #0]
 8004a06:	e7ee      	b.n	80049e6 <__swhatbuf_r+0x1e>
 8004a08:	2340      	movs	r3, #64	; 0x40
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	b016      	add	sp, #88	; 0x58
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a14 <__smakebuf_r>:
 8004a14:	898b      	ldrh	r3, [r1, #12]
 8004a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a18:	079d      	lsls	r5, r3, #30
 8004a1a:	4606      	mov	r6, r0
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	d507      	bpl.n	8004a30 <__smakebuf_r+0x1c>
 8004a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	2301      	movs	r3, #1
 8004a2a:	6163      	str	r3, [r4, #20]
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	ab01      	add	r3, sp, #4
 8004a32:	466a      	mov	r2, sp
 8004a34:	f7ff ffc8 	bl	80049c8 <__swhatbuf_r>
 8004a38:	9900      	ldr	r1, [sp, #0]
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f000 f895 	bl	8004b6c <_malloc_r>
 8004a42:	b948      	cbnz	r0, 8004a58 <__smakebuf_r+0x44>
 8004a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a48:	059a      	lsls	r2, r3, #22
 8004a4a:	d4ef      	bmi.n	8004a2c <__smakebuf_r+0x18>
 8004a4c:	f023 0303 	bic.w	r3, r3, #3
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	e7e3      	b.n	8004a20 <__smakebuf_r+0xc>
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <__smakebuf_r+0x7c>)
 8004a5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	6020      	str	r0, [r4, #0]
 8004a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	9b00      	ldr	r3, [sp, #0]
 8004a68:	6163      	str	r3, [r4, #20]
 8004a6a:	9b01      	ldr	r3, [sp, #4]
 8004a6c:	6120      	str	r0, [r4, #16]
 8004a6e:	b15b      	cbz	r3, 8004a88 <__smakebuf_r+0x74>
 8004a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 f975 	bl	8004d64 <_isatty_r>
 8004a7a:	b128      	cbz	r0, 8004a88 <__smakebuf_r+0x74>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	81a3      	strh	r3, [r4, #12]
 8004a88:	89a0      	ldrh	r0, [r4, #12]
 8004a8a:	4305      	orrs	r5, r0
 8004a8c:	81a5      	strh	r5, [r4, #12]
 8004a8e:	e7cd      	b.n	8004a2c <__smakebuf_r+0x18>
 8004a90:	08004821 	.word	0x08004821

08004a94 <_free_r>:
 8004a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a96:	2900      	cmp	r1, #0
 8004a98:	d044      	beq.n	8004b24 <_free_r+0x90>
 8004a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9e:	9001      	str	r0, [sp, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8004aa6:	bfb8      	it	lt
 8004aa8:	18e4      	addlt	r4, r4, r3
 8004aaa:	f000 f97d 	bl	8004da8 <__malloc_lock>
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <_free_r+0x94>)
 8004ab0:	9801      	ldr	r0, [sp, #4]
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	b933      	cbnz	r3, 8004ac4 <_free_r+0x30>
 8004ab6:	6063      	str	r3, [r4, #4]
 8004ab8:	6014      	str	r4, [r2, #0]
 8004aba:	b003      	add	sp, #12
 8004abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ac0:	f000 b978 	b.w	8004db4 <__malloc_unlock>
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d908      	bls.n	8004ada <_free_r+0x46>
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	1961      	adds	r1, r4, r5
 8004acc:	428b      	cmp	r3, r1
 8004ace:	bf01      	itttt	eq
 8004ad0:	6819      	ldreq	r1, [r3, #0]
 8004ad2:	685b      	ldreq	r3, [r3, #4]
 8004ad4:	1949      	addeq	r1, r1, r5
 8004ad6:	6021      	streq	r1, [r4, #0]
 8004ad8:	e7ed      	b.n	8004ab6 <_free_r+0x22>
 8004ada:	461a      	mov	r2, r3
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b10b      	cbz	r3, 8004ae4 <_free_r+0x50>
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	d9fa      	bls.n	8004ada <_free_r+0x46>
 8004ae4:	6811      	ldr	r1, [r2, #0]
 8004ae6:	1855      	adds	r5, r2, r1
 8004ae8:	42a5      	cmp	r5, r4
 8004aea:	d10b      	bne.n	8004b04 <_free_r+0x70>
 8004aec:	6824      	ldr	r4, [r4, #0]
 8004aee:	4421      	add	r1, r4
 8004af0:	1854      	adds	r4, r2, r1
 8004af2:	42a3      	cmp	r3, r4
 8004af4:	6011      	str	r1, [r2, #0]
 8004af6:	d1e0      	bne.n	8004aba <_free_r+0x26>
 8004af8:	681c      	ldr	r4, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	6053      	str	r3, [r2, #4]
 8004afe:	4421      	add	r1, r4
 8004b00:	6011      	str	r1, [r2, #0]
 8004b02:	e7da      	b.n	8004aba <_free_r+0x26>
 8004b04:	d902      	bls.n	8004b0c <_free_r+0x78>
 8004b06:	230c      	movs	r3, #12
 8004b08:	6003      	str	r3, [r0, #0]
 8004b0a:	e7d6      	b.n	8004aba <_free_r+0x26>
 8004b0c:	6825      	ldr	r5, [r4, #0]
 8004b0e:	1961      	adds	r1, r4, r5
 8004b10:	428b      	cmp	r3, r1
 8004b12:	bf04      	itt	eq
 8004b14:	6819      	ldreq	r1, [r3, #0]
 8004b16:	685b      	ldreq	r3, [r3, #4]
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	bf04      	itt	eq
 8004b1c:	1949      	addeq	r1, r1, r5
 8004b1e:	6021      	streq	r1, [r4, #0]
 8004b20:	6054      	str	r4, [r2, #4]
 8004b22:	e7ca      	b.n	8004aba <_free_r+0x26>
 8004b24:	b003      	add	sp, #12
 8004b26:	bd30      	pop	{r4, r5, pc}
 8004b28:	20012e88 	.word	0x20012e88

08004b2c <sbrk_aligned>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4e0e      	ldr	r6, [pc, #56]	; (8004b68 <sbrk_aligned+0x3c>)
 8004b30:	460c      	mov	r4, r1
 8004b32:	6831      	ldr	r1, [r6, #0]
 8004b34:	4605      	mov	r5, r0
 8004b36:	b911      	cbnz	r1, 8004b3e <sbrk_aligned+0x12>
 8004b38:	f000 f88c 	bl	8004c54 <_sbrk_r>
 8004b3c:	6030      	str	r0, [r6, #0]
 8004b3e:	4621      	mov	r1, r4
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 f887 	bl	8004c54 <_sbrk_r>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	d00a      	beq.n	8004b60 <sbrk_aligned+0x34>
 8004b4a:	1cc4      	adds	r4, r0, #3
 8004b4c:	f024 0403 	bic.w	r4, r4, #3
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d007      	beq.n	8004b64 <sbrk_aligned+0x38>
 8004b54:	1a21      	subs	r1, r4, r0
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 f87c 	bl	8004c54 <_sbrk_r>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d101      	bne.n	8004b64 <sbrk_aligned+0x38>
 8004b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b64:	4620      	mov	r0, r4
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	20012e8c 	.word	0x20012e8c

08004b6c <_malloc_r>:
 8004b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b70:	1ccd      	adds	r5, r1, #3
 8004b72:	f025 0503 	bic.w	r5, r5, #3
 8004b76:	3508      	adds	r5, #8
 8004b78:	2d0c      	cmp	r5, #12
 8004b7a:	bf38      	it	cc
 8004b7c:	250c      	movcc	r5, #12
 8004b7e:	2d00      	cmp	r5, #0
 8004b80:	4607      	mov	r7, r0
 8004b82:	db01      	blt.n	8004b88 <_malloc_r+0x1c>
 8004b84:	42a9      	cmp	r1, r5
 8004b86:	d905      	bls.n	8004b94 <_malloc_r+0x28>
 8004b88:	230c      	movs	r3, #12
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	4630      	mov	r0, r6
 8004b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b94:	4e2e      	ldr	r6, [pc, #184]	; (8004c50 <_malloc_r+0xe4>)
 8004b96:	f000 f907 	bl	8004da8 <__malloc_lock>
 8004b9a:	6833      	ldr	r3, [r6, #0]
 8004b9c:	461c      	mov	r4, r3
 8004b9e:	bb34      	cbnz	r4, 8004bee <_malloc_r+0x82>
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	f7ff ffc2 	bl	8004b2c <sbrk_aligned>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	4604      	mov	r4, r0
 8004bac:	d14d      	bne.n	8004c4a <_malloc_r+0xde>
 8004bae:	6834      	ldr	r4, [r6, #0]
 8004bb0:	4626      	mov	r6, r4
 8004bb2:	2e00      	cmp	r6, #0
 8004bb4:	d140      	bne.n	8004c38 <_malloc_r+0xcc>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4638      	mov	r0, r7
 8004bbc:	eb04 0803 	add.w	r8, r4, r3
 8004bc0:	f000 f848 	bl	8004c54 <_sbrk_r>
 8004bc4:	4580      	cmp	r8, r0
 8004bc6:	d13a      	bne.n	8004c3e <_malloc_r+0xd2>
 8004bc8:	6821      	ldr	r1, [r4, #0]
 8004bca:	3503      	adds	r5, #3
 8004bcc:	1a6d      	subs	r5, r5, r1
 8004bce:	f025 0503 	bic.w	r5, r5, #3
 8004bd2:	3508      	adds	r5, #8
 8004bd4:	2d0c      	cmp	r5, #12
 8004bd6:	bf38      	it	cc
 8004bd8:	250c      	movcc	r5, #12
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff ffa5 	bl	8004b2c <sbrk_aligned>
 8004be2:	3001      	adds	r0, #1
 8004be4:	d02b      	beq.n	8004c3e <_malloc_r+0xd2>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	442b      	add	r3, r5
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	e00e      	b.n	8004c0c <_malloc_r+0xa0>
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	1b52      	subs	r2, r2, r5
 8004bf2:	d41e      	bmi.n	8004c32 <_malloc_r+0xc6>
 8004bf4:	2a0b      	cmp	r2, #11
 8004bf6:	d916      	bls.n	8004c26 <_malloc_r+0xba>
 8004bf8:	1961      	adds	r1, r4, r5
 8004bfa:	42a3      	cmp	r3, r4
 8004bfc:	6025      	str	r5, [r4, #0]
 8004bfe:	bf18      	it	ne
 8004c00:	6059      	strne	r1, [r3, #4]
 8004c02:	6863      	ldr	r3, [r4, #4]
 8004c04:	bf08      	it	eq
 8004c06:	6031      	streq	r1, [r6, #0]
 8004c08:	5162      	str	r2, [r4, r5]
 8004c0a:	604b      	str	r3, [r1, #4]
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f104 060b 	add.w	r6, r4, #11
 8004c12:	f000 f8cf 	bl	8004db4 <__malloc_unlock>
 8004c16:	f026 0607 	bic.w	r6, r6, #7
 8004c1a:	1d23      	adds	r3, r4, #4
 8004c1c:	1af2      	subs	r2, r6, r3
 8004c1e:	d0b6      	beq.n	8004b8e <_malloc_r+0x22>
 8004c20:	1b9b      	subs	r3, r3, r6
 8004c22:	50a3      	str	r3, [r4, r2]
 8004c24:	e7b3      	b.n	8004b8e <_malloc_r+0x22>
 8004c26:	6862      	ldr	r2, [r4, #4]
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	bf0c      	ite	eq
 8004c2c:	6032      	streq	r2, [r6, #0]
 8004c2e:	605a      	strne	r2, [r3, #4]
 8004c30:	e7ec      	b.n	8004c0c <_malloc_r+0xa0>
 8004c32:	4623      	mov	r3, r4
 8004c34:	6864      	ldr	r4, [r4, #4]
 8004c36:	e7b2      	b.n	8004b9e <_malloc_r+0x32>
 8004c38:	4634      	mov	r4, r6
 8004c3a:	6876      	ldr	r6, [r6, #4]
 8004c3c:	e7b9      	b.n	8004bb2 <_malloc_r+0x46>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4638      	mov	r0, r7
 8004c44:	f000 f8b6 	bl	8004db4 <__malloc_unlock>
 8004c48:	e7a1      	b.n	8004b8e <_malloc_r+0x22>
 8004c4a:	6025      	str	r5, [r4, #0]
 8004c4c:	e7de      	b.n	8004c0c <_malloc_r+0xa0>
 8004c4e:	bf00      	nop
 8004c50:	20012e88 	.word	0x20012e88

08004c54 <_sbrk_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_sbrk_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f000 f8c0 	bl	8004de4 <_sbrk>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_sbrk_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_sbrk_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	20012e90 	.word	0x20012e90

08004c74 <__sread>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	460c      	mov	r4, r1
 8004c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7c:	f000 f8a0 	bl	8004dc0 <_read_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	bfab      	itete	ge
 8004c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c86:	89a3      	ldrhlt	r3, [r4, #12]
 8004c88:	181b      	addge	r3, r3, r0
 8004c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c8e:	bfac      	ite	ge
 8004c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c92:	81a3      	strhlt	r3, [r4, #12]
 8004c94:	bd10      	pop	{r4, pc}

08004c96 <__swrite>:
 8004c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	898b      	ldrh	r3, [r1, #12]
 8004c9e:	05db      	lsls	r3, r3, #23
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	d505      	bpl.n	8004cb4 <__swrite+0x1e>
 8004ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cac:	2302      	movs	r3, #2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f000 f868 	bl	8004d84 <_lseek_r>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	4632      	mov	r2, r6
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cca:	f000 b817 	b.w	8004cfc <_write_r>

08004cce <__sseek>:
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd6:	f000 f855 	bl	8004d84 <_lseek_r>
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	bf15      	itete	ne
 8004ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cea:	81a3      	strheq	r3, [r4, #12]
 8004cec:	bf18      	it	ne
 8004cee:	81a3      	strhne	r3, [r4, #12]
 8004cf0:	bd10      	pop	{r4, pc}

08004cf2 <__sclose>:
 8004cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf6:	f000 b813 	b.w	8004d20 <_close_r>
	...

08004cfc <_write_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d07      	ldr	r5, [pc, #28]	; (8004d1c <_write_r+0x20>)
 8004d00:	4604      	mov	r4, r0
 8004d02:	4608      	mov	r0, r1
 8004d04:	4611      	mov	r1, r2
 8004d06:	2200      	movs	r2, #0
 8004d08:	602a      	str	r2, [r5, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f7fb ff27 	bl	8000b5e <_write>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_write_r+0x1e>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_write_r+0x1e>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	20012e90 	.word	0x20012e90

08004d20 <_close_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d06      	ldr	r5, [pc, #24]	; (8004d3c <_close_r+0x1c>)
 8004d24:	2300      	movs	r3, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fb ff33 	bl	8000b96 <_close>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_close_r+0x1a>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_close_r+0x1a>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20012e90 	.word	0x20012e90

08004d40 <_fstat_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	; (8004d60 <_fstat_r+0x20>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	602b      	str	r3, [r5, #0]
 8004d4e:	f7fb ff2e 	bl	8000bae <_fstat>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	d102      	bne.n	8004d5c <_fstat_r+0x1c>
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	b103      	cbz	r3, 8004d5c <_fstat_r+0x1c>
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	bd38      	pop	{r3, r4, r5, pc}
 8004d5e:	bf00      	nop
 8004d60:	20012e90 	.word	0x20012e90

08004d64 <_isatty_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d06      	ldr	r5, [pc, #24]	; (8004d80 <_isatty_r+0x1c>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	602b      	str	r3, [r5, #0]
 8004d70:	f7fb ff2d 	bl	8000bce <_isatty>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_isatty_r+0x1a>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_isatty_r+0x1a>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	20012e90 	.word	0x20012e90

08004d84 <_lseek_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4d07      	ldr	r5, [pc, #28]	; (8004da4 <_lseek_r+0x20>)
 8004d88:	4604      	mov	r4, r0
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	602a      	str	r2, [r5, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f7fb ff26 	bl	8000be4 <_lseek>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_lseek_r+0x1e>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_lseek_r+0x1e>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20012e90 	.word	0x20012e90

08004da8 <__malloc_lock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_lock+0x8>)
 8004daa:	f7ff be0b 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	20012e84 	.word	0x20012e84

08004db4 <__malloc_unlock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__malloc_unlock+0x8>)
 8004db6:	f7ff be06 	b.w	80049c6 <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	20012e84 	.word	0x20012e84

08004dc0 <_read_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d07      	ldr	r5, [pc, #28]	; (8004de0 <_read_r+0x20>)
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	4608      	mov	r0, r1
 8004dc8:	4611      	mov	r1, r2
 8004dca:	2200      	movs	r2, #0
 8004dcc:	602a      	str	r2, [r5, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f7fb fea8 	bl	8000b24 <_read>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_read_r+0x1e>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_read_r+0x1e>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20012e90 	.word	0x20012e90

08004de4 <_sbrk>:
 8004de4:	4a04      	ldr	r2, [pc, #16]	; (8004df8 <_sbrk+0x14>)
 8004de6:	6811      	ldr	r1, [r2, #0]
 8004de8:	4603      	mov	r3, r0
 8004dea:	b909      	cbnz	r1, 8004df0 <_sbrk+0xc>
 8004dec:	4903      	ldr	r1, [pc, #12]	; (8004dfc <_sbrk+0x18>)
 8004dee:	6011      	str	r1, [r2, #0]
 8004df0:	6810      	ldr	r0, [r2, #0]
 8004df2:	4403      	add	r3, r0
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4770      	bx	lr
 8004df8:	20012e94 	.word	0x20012e94
 8004dfc:	20012e98 	.word	0x20012e98

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
