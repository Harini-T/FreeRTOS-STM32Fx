
001TasksSegger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e8  080079e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f0  080079f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080079f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000144a0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014520  20014520  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001553c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003038  00000000  00000000  000355ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00038628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f0  00000000  00000000  000399a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e2c  00000000  00000000  0003ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016548  00000000  00000000  0005e9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8926  00000000  00000000  00074f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d82a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000554c  00000000  00000000  0014d87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800782c 	.word	0x0800782c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800782c 	.word	0x0800782c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f38 	.word	0x20012f38
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb71 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f853 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x98>)
 8000634:	f004 f9ca 	bl	80049cc <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f003 fff2 	bl	8004620 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200,"Hello world from Task-1",2,&task1_handle);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x9c>)
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xa4>)
 800064e:	f002 f93d 	bl	80028cc <xTaskCreate>
 8000652:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00a      	beq.n	8000670 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066c:	bf00      	nop
 800066e:	e7fe      	b.n	800066e <main+0x5a>
  status = xTaskCreate(task2_handler, "Task-2", 200,"Hello world from Task-2",2,&task2_handle);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <main+0xa8>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0xb0>)
 8000680:	f002 f924 	bl	80028cc <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x8e>
        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x8c>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 80006a2:	f002 fa8d 	bl	8002bc0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x92>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0003d090 	.word	0x0003d090
 80006b0:	08007844 	.word	0x08007844
 80006b4:	0800785c 	.word	0x0800785c
 80006b8:	08000a59 	.word	0x08000a59
 80006bc:	08007864 	.word	0x08007864
 80006c0:	0800787c 	.word	0x0800787c
 80006c4:	08000a95 	.word	0x08000a95

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fc1e 	bl	8006f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fdb1 	bl	80012b4 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9cc 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f812 	bl	80017a4 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9b5 	bl	8000af4 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4ba2      	ldr	r3, [pc, #648]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4aa1      	ldr	r2, [pc, #644]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b9f      	ldr	r3, [pc, #636]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b9b      	ldr	r3, [pc, #620]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a9a      	ldr	r2, [pc, #616]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b98      	ldr	r3, [pc, #608]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b8a      	ldr	r3, [pc, #552]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a85      	ldr	r2, [pc, #532]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a7e      	ldr	r2, [pc, #504]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4879      	ldr	r0, [pc, #484]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000860:	f000 fd0e 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4877      	ldr	r0, [pc, #476]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fd09 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4875      	ldr	r0, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000876:	f000 fd03 	bl	8001280 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	486c      	ldr	r0, [pc, #432]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 fb59 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4866      	ldr	r0, [pc, #408]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ae:	f000 fb4b 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	485e      	ldr	r0, [pc, #376]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fb3b 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	485a      	ldr	r0, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80008e8:	f000 fb2e 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ec:	2310      	movs	r3, #16
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4852      	ldr	r0, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000908:	f000 fb1e 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800090c:	23e0      	movs	r3, #224	; 0xe0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000928:	f000 fb0e 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000940:	f000 fb02 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	483c      	ldr	r0, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000962:	f000 faf1 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000980:	f000 fae2 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000984:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000996:	2306      	movs	r3, #6
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4829      	ldr	r0, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80009a2:	f000 fad1 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4825      	ldr	r0, [pc, #148]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009bc:	f000 fac4 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d2:	230a      	movs	r3, #10
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009de:	f000 fab3 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e2:	2320      	movs	r3, #32
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 80009f6:	f000 faa7 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000a18:	f000 fa96 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a20:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000a32:	f000 fa89 	bl	8000f48 <HAL_GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		//printf("%s\n", (char*)parameters);
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000a60:	f107 000c 	add.w	r0, r7, #12
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <task1_handler+0x34>)
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	f006 fa5d 	bl	8006f28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 f970 	bl	8006d58 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <task1_handler+0x38>)
 8000a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	f3bf 8f4f 	dsb	sy
 8000a84:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000a88:	e7ea      	b.n	8000a60 <task1_handler+0x8>
 8000a8a:	bf00      	nop
 8000a8c:	08007884 	.word	0x08007884
 8000a90:	e000ed04 	.word	0xe000ed04

08000a94 <task2_handler>:
	}
}
static void task2_handler(void *parameters){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	char msg[100];
		while(1){
			//printf("%s\n", (char*)parameters);
			snprintf(msg,100,"%s\n",(char*)parameters);
 8000a9c:	f107 000c 	add.w	r0, r7, #12
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <task2_handler+0x34>)
 8000aa4:	2164      	movs	r1, #100	; 0x64
 8000aa6:	f006 fa3f 	bl	8006f28 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 f952 	bl	8006d58 <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <task2_handler+0x38>)
 8000ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	f3bf 8f4f 	dsb	sy
 8000ac0:	f3bf 8f6f 	isb	sy
			snprintf(msg,100,"%s\n",(char*)parameters);
 8000ac4:	e7ea      	b.n	8000a9c <task2_handler+0x8>
 8000ac6:	bf00      	nop
 8000ac8:	08007884 	.word	0x08007884
 8000acc:	e000ed04 	.word	0xe000ed04

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 f92f 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b3e:	f003 f9eb 	bl	8003f18 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <HAL_InitTick+0xe4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <HAL_InitTick+0xe4>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <HAL_InitTick+0xe4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b7c:	f107 0210 	add.w	r2, r7, #16
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f818 	bl	8001bbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d103      	bne.n	8000b9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b96:	f000 fffd 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000b9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b9c:	e004      	b.n	8000ba8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b9e:	f000 fff9 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <HAL_InitTick+0xe8>)
 8000bac:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb0:	0c9b      	lsrs	r3, r3, #18
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_InitTick+0xec>)
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <HAL_InitTick+0xf0>)
 8000bba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_InitTick+0xec>)
 8000bbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_InitTick+0xec>)
 8000bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_InitTick+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_InitTick+0xec>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_InitTick+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <HAL_InitTick+0xec>)
 8000bde:	f001 f81f 	bl	8001c20 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000be8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d11b      	bne.n	8000c28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bf0:	4812      	ldr	r0, [pc, #72]	; (8000c3c <HAL_InitTick+0xec>)
 8000bf2:	f001 f86f 	bl	8001cd4 <HAL_TIM_Base_Start_IT>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d111      	bne.n	8000c28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f000 f991 	bl	8000f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d808      	bhi.n	8000c22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2036      	movs	r0, #54	; 0x36
 8000c16:	f000 f96d 	bl	8000ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_InitTick+0xf4>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e002      	b.n	8000c28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3738      	adds	r7, #56	; 0x38
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	431bde83 	.word	0x431bde83
 8000c3c:	2000009c 	.word	0x2000009c
 8000c40:	40001000 	.word	0x40001000
 8000c44:	20000004 	.word	0x20000004

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM6_DAC_IRQHandler+0x10>)
 8000c7a:	f001 f89b 	bl	8001db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000009c 	.word	0x2000009c

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ffd7 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f006 f8db 	bl	8006e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc99 	bl	8000614 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000cf0:	080079f8 	.word	0x080079f8
  ldr r2, =_sbss
 8000cf4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000cf8:	20014520 	.word	0x20014520

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_Init+0x40>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_Init+0x40>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x40>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8d8 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ff0e 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fee4 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	200000e4 	.word	0x200000e4

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000e4 	.word	0x200000e4

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e16b      	b.n	800123c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 815a 	bne.w	8001236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80b4 	beq.w	8001236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b60      	ldr	r3, [pc, #384]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a5f      	ldr	r2, [pc, #380]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a5b      	ldr	r2, [pc, #364]	; (8001258 <HAL_GPIO_Init+0x310>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_GPIO_Init+0x314>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x226>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a51      	ldr	r2, [pc, #324]	; (8001260 <HAL_GPIO_Init+0x318>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x222>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <HAL_GPIO_Init+0x31c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x21e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x320>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x21a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_Init+0x324>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x216>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x328>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x212>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x32c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x20e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <HAL_GPIO_Init+0x330>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x20a>
 800114e:	2307      	movs	r3, #7
 8001150:	e00e      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001152:	2308      	movs	r3, #8
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001156:	2306      	movs	r3, #6
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <HAL_GPIO_Init+0x310>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_GPIO_Init+0x334>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <HAL_GPIO_Init+0x334>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_GPIO_Init+0x334>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_GPIO_Init+0x334>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_GPIO_Init+0x334>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_GPIO_Init+0x334>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_GPIO_Init+0x334>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_GPIO_Init+0x334>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f ae90 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40021400 	.word	0x40021400
 8001274:	40021800 	.word	0x40021800
 8001278:	40021c00 	.word	0x40021c00
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e267      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d075      	beq.n	80013be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d00c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d112      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b82      	ldr	r3, [pc, #520]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012f6:	d10b      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d05b      	beq.n	80013bc <HAL_RCC_OscConfig+0x108>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d157      	bne.n	80013bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e242      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d106      	bne.n	8001328 <HAL_RCC_OscConfig+0x74>
 800131a:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a75      	ldr	r2, [pc, #468]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e01d      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0x98>
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6f      	ldr	r2, [pc, #444]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6c      	ldr	r2, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 800134c:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a68      	ldr	r2, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b66      	ldr	r3, [pc, #408]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a65      	ldr	r2, [pc, #404]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcfe 	bl	8000d6c <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fcfa 	bl	8000d6c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e207      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0xc0>
 8001392:	e014      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fcea 	bl	8000d6c <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fce6 	bl	8000d6c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1f3      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0xe8>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d063      	beq.n	8001492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d11c      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d116      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e1c7      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4937      	ldr	r1, [pc, #220]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	e03a      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fc9f 	bl	8000d6c <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fc9b 	bl	8000d6c <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e1a8      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4925      	ldr	r1, [pc, #148]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fc7e 	bl	8000d6c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fc7a 	bl	8000d6c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e187      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d036      	beq.n	800150c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d016      	beq.n	80014d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_RCC_OscConfig+0x248>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fc5e 	bl	8000d6c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc5a 	bl	8000d6c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e167      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x200>
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_OscConfig+0x248>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fc47 	bl	8000d6c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff fc43 	bl	8000d6c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d907      	bls.n	8001500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e150      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 80014f4:	40023800 	.word	0x40023800
 80014f8:	42470000 	.word	0x42470000
 80014fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b88      	ldr	r3, [pc, #544]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ea      	bne.n	80014e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8097 	beq.w	8001648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a7c      	ldr	r2, [pc, #496]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d118      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a73      	ldr	r2, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fc03 	bl	8000d6c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fbff 	bl	8000d6c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e10c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x2ea>
 8001590:	4b64      	ldr	r3, [pc, #400]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a63      	ldr	r2, [pc, #396]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x30c>
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a5b      	ldr	r2, [pc, #364]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a57      	ldr	r2, [pc, #348]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	4b55      	ldr	r3, [pc, #340]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a54      	ldr	r2, [pc, #336]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fbc4 	bl	8000d6c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fbc0 	bl	8000d6c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0cb      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fe:	4b49      	ldr	r3, [pc, #292]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0ee      	beq.n	80015e8 <HAL_RCC_OscConfig+0x334>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fbae 	bl	8000d6c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff fbaa 	bl	8000d6c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0b5      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a38      	ldr	r2, [pc, #224]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a1 	beq.w	8001794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d05c      	beq.n	8001718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d141      	bne.n	80016ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb7e 	bl	8000d6c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb7a 	bl	8000d6c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e087      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	491b      	ldr	r1, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x478>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb53 	bl	8000d6c <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff fb4f 	bl	8000d6c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e05c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x416>
 80016e8:	e054      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_RCC_OscConfig+0x478>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb3c 	bl	8000d6c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fb38 	bl	8000d6c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e045      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x444>
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e038      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000
 800172c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x4ec>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d028      	beq.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d121      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d11a      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	4293      	cmp	r3, r2
 800176a:	d111      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cc      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d90c      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b65      	ldr	r3, [pc, #404]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800181a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d044      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	2b03      	cmp	r3, #3
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e067      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4934      	ldr	r1, [pc, #208]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff fa6a 	bl	8000d6c <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff fa66 	bl	8000d6c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e04f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	490a      	ldr	r1, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	5ccb      	ldrb	r3, [r1, r3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f900 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00
 8001960:	40023800 	.word	0x40023800
 8001964:	08007960 	.word	0x08007960
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001974:	b094      	sub	sp, #80	; 0x50
 8001976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
 800197c:	2300      	movs	r3, #0
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001988:	4b79      	ldr	r3, [pc, #484]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d00d      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001994:	2b08      	cmp	r3, #8
 8001996:	f200 80e1 	bhi.w	8001b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x34>
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x3a>
 80019a2:	e0db      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019a8:	e0db      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x208>)
 80019ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ae:	e0d8      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	099b      	lsrs	r3, r3, #6
 80019cc:	2200      	movs	r2, #0
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80019d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019e2:	4622      	mov	r2, r4
 80019e4:	462b      	mov	r3, r5
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	0159      	lsls	r1, r3, #5
 80019f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f4:	0150      	lsls	r0, r2, #5
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4621      	mov	r1, r4
 80019fc:	1a51      	subs	r1, r2, r1
 80019fe:	6139      	str	r1, [r7, #16]
 8001a00:	4629      	mov	r1, r5
 8001a02:	eb63 0301 	sbc.w	r3, r3, r1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a14:	4659      	mov	r1, fp
 8001a16:	018b      	lsls	r3, r1, #6
 8001a18:	4651      	mov	r1, sl
 8001a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a1e:	4651      	mov	r1, sl
 8001a20:	018a      	lsls	r2, r1, #6
 8001a22:	4651      	mov	r1, sl
 8001a24:	ebb2 0801 	subs.w	r8, r2, r1
 8001a28:	4659      	mov	r1, fp
 8001a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a42:	4690      	mov	r8, r2
 8001a44:	4699      	mov	r9, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	eb18 0303 	adds.w	r3, r8, r3
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	462b      	mov	r3, r5
 8001a50:	eb49 0303 	adc.w	r3, r9, r3
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a62:	4629      	mov	r1, r5
 8001a64:	024b      	lsls	r3, r1, #9
 8001a66:	4621      	mov	r1, r4
 8001a68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	024a      	lsls	r2, r1, #9
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a76:	2200      	movs	r2, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a80:	f7fe fc46 	bl	8000310 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a8c:	e058      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	2200      	movs	r2, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	4611      	mov	r1, r2
 8001a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	464b      	mov	r3, r9
 8001aac:	f04f 0000 	mov.w	r0, #0
 8001ab0:	f04f 0100 	mov.w	r1, #0
 8001ab4:	0159      	lsls	r1, r3, #5
 8001ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aba:	0150      	lsls	r0, r2, #5
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	00eb      	lsls	r3, r5, #3
 8001af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af6:	00e2      	lsls	r2, r4, #3
 8001af8:	4614      	mov	r4, r2
 8001afa:	461d      	mov	r5, r3
 8001afc:	4643      	mov	r3, r8
 8001afe:	18e3      	adds	r3, r4, r3
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	464b      	mov	r3, r9
 8001b04:	eb45 0303 	adc.w	r3, r5, r3
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b16:	4629      	mov	r1, r5
 8001b18:	028b      	lsls	r3, r1, #10
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b20:	4621      	mov	r1, r4
 8001b22:	028a      	lsls	r2, r1, #10
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	61fa      	str	r2, [r7, #28]
 8001b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b34:	f7fe fbec 	bl	8000310 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b5a:	e002      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3750      	adds	r7, #80	; 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	00f42400 	.word	0x00f42400
 8001b78:	007a1200 	.word	0x007a1200

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08007970 	.word	0x08007970

08001bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	220f      	movs	r2, #15
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_RCC_GetClockConfig+0x60>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0207 	and.w	r2, r3, #7
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f839 	bl	8001cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 f9d8 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d001      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04e      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d022      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d01d      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d018      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_TIM_Base_Start_IT+0xd8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d010      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	e007      	b.n	8001d88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40000c00 	.word	0x40000c00
 8001da8:	40010400 	.word	0x40010400
 8001dac:	40014000 	.word	0x40014000
 8001db0:	40001800 	.word	0x40001800

08001db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8ee 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8e0 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8f1 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0204 	mvn.w	r2, #4
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8c4 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8b6 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8c7 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0208 	mvn.w	r2, #8
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f89a 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f88c 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f89d 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0210 	mvn.w	r2, #16
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f870 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f862 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f873 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0201 	mvn.w	r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fdcc 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b80      	cmp	r3, #128	; 0x80
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f902 	bl	8002168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f838 	bl	8002000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0220 	mvn.w	r2, #32
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8cc 	bl	8002154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a40      	ldr	r2, [pc, #256]	; (8002128 <TIM_Base_SetConfig+0x114>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d00f      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	; (800212c <TIM_Base_SetConfig+0x118>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00b      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <TIM_Base_SetConfig+0x11c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <TIM_Base_SetConfig+0x120>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2f      	ldr	r2, [pc, #188]	; (8002128 <TIM_Base_SetConfig+0x114>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d027      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2c      	ldr	r2, [pc, #176]	; (800212c <TIM_Base_SetConfig+0x118>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d023      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <TIM_Base_SetConfig+0x11c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <TIM_Base_SetConfig+0x120>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d017      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a28      	ldr	r2, [pc, #160]	; (800213c <TIM_Base_SetConfig+0x128>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a27      	ldr	r2, [pc, #156]	; (8002140 <TIM_Base_SetConfig+0x12c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00f      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <TIM_Base_SetConfig+0x130>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a25      	ldr	r2, [pc, #148]	; (8002148 <TIM_Base_SetConfig+0x134>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <TIM_Base_SetConfig+0x138>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <TIM_Base_SetConfig+0x13c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <TIM_Base_SetConfig+0x114>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <TIM_Base_SetConfig+0xf8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	615a      	str	r2, [r3, #20]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40010400 	.word	0x40010400
 800213c:	40014000 	.word	0x40014000
 8002140:	40014400 	.word	0x40014400
 8002144:	40014800 	.word	0x40014800
 8002148:	40001800 	.word	0x40001800
 800214c:	40001c00 	.word	0x40001c00
 8002150:	40002000 	.word	0x40002000

08002154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002194:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 0208 	add.w	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ec:	d103      	bne.n	80021f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e00c      	b.n	8002210 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3308      	adds	r3, #8
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e002      	b.n	8002204 <vListInsert+0x2e>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d2f6      	bcs.n	80021fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6892      	ldr	r2, [r2, #8]
 800225e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6852      	ldr	r2, [r2, #4]
 8002268:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d103      	bne.n	800227c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1e5a      	subs	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022a6:	2301      	movs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <xQueueGenericReset+0x2e>
        __asm volatile
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	60fb      	str	r3, [r7, #12]
    }
 80022c6:	bf00      	nop
 80022c8:	e7fe      	b.n	80022c8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d052      	beq.n	8002376 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d04e      	beq.n	8002376 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2100      	movs	r1, #0
 80022e2:	fba3 2302 	umull	r2, r3, r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d000      	beq.n	80022ec <xQueueGenericReset+0x50>
 80022ea:	2101      	movs	r1, #1
 80022ec:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d141      	bne.n	8002376 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80022f2:	f001 fe8f 	bl	8004014 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	6939      	ldr	r1, [r7, #16]
 8002300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	441a      	add	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2200      	movs	r2, #0
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	3b01      	subs	r3, #1
 8002324:	6939      	ldr	r1, [r7, #16]
 8002326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	441a      	add	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	22ff      	movs	r2, #255	; 0xff
 8002336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	22ff      	movs	r2, #255	; 0xff
 800233e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00f      	beq.n	8002370 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	3310      	adds	r3, #16
 8002354:	4618      	mov	r0, r3
 8002356:	f000 ff85 	bl	8003264 <xTaskRemoveFromEventList>
 800235a:	e009      	b.n	8002370 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	3310      	adds	r3, #16
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff0b 	bl	800217c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	3324      	adds	r3, #36	; 0x24
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff06 	bl	800217c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002370:	f001 fe80 	bl	8004074 <vPortExitCritical>
 8002374:	e001      	b.n	800237a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericReset+0xfa>
        __asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	60bb      	str	r3, [r7, #8]
    }
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002396:	697b      	ldr	r3, [r7, #20]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02e      	beq.n	8002416 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023b8:	2100      	movs	r1, #0
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	fba3 2302 	umull	r2, r3, r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d000      	beq.n	80023c8 <xQueueGenericCreate+0x28>
 80023c6:	2101      	movs	r1, #1
 80023c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d123      	bne.n	8002416 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023d6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023da:	d81c      	bhi.n	8002416 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3350      	adds	r3, #80	; 0x50
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 ff3e 	bl	800426c <pvPortMalloc>
 80023f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3350      	adds	r3, #80	; 0x50
 8002400:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f814 	bl	800243c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002414:	e00d      	b.n	8002432 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueGenericCreate+0x92>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	613b      	str	r3, [r7, #16]
    }
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002432:	69fb      	ldr	r3, [r7, #28]
    }
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e002      	b.n	800245e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800246a:	2101      	movs	r1, #1
 800246c:	69b8      	ldr	r0, [r7, #24]
 800246e:	f7ff ff15 	bl	800229c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	68f9      	ldr	r1, [r7, #12]
 8002480:	2073      	movs	r0, #115	; 0x73
 8002482:	f003 fe4f 	bl	8006124 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08f      	sub	sp, #60	; 0x3c
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <xQueueReceive+0x30>
        __asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	623b      	str	r3, [r7, #32]
    }
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <xQueueReceive+0x3e>
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <xQueueReceive+0x42>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueReceive+0x44>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueReceive+0x5e>
        __asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	61fb      	str	r3, [r7, #28]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ee:	f001 f8c5 	bl	800367c <xTaskGetSchedulerState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <xQueueReceive+0x6e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <xQueueReceive+0x72>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueReceive+0x74>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueReceive+0x8e>
        __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	61bb      	str	r3, [r7, #24]
    }
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800251e:	f001 fd79 	bl	8004014 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d024      	beq.n	8002578 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002532:	f000 f8b3 	bl	800269c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	4618      	mov	r0, r3
 800253a:	f004 fb21 	bl	8006b80 <SEGGER_SYSVIEW_ShrinkId>
 800253e:	4604      	mov	r4, r0
 8002540:	2000      	movs	r0, #0
 8002542:	f004 fb1d 	bl	8006b80 <SEGGER_SYSVIEW_ShrinkId>
 8002546:	4602      	mov	r2, r0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2101      	movs	r1, #1
 800254c:	9100      	str	r1, [sp, #0]
 800254e:	4621      	mov	r1, r4
 8002550:	205c      	movs	r0, #92	; 0x5c
 8002552:	f003 fe5d 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	3310      	adds	r3, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fe7a 	bl	8003264 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002570:	f001 fd80 	bl	8004074 <vPortExitCritical>
                return pdPASS;
 8002574:	2301      	movs	r3, #1
 8002576:	e08a      	b.n	800268e <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800257e:	f001 fd79 	bl	8004074 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	4618      	mov	r0, r3
 8002586:	f004 fafb 	bl	8006b80 <SEGGER_SYSVIEW_ShrinkId>
 800258a:	4604      	mov	r4, r0
 800258c:	2000      	movs	r0, #0
 800258e:	f004 faf7 	bl	8006b80 <SEGGER_SYSVIEW_ShrinkId>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2101      	movs	r1, #1
 8002598:	9100      	str	r1, [sp, #0]
 800259a:	4621      	mov	r1, r4
 800259c:	205c      	movs	r0, #92	; 0x5c
 800259e:	f003 fe37 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e073      	b.n	800268e <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 ff2f 	bl	8003414 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ba:	f001 fd5b 	bl	8004074 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025be:	f000 fb61 	bl	8002c84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025c2:	f001 fd27 	bl	8004014 <vPortEnterCritical>
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d2:	d103      	bne.n	80025dc <xQueueReceive+0x14c>
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e8:	d103      	bne.n	80025f2 <xQueueReceive+0x162>
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025f2:	f001 fd3f 	bl	8004074 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 ff1e 	bl	8003440 <xTaskCheckForTimeOut>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d124      	bne.n	8002654 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800260a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800260c:	f000 f8be 	bl	800278c <prvIsQueueEmpty>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	3324      	adds	r3, #36	; 0x24
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fdb4 	bl	800318c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002626:	f000 f85f 	bl	80026e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800262a:	f000 fb39 	bl	8002ca0 <xTaskResumeAll>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af74 	bne.w	800251e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <xQueueReceive+0x208>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	e76a      	b.n	800251e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264a:	f000 f84d 	bl	80026e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800264e:	f000 fb27 	bl	8002ca0 <xTaskResumeAll>
 8002652:	e764      	b.n	800251e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002656:	f000 f847 	bl	80026e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800265a:	f000 fb21 	bl	8002ca0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800265e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002660:	f000 f894 	bl	800278c <prvIsQueueEmpty>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f43f af59 	beq.w	800251e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	4618      	mov	r0, r3
 8002670:	f004 fa86 	bl	8006b80 <SEGGER_SYSVIEW_ShrinkId>
 8002674:	4604      	mov	r4, r0
 8002676:	2000      	movs	r0, #0
 8002678:	f004 fa82 	bl	8006b80 <SEGGER_SYSVIEW_ShrinkId>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2101      	movs	r1, #1
 8002682:	9100      	str	r1, [sp, #0]
 8002684:	4621      	mov	r1, r4
 8002686:	205c      	movs	r0, #92	; 0x5c
 8002688:	f003 fdc2 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800268c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800268e:	4618      	mov	r0, r3
 8002690:	3734      	adds	r7, #52	; 0x34
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}
 8002696:	bf00      	nop
 8002698:	e000ed04 	.word	0xe000ed04

0800269c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d018      	beq.n	80026e0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	441a      	add	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d303      	bcc.n	80026d0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68d9      	ldr	r1, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	461a      	mov	r2, r3
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	f004 fc0e 	bl	8006efc <memcpy>
    }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026f0:	f001 fc90 	bl	8004014 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026fa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026fc:	e011      	b.n	8002722 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3324      	adds	r3, #36	; 0x24
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fdaa 	bl	8003264 <xTaskRemoveFromEventList>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002716:	f000 fef9 	bl	800350c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	3b01      	subs	r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	dce9      	bgt.n	80026fe <prvUnlockQueue+0x16>
 800272a:	e000      	b.n	800272e <prvUnlockQueue+0x46>
                    break;
 800272c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	22ff      	movs	r2, #255	; 0xff
 8002732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002736:	f001 fc9d 	bl	8004074 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800273a:	f001 fc6b 	bl	8004014 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002744:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002746:	e011      	b.n	800276c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3310      	adds	r3, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fd85 	bl	8003264 <xTaskRemoveFromEventList>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002760:	f000 fed4 	bl	800350c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002764:	7bbb      	ldrb	r3, [r7, #14]
 8002766:	3b01      	subs	r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800276c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002770:	2b00      	cmp	r3, #0
 8002772:	dce9      	bgt.n	8002748 <prvUnlockQueue+0x60>
 8002774:	e000      	b.n	8002778 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002776:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	22ff      	movs	r2, #255	; 0xff
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002780:	f001 fc78 	bl	8004074 <vPortExitCritical>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002794:	f001 fc3e 	bl	8004014 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e001      	b.n	80027aa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027aa:	f001 fc63 	bl	8004074 <vPortExitCritical>

    return xReturn;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	60fb      	str	r3, [r7, #12]
    }
 80027de:	bf00      	nop
 80027e0:	e7fe      	b.n	80027e0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d024      	beq.n	8002832 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e01e      	b.n	800282c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <vQueueAddToRegistry+0xa8>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d105      	bne.n	800280a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4a17      	ldr	r2, [pc, #92]	; (8002860 <vQueueAddToRegistry+0xa8>)
 8002804:	4413      	add	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
                    break;
 8002808:	e013      	b.n	8002832 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <vQueueAddToRegistry+0x6e>
 8002810:	4a13      	ldr	r2, [pc, #76]	; (8002860 <vQueueAddToRegistry+0xa8>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <vQueueAddToRegistry+0xa8>)
 8002822:	4413      	add	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b07      	cmp	r3, #7
 8002830:	d9dd      	bls.n	80027ee <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00f      	beq.n	8002858 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	f004 f99a 	bl	8006b80 <SEGGER_SYSVIEW_ShrinkId>
 800284c:	4601      	mov	r1, r0
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	2071      	movs	r0, #113	; 0x71
 8002854:	f003 fc0c 	bl	8006070 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200000e8 	.word	0x200000e8

08002864 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002874:	f001 fbce 	bl	8004014 <vPortEnterCritical>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800287e:	b25b      	sxtb	r3, r3
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002884:	d103      	bne.n	800288e <vQueueWaitForMessageRestricted+0x2a>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002894:	b25b      	sxtb	r3, r3
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289a:	d103      	bne.n	80028a4 <vQueueWaitForMessageRestricted+0x40>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a4:	f001 fbe6 	bl	8004074 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3324      	adds	r3, #36	; 0x24
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fc8b 	bl	80031d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff12 	bl	80026e8 <prvUnlockQueue>
    }
 80028c4:	bf00      	nop
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08c      	sub	sp, #48	; 0x30
 80028d0:	af04      	add	r7, sp, #16
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 fcc3 	bl	800426c <pvPortMalloc>
 80028e6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d013      	beq.n	8002916 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028ee:	2058      	movs	r0, #88	; 0x58
 80028f0:	f001 fcbc 	bl	800426c <pvPortMalloc>
 80028f4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80028fc:	2258      	movs	r2, #88	; 0x58
 80028fe:	2100      	movs	r1, #0
 8002900:	69f8      	ldr	r0, [r7, #28]
 8002902:	f004 fb09 	bl	8006f18 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
 800290c:	e005      	b.n	800291a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f001 fd66 	bl	80043e0 <vPortFree>
 8002914:	e001      	b.n	800291a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	2300      	movs	r3, #0
 8002924:	9303      	str	r3, [sp, #12]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	9302      	str	r3, [sp, #8]
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f80e 	bl	8002958 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800293c:	69f8      	ldr	r0, [r7, #28]
 800293e:	f000 f899 	bl	8002a74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e002      	b.n	800294e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800294c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800294e:	69bb      	ldr	r3, [r7, #24]
    }
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	461a      	mov	r2, r3
 8002970:	21a5      	movs	r1, #165	; 0xa5
 8002972:	f004 fad1 	bl	8006f18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002980:	3b01      	subs	r3, #1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <prvInitialiseNewTask+0x58>
        __asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	617b      	str	r3, [r7, #20]
    }
 80029ac:	bf00      	nop
 80029ae:	e7fe      	b.n	80029ae <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01e      	beq.n	80029f4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e012      	b.n	80029e2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	7819      	ldrb	r1, [r3, #0]
 80029c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	3334      	adds	r3, #52	; 0x34
 80029cc:	460a      	mov	r2, r1
 80029ce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	3301      	adds	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	d9e9      	bls.n	80029bc <prvInitialiseNewTask+0x64>
 80029e8:	e000      	b.n	80029ec <prvInitialiseNewTask+0x94>
            {
                break;
 80029ea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d90a      	bls.n	8002a10 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	613b      	str	r3, [r7, #16]
    }
 8002a0c:	bf00      	nop
 8002a0e:	e7fe      	b.n	8002a0e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d901      	bls.n	8002a1a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a16:	2304      	movs	r3, #4
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a24:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	3304      	adds	r3, #4
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fbc6 	bl	80021bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	3318      	adds	r3, #24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fbc1 	bl	80021bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	f1c3 0205 	rsb	r2, r3, #5
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	69b8      	ldr	r0, [r7, #24]
 8002a56:	f001 f933 	bl	8003cc0 <pxPortInitialiseStack>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a6c:	bf00      	nop
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a74:	b5b0      	push	{r4, r5, r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a7c:	f001 faca 	bl	8004014 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a80:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <prvAddNewTaskToReadyList+0x134>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	4a48      	ldr	r2, [pc, #288]	; (8002ba8 <prvAddNewTaskToReadyList+0x134>)
 8002a88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a8a:	4b48      	ldr	r3, [pc, #288]	; (8002bac <prvAddNewTaskToReadyList+0x138>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a92:	4a46      	ldr	r2, [pc, #280]	; (8002bac <prvAddNewTaskToReadyList+0x138>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <prvAddNewTaskToReadyList+0x134>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d110      	bne.n	8002ac2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002aa0:	f000 fd52 	bl	8003548 <prvInitialiseTaskLists>
 8002aa4:	e00d      	b.n	8002ac2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <prvAddNewTaskToReadyList+0x13c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <prvAddNewTaskToReadyList+0x138>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d802      	bhi.n	8002ac2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002abc:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <prvAddNewTaskToReadyList+0x138>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ac2:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <prvAddNewTaskToReadyList+0x140>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <prvAddNewTaskToReadyList+0x140>)
 8002aca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <prvAddNewTaskToReadyList+0x140>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <prvAddNewTaskToReadyList+0x94>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 ff89 	bl	80069f4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	461d      	mov	r5, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461c      	mov	r4, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	1ae3      	subs	r3, r4, r3
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	462b      	mov	r3, r5
 8002b04:	f001 fe2e 	bl	8004764 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fff6 	bl	8006afc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <prvAddNewTaskToReadyList+0x144>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <prvAddNewTaskToReadyList+0x144>)
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b26:	4925      	ldr	r1, [pc, #148]	; (8002bbc <prvAddNewTaskToReadyList+0x148>)
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3304      	adds	r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	3204      	adds	r2, #4
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1d1a      	adds	r2, r3, #4
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <prvAddNewTaskToReadyList+0x148>)
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	615a      	str	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <prvAddNewTaskToReadyList+0x148>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	480e      	ldr	r0, [pc, #56]	; (8002bbc <prvAddNewTaskToReadyList+0x148>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4403      	add	r3, r0
 8002b8c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b8e:	f001 fa71 	bl	8004074 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <prvAddNewTaskToReadyList+0x13c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <prvAddNewTaskToReadyList+0x138>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000200 	.word	0x20000200
 8002bac:	20000128 	.word	0x20000128
 8002bb0:	2000020c 	.word	0x2000020c
 8002bb4:	2000021c 	.word	0x2000021c
 8002bb8:	20000208 	.word	0x20000208
 8002bbc:	2000012c 	.word	0x2000012c

08002bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002bc6:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <vTaskStartScheduler+0xa4>)
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2282      	movs	r2, #130	; 0x82
 8002bd2:	4925      	ldr	r1, [pc, #148]	; (8002c68 <vTaskStartScheduler+0xa8>)
 8002bd4:	4825      	ldr	r0, [pc, #148]	; (8002c6c <vTaskStartScheduler+0xac>)
 8002bd6:	f7ff fe79 	bl	80028cc <xTaskCreate>
 8002bda:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002be2:	f000 fde9 	bl	80037b8 <xTimerCreateTimerTask>
 8002be6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d124      	bne.n	8002c38 <vTaskStartScheduler+0x78>
        __asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	60bb      	str	r3, [r7, #8]
    }
 8002c00:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <vTaskStartScheduler+0xb0>)
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <vTaskStartScheduler+0xb4>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <vTaskStartScheduler+0xb8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <vTaskStartScheduler+0xbc>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <vTaskStartScheduler+0xa4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d102      	bne.n	8002c28 <vTaskStartScheduler+0x68>
 8002c22:	f003 fecb 	bl	80069bc <SEGGER_SYSVIEW_OnIdle>
 8002c26:	e004      	b.n	8002c32 <vTaskStartScheduler+0x72>
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <vTaskStartScheduler+0xbc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 ff23 	bl	8006a78 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002c32:	f001 f8cf 	bl	8003dd4 <xPortStartScheduler>
 8002c36:	e00e      	b.n	8002c56 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3e:	d10a      	bne.n	8002c56 <vTaskStartScheduler+0x96>
        __asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	607b      	str	r3, [r7, #4]
    }
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <vTaskStartScheduler+0xc0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000224 	.word	0x20000224
 8002c68:	08007888 	.word	0x08007888
 8002c6c:	08003525 	.word	0x08003525
 8002c70:	20000220 	.word	0x20000220
 8002c74:	2000020c 	.word	0x2000020c
 8002c78:	20000204 	.word	0x20000204
 8002c7c:	20000128 	.word	0x20000128
 8002c80:	2000000c 	.word	0x2000000c

08002c84 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <vTaskSuspendAll+0x18>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a03      	ldr	r2, [pc, #12]	; (8002c9c <vTaskSuspendAll+0x18>)
 8002c90:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	20000228 	.word	0x20000228

08002ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002cae:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <xTaskResumeAll+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <xTaskResumeAll+0x2c>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	607b      	str	r3, [r7, #4]
    }
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ccc:	f001 f9a2 	bl	8004014 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <xTaskResumeAll+0x1c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	4a63      	ldr	r2, [pc, #396]	; (8002e64 <xTaskResumeAll+0x1c4>)
 8002cd8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cda:	4b62      	ldr	r3, [pc, #392]	; (8002e64 <xTaskResumeAll+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 80b8 	bne.w	8002e54 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ce4:	4b60      	ldr	r3, [pc, #384]	; (8002e68 <xTaskResumeAll+0x1c8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80b3 	beq.w	8002e54 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cee:	e08e      	b.n	8002e0e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <xTaskResumeAll+0x1cc>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	6a12      	ldr	r2, [r2, #32]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	69d2      	ldr	r2, [r2, #28]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3318      	adds	r3, #24
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d103      	bne.n	8002d26 <xTaskResumeAll+0x86>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	6a1a      	ldr	r2, [r3, #32]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	68d2      	ldr	r2, [r2, #12]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	6892      	ldr	r2, [r2, #8]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	3304      	adds	r3, #4
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d103      	bne.n	8002d64 <xTaskResumeAll+0xc4>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2200      	movs	r2, #0
 8002d68:	615a      	str	r2, [r3, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	1e5a      	subs	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fec0 	bl	8006afc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2201      	movs	r2, #1
 8002d82:	409a      	lsls	r2, r3
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <xTaskResumeAll+0x1d0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	4a39      	ldr	r2, [pc, #228]	; (8002e70 <xTaskResumeAll+0x1d0>)
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d92:	4938      	ldr	r1, [pc, #224]	; (8002e74 <xTaskResumeAll+0x1d4>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	3204      	adds	r2, #4
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <xTaskResumeAll+0x1d4>)
 8002dd2:	441a      	add	r2, r3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	615a      	str	r2, [r3, #20]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4925      	ldr	r1, [pc, #148]	; (8002e74 <xTaskResumeAll+0x1d4>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1c59      	adds	r1, r3, #1
 8002dec:	4821      	ldr	r0, [pc, #132]	; (8002e74 <xTaskResumeAll+0x1d4>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4403      	add	r3, r0
 8002df8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <xTaskResumeAll+0x1d8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <xTaskResumeAll+0x1dc>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <xTaskResumeAll+0x1cc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f47f af6c 	bne.w	8002cf0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e1e:	f000 fc11 	bl	8003644 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <xTaskResumeAll+0x1e0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e2e:	f000 f84b 	bl	8002ec8 <xTaskIncrementTick>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <xTaskResumeAll+0x1dc>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f1      	bne.n	8002e2e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <xTaskResumeAll+0x1e0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <xTaskResumeAll+0x1dc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e54:	f001 f90e 	bl	8004074 <vPortExitCritical>

    return xAlreadyYielded;
 8002e58:	697b      	ldr	r3, [r7, #20]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000228 	.word	0x20000228
 8002e68:	20000200 	.word	0x20000200
 8002e6c:	200001c0 	.word	0x200001c0
 8002e70:	20000208 	.word	0x20000208
 8002e74:	2000012c 	.word	0x2000012c
 8002e78:	20000128 	.word	0x20000128
 8002e7c:	20000214 	.word	0x20000214
 8002e80:	20000210 	.word	0x20000210

08002e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <xTaskGetTickCount+0x1c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000204 	.word	0x20000204

08002ea4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eaa:	f001 f99f 	bl	80041ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <xTaskGetTickCountFromISR+0x20>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002eb8:	683b      	ldr	r3, [r7, #0]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000204 	.word	0x20000204

08002ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ed2:	4b70      	ldr	r3, [pc, #448]	; (8003094 <xTaskIncrementTick+0x1cc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 80d1 	bne.w	800307e <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002edc:	4b6e      	ldr	r3, [pc, #440]	; (8003098 <xTaskIncrementTick+0x1d0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ee4:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <xTaskIncrementTick+0x1d0>)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d120      	bne.n	8002f32 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <xTaskIncrementTick+0x1d4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <xTaskIncrementTick+0x48>
        __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	607b      	str	r3, [r7, #4]
    }
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <xTaskIncrementTick+0x46>
 8002f10:	4b62      	ldr	r3, [pc, #392]	; (800309c <xTaskIncrementTick+0x1d4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <xTaskIncrementTick+0x1d8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a60      	ldr	r2, [pc, #384]	; (800309c <xTaskIncrementTick+0x1d4>)
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4a60      	ldr	r2, [pc, #384]	; (80030a0 <xTaskIncrementTick+0x1d8>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b5f      	ldr	r3, [pc, #380]	; (80030a4 <xTaskIncrementTick+0x1dc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	4a5e      	ldr	r2, [pc, #376]	; (80030a4 <xTaskIncrementTick+0x1dc>)
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	f000 fb89 	bl	8003644 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f32:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <xTaskIncrementTick+0x1e0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f0c0 80a5 	bcc.w	8003088 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <xTaskIncrementTick+0x1d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f48:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <xTaskIncrementTick+0x1e0>)
 8002f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f4e:	601a      	str	r2, [r3, #0]
                    break;
 8002f50:	e09a      	b.n	8003088 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f52:	4b52      	ldr	r3, [pc, #328]	; (800309c <xTaskIncrementTick+0x1d4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d203      	bcs.n	8002f72 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f6a:	4a4f      	ldr	r2, [pc, #316]	; (80030a8 <xTaskIncrementTick+0x1e0>)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f70:	e08a      	b.n	8003088 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	68d2      	ldr	r2, [r2, #12]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	6892      	ldr	r2, [r2, #8]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	3304      	adds	r3, #4
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d103      	bne.n	8002fa0 <xTaskIncrementTick+0xd8>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1e5a      	subs	r2, r3, #1
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01e      	beq.n	8002ff6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	6a12      	ldr	r2, [r2, #32]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	69d2      	ldr	r2, [r2, #28]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	3318      	adds	r3, #24
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d103      	bne.n	8002fe6 <xTaskIncrementTick+0x11e>
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 fd7f 	bl	8006afc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	2201      	movs	r2, #1
 8003004:	409a      	lsls	r2, r3
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <xTaskIncrementTick+0x1e4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	4a27      	ldr	r2, [pc, #156]	; (80030ac <xTaskIncrementTick+0x1e4>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	4926      	ldr	r1, [pc, #152]	; (80030b0 <xTaskIncrementTick+0x1e8>)
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3304      	adds	r3, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	3204      	adds	r2, #4
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	1d1a      	adds	r2, r3, #4
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <xTaskIncrementTick+0x1e8>)
 8003054:	441a      	add	r2, r3
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	615a      	str	r2, [r3, #20]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305e:	4914      	ldr	r1, [pc, #80]	; (80030b0 <xTaskIncrementTick+0x1e8>)
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	1c59      	adds	r1, r3, #1
 800306e:	4810      	ldr	r0, [pc, #64]	; (80030b0 <xTaskIncrementTick+0x1e8>)
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4403      	add	r3, r0
 800307a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800307c:	e75f      	b.n	8002f3e <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <xTaskIncrementTick+0x1ec>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <xTaskIncrementTick+0x1ec>)
 8003086:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800308a:	4618      	mov	r0, r3
 800308c:	3728      	adds	r7, #40	; 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000228 	.word	0x20000228
 8003098:	20000204 	.word	0x20000204
 800309c:	200001b8 	.word	0x200001b8
 80030a0:	200001bc 	.word	0x200001bc
 80030a4:	20000218 	.word	0x20000218
 80030a8:	20000220 	.word	0x20000220
 80030ac:	20000208 	.word	0x20000208
 80030b0:	2000012c 	.word	0x2000012c
 80030b4:	20000210 	.word	0x20000210

080030b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <vTaskSwitchContext+0xbc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030c6:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <vTaskSwitchContext+0xc0>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80030cc:	e04d      	b.n	800316a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <vTaskSwitchContext+0xc0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <vTaskSwitchContext+0xc4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	f1c3 031f 	rsb	r3, r3, #31
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	4925      	ldr	r1, [pc, #148]	; (8003180 <vTaskSwitchContext+0xc8>)
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <vTaskSwitchContext+0x5c>
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	607b      	str	r3, [r7, #4]
    }
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <vTaskSwitchContext+0x5a>
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <vTaskSwitchContext+0xc8>)
 8003120:	4413      	add	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	3308      	adds	r3, #8
 8003136:	429a      	cmp	r2, r3
 8003138:	d104      	bne.n	8003144 <vTaskSwitchContext+0x8c>
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <vTaskSwitchContext+0xcc>)
 800314c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <vTaskSwitchContext+0xcc>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <vTaskSwitchContext+0xd0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d102      	bne.n	8003160 <vTaskSwitchContext+0xa8>
 800315a:	f003 fc2f 	bl	80069bc <SEGGER_SYSVIEW_OnIdle>
}
 800315e:	e004      	b.n	800316a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003160:	4b08      	ldr	r3, [pc, #32]	; (8003184 <vTaskSwitchContext+0xcc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fc87 	bl	8006a78 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000228 	.word	0x20000228
 8003178:	20000214 	.word	0x20000214
 800317c:	20000208 	.word	0x20000208
 8003180:	2000012c 	.word	0x2000012c
 8003184:	20000128 	.word	0x20000128
 8003188:	20000224 	.word	0x20000224

0800318c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	60fb      	str	r3, [r7, #12]
    }
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <vTaskPlaceOnEventList+0x44>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3318      	adds	r3, #24
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff f80b 	bl	80021d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031c0:	2101      	movs	r1, #1
 80031c2:	6838      	ldr	r0, [r7, #0]
 80031c4:	f000 fa78 	bl	80036b8 <prvAddCurrentTaskToDelayedList>
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000128 	.word	0x20000128

080031d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10a      	bne.n	80031fc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	613b      	str	r3, [r7, #16]
    }
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	4b17      	ldr	r3, [pc, #92]	; (8003260 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	61da      	str	r2, [r3, #28]
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <vTaskPlaceOnEventListRestricted+0x8c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	6892      	ldr	r2, [r2, #8]
 8003212:	621a      	str	r2, [r3, #32]
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	3218      	adds	r2, #24
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f103 0218 	add.w	r2, r3, #24
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <vTaskPlaceOnEventListRestricted+0x8c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003248:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800324a:	2024      	movs	r0, #36	; 0x24
 800324c:	f002 feb6 	bl	8005fbc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	68b8      	ldr	r0, [r7, #8]
 8003254:	f000 fa30 	bl	80036b8 <prvAddCurrentTaskToDelayedList>
    }
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000128 	.word	0x20000128

08003264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60fb      	str	r3, [r7, #12]
    }
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	6a3a      	ldr	r2, [r7, #32]
 800329c:	6a12      	ldr	r2, [r2, #32]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	69d2      	ldr	r2, [r2, #28]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	3318      	adds	r3, #24
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d103      	bne.n	80032be <xTaskRemoveFromEventList+0x5a>
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ce:	4b4b      	ldr	r3, [pc, #300]	; (80033fc <xTaskRemoveFromEventList+0x198>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d162      	bne.n	800339c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	68d2      	ldr	r2, [r2, #12]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	6892      	ldr	r2, [r2, #8]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	3304      	adds	r3, #4
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d103      	bne.n	8003304 <xTaskRemoveFromEventList+0xa0>
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2200      	movs	r2, #0
 8003308:	615a      	str	r2, [r3, #20]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fbf0 	bl	8006afc <SEGGER_SYSVIEW_OnTaskStartReady>
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2201      	movs	r2, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <xTaskRemoveFromEventList+0x19c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	4a35      	ldr	r2, [pc, #212]	; (8003400 <xTaskRemoveFromEventList+0x19c>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003332:	4934      	ldr	r1, [pc, #208]	; (8003404 <xTaskRemoveFromEventList+0x1a0>)
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3304      	adds	r3, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	3204      	adds	r2, #4
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	1d1a      	adds	r2, r3, #4
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4a24      	ldr	r2, [pc, #144]	; (8003404 <xTaskRemoveFromEventList+0x1a0>)
 8003372:	441a      	add	r2, r3
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	615a      	str	r2, [r3, #20]
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337c:	4921      	ldr	r1, [pc, #132]	; (8003404 <xTaskRemoveFromEventList+0x1a0>)
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	481d      	ldr	r0, [pc, #116]	; (8003404 <xTaskRemoveFromEventList+0x1a0>)
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4403      	add	r3, r0
 8003398:	6019      	str	r1, [r3, #0]
 800339a:	e01b      	b.n	80033d4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <xTaskRemoveFromEventList+0x1a4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	61da      	str	r2, [r3, #28]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	621a      	str	r2, [r3, #32]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	3218      	adds	r2, #24
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f103 0218 	add.w	r2, r3, #24
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	4a10      	ldr	r2, [pc, #64]	; (8003408 <xTaskRemoveFromEventList+0x1a4>)
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <xTaskRemoveFromEventList+0x1a4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <xTaskRemoveFromEventList+0x1a4>)
 80033d2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <xTaskRemoveFromEventList+0x1a8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	429a      	cmp	r2, r3
 80033e0:	d905      	bls.n	80033ee <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <xTaskRemoveFromEventList+0x1ac>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e001      	b.n	80033f2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000228 	.word	0x20000228
 8003400:	20000208 	.word	0x20000208
 8003404:	2000012c 	.word	0x2000012c
 8003408:	200001c0 	.word	0x200001c0
 800340c:	20000128 	.word	0x20000128
 8003410:	20000214 	.word	0x20000214

08003414 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <vTaskInternalSetTimeOutState+0x24>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <vTaskInternalSetTimeOutState+0x28>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	605a      	str	r2, [r3, #4]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	20000218 	.word	0x20000218
 800343c:	20000204 	.word	0x20000204

08003440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	613b      	str	r3, [r7, #16]
    }
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60fb      	str	r3, [r7, #12]
    }
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003482:	f000 fdc7 	bl	8004014 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003486:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <xTaskCheckForTimeOut+0xc4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349e:	d102      	bne.n	80034a6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	e026      	b.n	80034f4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <xTaskCheckForTimeOut+0xc8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d00a      	beq.n	80034c8 <xTaskCheckForTimeOut+0x88>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d305      	bcc.n	80034c8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e015      	b.n	80034f4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d20b      	bcs.n	80034ea <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ff98 	bl	8003414 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e004      	b.n	80034f4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034f4:	f000 fdbe 	bl	8004074 <vPortExitCritical>

    return xReturn;
 80034f8:	69fb      	ldr	r3, [r7, #28]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000204 	.word	0x20000204
 8003508:	20000218 	.word	0x20000218

0800350c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <vTaskMissedYield+0x14>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	20000214 	.word	0x20000214

08003524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800352c:	f000 f84c 	bl	80035c8 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <prvIdleTask+0x20>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003540:	e7f4      	b.n	800352c <prvIdleTask+0x8>
 8003542:	bf00      	nop
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	e00c      	b.n	800356e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <prvInitialiseTaskLists+0x60>)
 8003560:	4413      	add	r3, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fe0a 	bl	800217c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3301      	adds	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d9ef      	bls.n	8003554 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003574:	480d      	ldr	r0, [pc, #52]	; (80035ac <prvInitialiseTaskLists+0x64>)
 8003576:	f7fe fe01 	bl	800217c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800357a:	480d      	ldr	r0, [pc, #52]	; (80035b0 <prvInitialiseTaskLists+0x68>)
 800357c:	f7fe fdfe 	bl	800217c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <prvInitialiseTaskLists+0x6c>)
 8003582:	f7fe fdfb 	bl	800217c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003586:	480c      	ldr	r0, [pc, #48]	; (80035b8 <prvInitialiseTaskLists+0x70>)
 8003588:	f7fe fdf8 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800358c:	480b      	ldr	r0, [pc, #44]	; (80035bc <prvInitialiseTaskLists+0x74>)
 800358e:	f7fe fdf5 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <prvInitialiseTaskLists+0x78>)
 8003594:	4a05      	ldr	r2, [pc, #20]	; (80035ac <prvInitialiseTaskLists+0x64>)
 8003596:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <prvInitialiseTaskLists+0x7c>)
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <prvInitialiseTaskLists+0x68>)
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2000012c 	.word	0x2000012c
 80035ac:	20000190 	.word	0x20000190
 80035b0:	200001a4 	.word	0x200001a4
 80035b4:	200001c0 	.word	0x200001c0
 80035b8:	200001d4 	.word	0x200001d4
 80035bc:	200001ec 	.word	0x200001ec
 80035c0:	200001b8 	.word	0x200001b8
 80035c4:	200001bc 	.word	0x200001bc

080035c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ce:	e019      	b.n	8003604 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80035d0:	f000 fd20 	bl	8004014 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b10      	ldr	r3, [pc, #64]	; (8003618 <prvCheckTasksWaitingTermination+0x50>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe fe31 	bl	8002248 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035ee:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80035fa:	f000 fd3b 	bl	8004074 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f810 	bl	8003624 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <prvCheckTasksWaitingTermination+0x58>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e1      	bne.n	80035d0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200001d4 	.word	0x200001d4
 800361c:	20000200 	.word	0x20000200
 8003620:	200001e8 	.word	0x200001e8

08003624 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fed5 	bl	80043e0 <vPortFree>
            vPortFree( pxTCB );
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fed2 	bl	80043e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <prvResetNextTaskUnblockTime+0x30>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <prvResetNextTaskUnblockTime+0x34>)
 8003654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003658:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800365a:	e005      	b.n	8003668 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <prvResetNextTaskUnblockTime+0x30>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <prvResetNextTaskUnblockTime+0x34>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	200001b8 	.word	0x200001b8
 8003678:	20000220 	.word	0x20000220

0800367c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <xTaskGetSchedulerState+0x34>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800368a:	2301      	movs	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	e008      	b.n	80036a2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <xTaskGetSchedulerState+0x38>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003698:	2302      	movs	r3, #2
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e001      	b.n	80036a2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036a2:	687b      	ldr	r3, [r7, #4]
    }
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	2000020c 	.word	0x2000020c
 80036b4:	20000228 	.word	0x20000228

080036b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036c2:	4b36      	ldr	r3, [pc, #216]	; (800379c <prvAddCurrentTaskToDelayedList+0xe4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fdba 	bl	8002248 <uxListRemove>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2201      	movs	r2, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4013      	ands	r3, r2
 80036ee:	4a2d      	ldr	r2, [pc, #180]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f8:	d124      	bne.n	8003744 <prvAddCurrentTaskToDelayedList+0x8c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d021      	beq.n	8003744 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	6892      	ldr	r2, [r2, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	3204      	adds	r2, #4
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003734:	615a      	str	r2, [r3, #20]
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003742:	e026      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d209      	bcs.n	8003770 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fe fd34 	bl	80021d6 <vListInsert>
}
 800376e:	e010      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe fd2a 	bl	80021d6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d202      	bcs.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6013      	str	r3, [r2, #0]
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000204 	.word	0x20000204
 80037a0:	20000128 	.word	0x20000128
 80037a4:	20000208 	.word	0x20000208
 80037a8:	200001ec 	.word	0x200001ec
 80037ac:	200001bc 	.word	0x200001bc
 80037b0:	200001b8 	.word	0x200001b8
 80037b4:	20000220 	.word	0x20000220

080037b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80037c2:	f000 fa47 	bl	8003c54 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <xTimerCreateTimerTask+0x54>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <xTimerCreateTimerTask+0x58>)
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2302      	movs	r3, #2
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037dc:	490d      	ldr	r1, [pc, #52]	; (8003814 <xTimerCreateTimerTask+0x5c>)
 80037de:	480e      	ldr	r0, [pc, #56]	; (8003818 <xTimerCreateTimerTask+0x60>)
 80037e0:	f7ff f874 	bl	80028cc <xTaskCreate>
 80037e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	603b      	str	r3, [r7, #0]
    }
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003802:	687b      	ldr	r3, [r7, #4]
    }
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	2000025c 	.word	0x2000025c
 8003810:	20000260 	.word	0x20000260
 8003814:	08007890 	.word	0x08007890
 8003818:	080038c1 	.word	0x080038c1

0800381c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003828:	e008      	b.n	800383c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4413      	add	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	18d1      	adds	r1, r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f8dd 	bl	8003a08 <prvInsertTimerInActiveList>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ea      	bne.n	800382a <prvReloadTimer+0xe>
        }
    }
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <prvProcessExpiredTimer+0x5c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fce5 	bl	8002248 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff ffc3 	bl	800381c <prvReloadTimer>
 8003896:	e008      	b.n	80038aa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	4798      	blx	r3
    }
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000254 	.word	0x20000254

080038c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038c8:	f107 0308 	add.w	r3, r7, #8
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f857 	bl	8003980 <prvGetNextExpireTime>
 80038d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4619      	mov	r1, r3
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f803 	bl	80038e4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80038de:	f000 f8d5 	bl	8003a8c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038e2:	e7f1      	b.n	80038c8 <prvTimerTask+0x8>

080038e4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80038ee:	f7ff f9c9 	bl	8002c84 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f866 	bl	80039c8 <prvSampleTimeNow>
 80038fc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d130      	bne.n	8003966 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <prvProcessTimerOrBlockTask+0x3c>
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	429a      	cmp	r2, r3
 8003910:	d806      	bhi.n	8003920 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003912:	f7ff f9c5 	bl	8002ca0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ffa1 	bl	8003860 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800391e:	e024      	b.n	800396a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <prvProcessTimerOrBlockTask+0x90>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <prvProcessTimerOrBlockTask+0x50>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <prvProcessTimerOrBlockTask+0x52>
 8003934:	2300      	movs	r3, #0
 8003936:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <prvProcessTimerOrBlockTask+0x94>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	f7fe ff8d 	bl	8002864 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800394a:	f7ff f9a9 	bl	8002ca0 <xTaskResumeAll>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <prvProcessTimerOrBlockTask+0x98>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
    }
 8003964:	e001      	b.n	800396a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003966:	f7ff f99b 	bl	8002ca0 <xTaskResumeAll>
    }
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000258 	.word	0x20000258
 8003978:	2000025c 	.word	0x2000025c
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <prvGetNextExpireTime+0x44>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <prvGetNextExpireTime+0x16>
 8003992:	2201      	movs	r2, #1
 8003994:	e000      	b.n	8003998 <prvGetNextExpireTime+0x18>
 8003996:	2200      	movs	r2, #0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <prvGetNextExpireTime+0x44>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e001      	b.n	80039b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039b4:	68fb      	ldr	r3, [r7, #12]
    }
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000254 	.word	0x20000254

080039c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80039d0:	f7ff fa58 	bl	8002e84 <xTaskGetTickCount>
 80039d4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <prvSampleTimeNow+0x3c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d205      	bcs.n	80039ec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80039e0:	f000 f912 	bl	8003c08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e002      	b.n	80039f2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <prvSampleTimeNow+0x3c>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80039f8:	68fb      	ldr	r3, [r7, #12]
    }
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000264 	.word	0x20000264

08003a08 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d812      	bhi.n	8003a54 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e01b      	b.n	8003a7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <prvInsertTimerInActiveList+0x7c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fe fbc2 	bl	80021d6 <vListInsert>
 8003a52:	e012      	b.n	8003a7a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d206      	bcs.n	8003a6a <prvInsertTimerInActiveList+0x62>
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a64:	2301      	movs	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e007      	b.n	8003a7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <prvInsertTimerInActiveList+0x80>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f7fe fbae 	bl	80021d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a7a:	697b      	ldr	r3, [r7, #20]
    }
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000258 	.word	0x20000258
 8003a88:	20000254 	.word	0x20000254

08003a8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a92:	e0a6      	b.n	8003be2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f2c0 80a2 	blt.w	8003be0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fbcb 	bl	8002248 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ab2:	1d3b      	adds	r3, r7, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff87 	bl	80039c8 <prvSampleTimeNow>
 8003aba:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	f200 808e 	bhi.w	8003be2 <prvProcessReceivedCommands+0x156>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <prvProcessReceivedCommands+0x40>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003af1 	.word	0x08003af1
 8003ad4:	08003b59 	.word	0x08003b59
 8003ad8:	08003b6d 	.word	0x08003b6d
 8003adc:	08003bb7 	.word	0x08003bb7
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003af1 	.word	0x08003af1
 8003ae8:	08003b59 	.word	0x08003b59
 8003aec:	08003b6d 	.word	0x08003b6d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	18d1      	adds	r1, r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	69f8      	ldr	r0, [r7, #28]
 8003b10:	f7ff ff7a 	bl	8003a08 <prvInsertTimerInActiveList>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d063      	beq.n	8003be2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	4413      	add	r3, r2
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4619      	mov	r1, r3
 8003b34:	69f8      	ldr	r0, [r7, #28]
 8003b36:	f7ff fe71 	bl	800381c <prvReloadTimer>
 8003b3a:	e008      	b.n	8003b4e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	69f8      	ldr	r0, [r7, #28]
 8003b54:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b56:	e044      	b.n	8003be2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b6a:	e03a      	b.n	8003be2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	617b      	str	r3, [r7, #20]
    }
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	18d1      	adds	r1, r2, r3
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	69f8      	ldr	r0, [r7, #28]
 8003bb0:	f7ff ff2a 	bl	8003a08 <prvInsertTimerInActiveList>
                        break;
 8003bb4:	e015      	b.n	8003be2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003bc4:	69f8      	ldr	r0, [r7, #28]
 8003bc6:	f000 fc0b 	bl	80043e0 <vPortFree>
 8003bca:	e00a      	b.n	8003be2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003bde:	e000      	b.n	8003be2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003be0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <prvProcessReceivedCommands+0x178>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f107 0108 	add.w	r1, r7, #8
 8003bea:	2200      	movs	r2, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fc4f 	bl	8002490 <xQueueReceive>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af4d 	bne.w	8003a94 <prvProcessReceivedCommands+0x8>
        }
    }
 8003bfa:	bf00      	nop
 8003bfc:	bf00      	nop
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000025c 	.word	0x2000025c

08003c08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c0e:	e009      	b.n	8003c24 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c1e:	6838      	ldr	r0, [r7, #0]
 8003c20:	f7ff fe1e 	bl	8003860 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <prvSwitchTimerLists+0x48>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c3a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <prvSwitchTimerLists+0x48>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6013      	str	r3, [r2, #0]
    }
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000254 	.word	0x20000254
 8003c50:	20000258 	.word	0x20000258

08003c54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c58:	f000 f9dc 	bl	8004014 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11d      	bne.n	8003ca0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c64:	4811      	ldr	r0, [pc, #68]	; (8003cac <prvCheckForValidListAndQueue+0x58>)
 8003c66:	f7fe fa89 	bl	800217c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c6a:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <prvCheckForValidListAndQueue+0x5c>)
 8003c6c:	f7fe fa86 	bl	800217c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <prvCheckForValidListAndQueue+0x60>)
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <prvCheckForValidListAndQueue+0x58>)
 8003c74:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <prvCheckForValidListAndQueue+0x64>)
 8003c78:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <prvCheckForValidListAndQueue+0x5c>)
 8003c7a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	210c      	movs	r1, #12
 8003c80:	200a      	movs	r0, #10
 8003c82:	f7fe fb8d 	bl	80023a0 <xQueueGenericCreate>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c8a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4908      	ldr	r1, [pc, #32]	; (8003cbc <prvCheckForValidListAndQueue+0x68>)
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fd8c 	bl	80027b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ca0:	f000 f9e8 	bl	8004074 <vPortExitCritical>
    }
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	2000025c 	.word	0x2000025c
 8003cac:	2000022c 	.word	0x2000022c
 8003cb0:	20000240 	.word	0x20000240
 8003cb4:	20000254 	.word	0x20000254
 8003cb8:	20000258 	.word	0x20000258
 8003cbc:	08007898 	.word	0x08007898

08003cc0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3b04      	subs	r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b04      	subs	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <pxPortInitialiseStack+0x64>)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b14      	subs	r3, #20
 8003cfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b04      	subs	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f06f 0202 	mvn.w	r2, #2
 8003d0e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3b20      	subs	r3, #32
 8003d14:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	08003d29 	.word	0x08003d29

08003d28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <prvTaskExitError+0x54>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3a:	d00a      	beq.n	8003d52 <prvTaskExitError+0x2a>
        __asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
    }
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <prvTaskExitError+0x28>
        __asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60bb      	str	r3, [r7, #8]
    }
 8003d64:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d66:	bf00      	nop
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0fc      	beq.n	8003d68 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	20000010 	.word	0x20000010

08003d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <pxCurrentTCBConst2>)
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	6808      	ldr	r0, [r1, #0]
 8003d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8a:	f380 8809 	msr	PSP, r0
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f380 8811 	msr	BASEPRI, r0
 8003d9a:	4770      	bx	lr
 8003d9c:	f3af 8000 	nop.w

08003da0 <pxCurrentTCBConst2>:
 8003da0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003da8:	4808      	ldr	r0, [pc, #32]	; (8003dcc <prvPortStartFirstTask+0x24>)
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	6800      	ldr	r0, [r0, #0]
 8003dae:	f380 8808 	msr	MSP, r0
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8814 	msr	CONTROL, r0
 8003dba:	b662      	cpsie	i
 8003dbc:	b661      	cpsie	f
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	df00      	svc	0
 8003dc8:	bf00      	nop
 8003dca:	0000      	.short	0x0000
 8003dcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop

08003dd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dda:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <xPortStartScheduler+0x120>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a46      	ldr	r2, [pc, #280]	; (8003ef8 <xPortStartScheduler+0x124>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10a      	bne.n	8003dfa <xPortStartScheduler+0x26>
        __asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	613b      	str	r3, [r7, #16]
    }
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <xPortStartScheduler+0x120>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3f      	ldr	r2, [pc, #252]	; (8003efc <xPortStartScheduler+0x128>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10a      	bne.n	8003e1a <xPortStartScheduler+0x46>
        __asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
    }
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <xPortStartScheduler+0x12c>)
 8003e1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <xPortStartScheduler+0x130>)
 8003e40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e44:	2207      	movs	r2, #7
 8003e46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e48:	e009      	b.n	8003e5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003e4a:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	4a2d      	ldr	r2, [pc, #180]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d0ef      	beq.n	8003e4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d00a      	beq.n	8003e8c <xPortStartScheduler+0xb8>
        __asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	60bb      	str	r3, [r7, #8]
    }
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <xPortStartScheduler+0x134>)
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <xPortStartScheduler+0x138>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <xPortStartScheduler+0x138>)
 8003eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <xPortStartScheduler+0x138>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <xPortStartScheduler+0x138>)
 8003ebc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ec0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ec2:	f000 f963 	bl	800418c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <xPortStartScheduler+0x13c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ecc:	f000 f982 	bl	80041d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <xPortStartScheduler+0x140>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0f      	ldr	r2, [pc, #60]	; (8003f14 <xPortStartScheduler+0x140>)
 8003ed6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003eda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003edc:	f7ff ff64 	bl	8003da8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ee0:	f7ff f8ea 	bl	80030b8 <vTaskSwitchContext>
    prvTaskExitError();
 8003ee4:	f7ff ff20 	bl	8003d28 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000ed00 	.word	0xe000ed00
 8003ef8:	410fc271 	.word	0x410fc271
 8003efc:	410fc270 	.word	0x410fc270
 8003f00:	e000e400 	.word	0xe000e400
 8003f04:	20000268 	.word	0x20000268
 8003f08:	2000026c 	.word	0x2000026c
 8003f0c:	e000ed20 	.word	0xe000ed20
 8003f10:	20000010 	.word	0x20000010
 8003f14:	e000ef34 	.word	0xe000ef34

08003f18 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <vInitPrioGroupValue+0xe4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a37      	ldr	r2, [pc, #220]	; (8004000 <vInitPrioGroupValue+0xe8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10a      	bne.n	8003f3e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	613b      	str	r3, [r7, #16]
    }
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <vInitPrioGroupValue+0xe4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a30      	ldr	r2, [pc, #192]	; (8004004 <vInitPrioGroupValue+0xec>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10a      	bne.n	8003f5e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60fb      	str	r3, [r7, #12]
    }
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f5e:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <vInitPrioGroupValue+0xf0>)
 8003f60:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	22ff      	movs	r2, #255	; 0xff
 8003f6e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <vInitPrioGroupValue+0xf4>)
 8003f84:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003f88:	2207      	movs	r2, #7
 8003f8a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f8c:	e009      	b.n	8003fa2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003f96:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d0ef      	beq.n	8003f8e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1c3 0307 	rsb	r3, r3, #7
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d00a      	beq.n	8003fd0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60bb      	str	r3, [r7, #8]
    }
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003fd8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <vInitPrioGroupValue+0xf8>)
 8003fe4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000ed00 	.word	0xe000ed00
 8004000:	410fc271 	.word	0x410fc271
 8004004:	410fc270 	.word	0x410fc270
 8004008:	e000e400 	.word	0xe000e400
 800400c:	20000268 	.word	0x20000268
 8004010:	2000026c 	.word	0x2000026c

08004014 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
        __asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	607b      	str	r3, [r7, #4]
    }
 800402c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <vPortEnterCritical+0x58>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	4a0d      	ldr	r2, [pc, #52]	; (800406c <vPortEnterCritical+0x58>)
 8004036:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <vPortEnterCritical+0x58>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10f      	bne.n	8004060 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <vPortEnterCritical+0x5c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <vPortEnterCritical+0x4c>
        __asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	603b      	str	r3, [r7, #0]
    }
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <vPortEnterCritical+0x4a>
    }
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	20000010 	.word	0x20000010
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <vPortExitCritical+0x50>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <vPortExitCritical+0x24>
        __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	607b      	str	r3, [r7, #4]
    }
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <vPortExitCritical+0x50>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3b01      	subs	r3, #1
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <vPortExitCritical+0x50>)
 80040a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <vPortExitCritical+0x50>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <vPortExitCritical+0x42>
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80040b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000010 	.word	0x20000010
	...

080040d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80040d0:	f3ef 8009 	mrs	r0, PSP
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4b15      	ldr	r3, [pc, #84]	; (8004130 <pxCurrentTCBConst>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f01e 0f10 	tst.w	lr, #16
 80040e0:	bf08      	it	eq
 80040e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	6010      	str	r0, [r2, #0]
 80040ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040f4:	f380 8811 	msr	BASEPRI, r0
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f7fe ffda 	bl	80030b8 <vTaskSwitchContext>
 8004104:	f04f 0000 	mov.w	r0, #0
 8004108:	f380 8811 	msr	BASEPRI, r0
 800410c:	bc09      	pop	{r0, r3}
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	6808      	ldr	r0, [r1, #0]
 8004112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004116:	f01e 0f10 	tst.w	lr, #16
 800411a:	bf08      	it	eq
 800411c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004120:	f380 8809 	msr	PSP, r0
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst>:
 8004130:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
        __asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	607b      	str	r3, [r7, #4]
    }
 8004150:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004152:	f002 fbb9 	bl	80068c8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004156:	f7fe feb7 	bl	8002ec8 <xTaskIncrementTick>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004160:	f002 fc10 	bl	8006984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <SysTick_Handler+0x50>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e001      	b.n	8004172 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800416e:	f002 fbed 	bl	800694c <SEGGER_SYSVIEW_RecordExitISR>
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f383 8811 	msr	BASEPRI, r3
    }
 800417c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <vPortSetupTimerInterrupt+0x34>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <vPortSetupTimerInterrupt+0x38>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <vPortSetupTimerInterrupt+0x3c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <vPortSetupTimerInterrupt+0x40>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <vPortSetupTimerInterrupt+0x44>)
 80041aa:	3b01      	subs	r3, #1
 80041ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <vPortSetupTimerInterrupt+0x34>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000e010 	.word	0xe000e010
 80041c4:	e000e018 	.word	0xe000e018
 80041c8:	20000000 	.word	0x20000000
 80041cc:	10624dd3 	.word	0x10624dd3
 80041d0:	e000e014 	.word	0xe000e014

080041d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80041d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041e4 <vPortEnableVFP+0x10>
 80041d8:	6801      	ldr	r1, [r0, #0]
 80041da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041de:	6001      	str	r1, [r0, #0]
 80041e0:	4770      	bx	lr
 80041e2:	0000      	.short	0x0000
 80041e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop

080041ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80041f2:	f3ef 8305 	mrs	r3, IPSR
 80041f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b0f      	cmp	r3, #15
 80041fc:	d914      	bls.n	8004228 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <vPortValidateInterruptPriority+0x70>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <vPortValidateInterruptPriority+0x74>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	7afa      	ldrb	r2, [r7, #11]
 800420e:	429a      	cmp	r2, r3
 8004210:	d20a      	bcs.n	8004228 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	607b      	str	r3, [r7, #4]
    }
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <vPortValidateInterruptPriority+0x78>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <vPortValidateInterruptPriority+0x7c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d90a      	bls.n	800424e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	603b      	str	r3, [r7, #0]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vPortValidateInterruptPriority+0x60>
    }
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000e3f0 	.word	0xe000e3f0
 8004260:	20000268 	.word	0x20000268
 8004264:	e000ed0c 	.word	0xe000ed0c
 8004268:	2000026c 	.word	0x2000026c

0800426c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004278:	f7fe fd04 	bl	8002c84 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800427c:	4b53      	ldr	r3, [pc, #332]	; (80043cc <pvPortMalloc+0x160>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004284:	f000 f908 	bl	8004498 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d012      	beq.n	80042b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800428e:	2208      	movs	r2, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	3308      	adds	r3, #8
 800429a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	43db      	mvns	r3, r3
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d804      	bhi.n	80042b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	4413      	add	r3, r2
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	e001      	b.n	80042b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	db70      	blt.n	800439c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d06d      	beq.n	800439c <pvPortMalloc+0x130>
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <pvPortMalloc+0x164>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d868      	bhi.n	800439c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042ca:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <pvPortMalloc+0x168>)
 80042cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042ce:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <pvPortMalloc+0x168>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042d4:	e004      	b.n	80042e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d903      	bls.n	80042f2 <pvPortMalloc+0x86>
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f1      	bne.n	80042d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <pvPortMalloc+0x160>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d04f      	beq.n	800439c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2208      	movs	r2, #8
 8004302:	4413      	add	r3, r2
 8004304:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	1ad2      	subs	r2, r2, r3
 8004316:	2308      	movs	r3, #8
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	429a      	cmp	r2, r3
 800431c:	d91f      	bls.n	800435e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800431e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <pvPortMalloc+0xda>
        __asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	613b      	str	r3, [r7, #16]
    }
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004358:	6978      	ldr	r0, [r7, #20]
 800435a:	f000 f8f9 	bl	8004550 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <pvPortMalloc+0x164>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <pvPortMalloc+0x164>)
 800436a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <pvPortMalloc+0x164>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <pvPortMalloc+0x16c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d203      	bcs.n	8004380 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <pvPortMalloc+0x164>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <pvPortMalloc+0x16c>)
 800437e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <pvPortMalloc+0x170>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	4a10      	ldr	r2, [pc, #64]	; (80043dc <pvPortMalloc+0x170>)
 800439a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800439c:	f7fe fc80 	bl	8002ca0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <pvPortMalloc+0x154>
        __asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
    }
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <pvPortMalloc+0x152>
    return pvReturn;
 80043c0:	69fb      	ldr	r3, [r7, #28]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3728      	adds	r7, #40	; 0x28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20012e78 	.word	0x20012e78
 80043d0:	20012e7c 	.word	0x20012e7c
 80043d4:	20012e70 	.word	0x20012e70
 80043d8:	20012e80 	.word	0x20012e80
 80043dc:	20012e84 	.word	0x20012e84

080043e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d049      	beq.n	8004486 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80043f2:	2308      	movs	r3, #8
 80043f4:	425b      	negs	r3, r3
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4413      	add	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	db0a      	blt.n	800441e <vPortFree+0x3e>
        __asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
    }
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <vPortFree+0x5c>
        __asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60bb      	str	r3, [r7, #8]
    }
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01c      	beq.n	8004486 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d118      	bne.n	8004486 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004460:	f7fe fc10 	bl	8002c84 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <vPortFree+0xb0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4413      	add	r3, r2
 800446e:	4a08      	ldr	r2, [pc, #32]	; (8004490 <vPortFree+0xb0>)
 8004470:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004472:	6938      	ldr	r0, [r7, #16]
 8004474:	f000 f86c 	bl	8004550 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <vPortFree+0xb4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	4a05      	ldr	r2, [pc, #20]	; (8004494 <vPortFree+0xb4>)
 8004480:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004482:	f7fe fc0d 	bl	8002ca0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004486:	bf00      	nop
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20012e7c 	.word	0x20012e7c
 8004494:	20012e88 	.word	0x20012e88

08004498 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800449e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80044a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <prvHeapInit+0xa4>)
 80044a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3307      	adds	r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0307 	bic.w	r3, r3, #7
 80044be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	4a1d      	ldr	r2, [pc, #116]	; (800453c <prvHeapInit+0xa4>)
 80044c8:	4413      	add	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044d0:	4a1b      	ldr	r2, [pc, #108]	; (8004540 <prvHeapInit+0xa8>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044d6:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <prvHeapInit+0xa8>)
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80044e4:	2208      	movs	r2, #8
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <prvHeapInit+0xac>)
 80044f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <prvHeapInit+0xac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <prvHeapInit+0xac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	1ad2      	subs	r2, r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <prvHeapInit+0xac>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a08      	ldr	r2, [pc, #32]	; (8004548 <prvHeapInit+0xb0>)
 8004526:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a07      	ldr	r2, [pc, #28]	; (800454c <prvHeapInit+0xb4>)
 800452e:	6013      	str	r3, [r2, #0]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000270 	.word	0x20000270
 8004540:	20012e70 	.word	0x20012e70
 8004544:	20012e78 	.word	0x20012e78
 8004548:	20012e80 	.word	0x20012e80
 800454c:	20012e7c 	.word	0x20012e7c

08004550 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004558:	4b28      	ldr	r3, [pc, #160]	; (80045fc <prvInsertBlockIntoFreeList+0xac>)
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e002      	b.n	8004564 <prvInsertBlockIntoFreeList+0x14>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d8f7      	bhi.n	800455e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4413      	add	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d108      	bne.n	8004592 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	441a      	add	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	441a      	add	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d118      	bne.n	80045d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <prvInsertBlockIntoFreeList+0xb0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d00d      	beq.n	80045ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	441a      	add	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e008      	b.n	80045e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <prvInsertBlockIntoFreeList+0xb0>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e003      	b.n	80045e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d002      	beq.n	80045ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20012e70 	.word	0x20012e70
 8004600:	20012e78 	.word	0x20012e78

08004604 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004608:	4803      	ldr	r0, [pc, #12]	; (8004618 <_cbSendSystemDesc+0x14>)
 800460a:	f002 f907 	bl	800681c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800460e:	4803      	ldr	r0, [pc, #12]	; (800461c <_cbSendSystemDesc+0x18>)
 8004610:	f002 f904 	bl	800681c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004614:	bf00      	nop
 8004616:	bd80      	pop	{r7, pc}
 8004618:	080078a0 	.word	0x080078a0
 800461c:	080078e4 	.word	0x080078e4

08004620 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <SEGGER_SYSVIEW_Conf+0x20>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <SEGGER_SYSVIEW_Conf+0x20>)
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <SEGGER_SYSVIEW_Conf+0x24>)
 800462e:	4a06      	ldr	r2, [pc, #24]	; (8004648 <SEGGER_SYSVIEW_Conf+0x28>)
 8004630:	f001 fc70 	bl	8005f14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004634:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004638:	f001 fcb0 	bl	8005f9c <SEGGER_SYSVIEW_SetRAMBase>
}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000000 	.word	0x20000000
 8004644:	08004605 	.word	0x08004605
 8004648:	08007978 	.word	0x08007978

0800464c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800464c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464e:	b085      	sub	sp, #20
 8004650:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	e033      	b.n	80046c0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004658:	491e      	ldr	r1, [pc, #120]	; (80046d4 <_cbSendTaskList+0x88>)
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	491a      	ldr	r1, [pc, #104]	; (80046d4 <_cbSendTaskList+0x88>)
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3304      	adds	r3, #4
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	4c16      	ldr	r4, [pc, #88]	; (80046d4 <_cbSendTaskList+0x88>)
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4423      	add	r3, r4
 8004688:	3308      	adds	r3, #8
 800468a:	681c      	ldr	r4, [r3, #0]
 800468c:	4d11      	ldr	r5, [pc, #68]	; (80046d4 <_cbSendTaskList+0x88>)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	442b      	add	r3, r5
 800469a:	330c      	adds	r3, #12
 800469c:	681d      	ldr	r5, [r3, #0]
 800469e:	4e0d      	ldr	r6, [pc, #52]	; (80046d4 <_cbSendTaskList+0x88>)
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4433      	add	r3, r6
 80046ac:	3310      	adds	r3, #16
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	462b      	mov	r3, r5
 80046b4:	4622      	mov	r2, r4
 80046b6:	f000 f8bd 	bl	8004834 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3301      	adds	r3, #1
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <_cbSendTaskList+0x8c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3c6      	bcc.n	8004658 <_cbSendTaskList+0xc>
  }
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d4:	20012e8c 	.word	0x20012e8c
 80046d8:	20012f2c 	.word	0x20012f2c

080046dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80046dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80046e4:	f7fe fbde 	bl	8002ea4 <xTaskGetTickCountFromISR>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2200      	movs	r2, #0
 80046ec:	469a      	mov	sl, r3
 80046ee:	4693      	mov	fp, r2
 80046f0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80046f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	f04f 0a00 	mov.w	sl, #0
 8004700:	f04f 0b00 	mov.w	fp, #0
 8004704:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004708:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800470c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004710:	4652      	mov	r2, sl
 8004712:	465b      	mov	r3, fp
 8004714:	1a14      	subs	r4, r2, r0
 8004716:	eb63 0501 	sbc.w	r5, r3, r1
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	00ab      	lsls	r3, r5, #2
 8004724:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004728:	00a2      	lsls	r2, r4, #2
 800472a:	4614      	mov	r4, r2
 800472c:	461d      	mov	r5, r3
 800472e:	eb14 0800 	adds.w	r8, r4, r0
 8004732:	eb45 0901 	adc.w	r9, r5, r1
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474a:	4690      	mov	r8, r2
 800474c:	4699      	mov	r9, r3
 800474e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004752:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004764 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af02      	add	r7, sp, #8
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004772:	2205      	movs	r2, #5
 8004774:	492b      	ldr	r1, [pc, #172]	; (8004824 <SYSVIEW_AddTask+0xc0>)
 8004776:	68b8      	ldr	r0, [r7, #8]
 8004778:	f002 fbb0 	bl	8006edc <memcmp>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d04b      	beq.n	800481a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b07      	cmp	r3, #7
 8004788:	d903      	bls.n	8004792 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800478a:	4828      	ldr	r0, [pc, #160]	; (800482c <SYSVIEW_AddTask+0xc8>)
 800478c:	f002 faf8 	bl	8006d80 <SEGGER_SYSVIEW_Warn>
    return;
 8004790:	e044      	b.n	800481c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004792:	4b25      	ldr	r3, [pc, #148]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4926      	ldr	r1, [pc, #152]	; (8004830 <SYSVIEW_AddTask+0xcc>)
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4921      	ldr	r1, [pc, #132]	; (8004830 <SYSVIEW_AddTask+0xcc>)
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3304      	adds	r3, #4
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	491b      	ldr	r1, [pc, #108]	; (8004830 <SYSVIEW_AddTask+0xcc>)
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3308      	adds	r3, #8
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4916      	ldr	r1, [pc, #88]	; (8004830 <SYSVIEW_AddTask+0xcc>)
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	330c      	adds	r3, #12
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4910      	ldr	r1, [pc, #64]	; (8004830 <SYSVIEW_AddTask+0xcc>)
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3310      	adds	r3, #16
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	4a08      	ldr	r2, [pc, #32]	; (8004828 <SYSVIEW_AddTask+0xc4>)
 8004806:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f80e 	bl	8004834 <SYSVIEW_SendTaskInfo>
 8004818:	e000      	b.n	800481c <SYSVIEW_AddTask+0xb8>
    return;
 800481a:	bf00      	nop

}
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	080078f4 	.word	0x080078f4
 8004828:	20012f2c 	.word	0x20012f2c
 800482c:	080078fc 	.word	0x080078fc
 8004830:	20012e8c 	.word	0x20012e8c

08004834 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	2214      	movs	r2, #20
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f002 fb64 	bl	8006f18 <memset>
  TaskInfo.TaskID     = TaskID;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4618      	mov	r0, r3
 800486a:	f001 fedf 	bl	800662c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800486e:	bf00      	nop
 8004870:	3728      	adds	r7, #40	; 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <__NVIC_EnableIRQ>:
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	2b00      	cmp	r3, #0
 8004888:	db0b      	blt.n	80048a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	f003 021f 	and.w	r2, r3, #31
 8004890:	4907      	ldr	r1, [pc, #28]	; (80048b0 <__NVIC_EnableIRQ+0x38>)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2001      	movs	r0, #1
 800489a:	fa00 f202 	lsl.w	r2, r0, r2
 800489e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000e100 	.word	0xe000e100

080048b4 <__NVIC_SetPriority>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	6039      	str	r1, [r7, #0]
 80048be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	db0a      	blt.n	80048de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	490c      	ldr	r1, [pc, #48]	; (8004900 <__NVIC_SetPriority+0x4c>)
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	0112      	lsls	r2, r2, #4
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	440b      	add	r3, r1
 80048d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048dc:	e00a      	b.n	80048f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4908      	ldr	r1, [pc, #32]	; (8004904 <__NVIC_SetPriority+0x50>)
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	3b04      	subs	r3, #4
 80048ec:	0112      	lsls	r2, r2, #4
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	440b      	add	r3, r1
 80048f2:	761a      	strb	r2, [r3, #24]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000e100 	.word	0xe000e100
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800490e:	f002 fa93 	bl	8006e38 <SEGGER_SYSVIEW_IsStarted>
 8004912:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800491a:	f001 fd0b 	bl	8006334 <SEGGER_SYSVIEW_Start>
  }
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <_cbOnUARTRx+0x3c>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d806      	bhi.n	8004948 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <_cbOnUARTRx+0x3c>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <_cbOnUARTRx+0x3c>)
 8004944:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004946:	e009      	b.n	800495c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004948:	f7ff ffde 	bl	8004908 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <_cbOnUARTRx+0x3c>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	1dfb      	adds	r3, r7, #7
 8004954:	2201      	movs	r2, #1
 8004956:	4619      	mov	r1, r3
 8004958:	f000 fb9c 	bl	8005094 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800495c:	bf00      	nop
}
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000014 	.word	0x20000014

08004968 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <_cbOnUARTTx+0x5c>)
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d80f      	bhi.n	8004998 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004978:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <_cbOnUARTTx+0x5c>)
 800497a:	785b      	ldrb	r3, [r3, #1]
 800497c:	461a      	mov	r2, r3
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <_cbOnUARTTx+0x60>)
 8004980:	5c9a      	ldrb	r2, [r3, r2]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <_cbOnUARTTx+0x5c>)
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	3301      	adds	r3, #1
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <_cbOnUARTTx+0x5c>)
 8004990:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004992:	2301      	movs	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004996:	e00f      	b.n	80049b8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <_cbOnUARTTx+0x5c>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fa1b 	bl	8004ddc <SEGGER_RTT_ReadUpBufferNoLock>
 80049a6:	4603      	mov	r3, r0
 80049a8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da02      	bge.n	80049b6 <_cbOnUARTTx+0x4e>
    r = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e000      	b.n	80049b8 <_cbOnUARTTx+0x50>
  }
Done:
 80049b6:	bf00      	nop
  return r;
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000014 	.word	0x20000014
 80049c8:	08007980 	.word	0x08007980

080049cc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80049d4:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <SEGGER_UART_init+0x1c>)
 80049d6:	4905      	ldr	r1, [pc, #20]	; (80049ec <SEGGER_UART_init+0x20>)
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f863 	bl	8004aa4 <HIF_UART_Init>
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	08004929 	.word	0x08004929
 80049ec:	08004969 	.word	0x08004969

080049f0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80049f6:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <USART2_IRQHandler+0x80>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d011      	beq.n	8004a2a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004a06:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <USART2_IRQHandler+0x84>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f003 030b 	and.w	r3, r3, #11
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004a18:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <USART2_IRQHandler+0x88>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <USART2_IRQHandler+0x88>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	79fa      	ldrb	r2, [r7, #7]
 8004a26:	4610      	mov	r0, r2
 8004a28:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01a      	beq.n	8004a6a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <USART2_IRQHandler+0x8c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d015      	beq.n	8004a68 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <USART2_IRQHandler+0x8c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1dfa      	adds	r2, r7, #7
 8004a42:	4610      	mov	r0, r2
 8004a44:	4798      	blx	r3
 8004a46:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <USART2_IRQHandler+0x90>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <USART2_IRQHandler+0x90>)
 8004a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e006      	b.n	8004a6a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <USART2_IRQHandler+0x80>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004a60:	79fa      	ldrb	r2, [r7, #7]
 8004a62:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <USART2_IRQHandler+0x84>)
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e000      	b.n	8004a6a <USART2_IRQHandler+0x7a>
      return;
 8004a68:	bf00      	nop
    }
  }
}
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40004400 	.word	0x40004400
 8004a74:	40004404 	.word	0x40004404
 8004a78:	20012f30 	.word	0x20012f30
 8004a7c:	20012f34 	.word	0x20012f34
 8004a80:	4000440c 	.word	0x4000440c

08004a84 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	4000440c 	.word	0x4000440c

08004aa4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004ab0:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <HIF_UART_Init+0xc8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <HIF_UART_Init+0xc8>)
 8004ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aba:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004abc:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <HIF_UART_Init+0xcc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2b      	ldr	r2, [pc, #172]	; (8004b70 <HIF_UART_Init+0xcc>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <HIF_UART_Init+0xd0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ad4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004adc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004ade:	4a25      	ldr	r2, [pc, #148]	; (8004b74 <HIF_UART_Init+0xd0>)
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004ae4:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <HIF_UART_Init+0xd4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004af8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <HIF_UART_Init+0xd4>)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004b00:	4b1e      	ldr	r3, [pc, #120]	; (8004b7c <HIF_UART_Init+0xd8>)
 8004b02:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004b06:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HIF_UART_Init+0xdc>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <HIF_UART_Init+0xe0>)
 8004b10:	2280      	movs	r2, #128	; 0x80
 8004b12:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HIF_UART_Init+0xe4>)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	3301      	adds	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	d302      	bcc.n	8004b3a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004b34:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004b38:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <HIF_UART_Init+0xe8>)
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004b4a:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <HIF_UART_Init+0xec>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004b50:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <HIF_UART_Init+0xf0>)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004b56:	2106      	movs	r1, #6
 8004b58:	2026      	movs	r0, #38	; 0x26
 8004b5a:	f7ff feab 	bl	80048b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004b5e:	2026      	movs	r0, #38	; 0x26
 8004b60:	f7ff fe8a 	bl	8004878 <__NVIC_EnableIRQ>
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40023840 	.word	0x40023840
 8004b70:	40023830 	.word	0x40023830
 8004b74:	40020020 	.word	0x40020020
 8004b78:	40020000 	.word	0x40020000
 8004b7c:	4000440c 	.word	0x4000440c
 8004b80:	40004410 	.word	0x40004410
 8004b84:	40004414 	.word	0x40004414
 8004b88:	0501bd00 	.word	0x0501bd00
 8004b8c:	40004408 	.word	0x40004408
 8004b90:	20012f30 	.word	0x20012f30
 8004b94:	20012f34 	.word	0x20012f34

08004b98 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <_DoInit+0xa0>)
 8004ba0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004ba2:	22a8      	movs	r2, #168	; 0xa8
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	6838      	ldr	r0, [r7, #0]
 8004ba8:	f002 f9b6 	bl	8006f18 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2203      	movs	r2, #3
 8004bb0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4a20      	ldr	r2, [pc, #128]	; (8004c3c <_DoInit+0xa4>)
 8004bbc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4a1f      	ldr	r2, [pc, #124]	; (8004c40 <_DoInit+0xa8>)
 8004bc2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <_DoInit+0xa4>)
 8004be2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <_DoInit+0xac>)
 8004be8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2210      	movs	r2, #16
 8004bee:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004c02:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e00c      	b.n	8004c26 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f1c3 030f 	rsb	r3, r3, #15
 8004c12:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <_DoInit+0xb0>)
 8004c14:	5cd1      	ldrb	r1, [r2, r3]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3301      	adds	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b0f      	cmp	r3, #15
 8004c2a:	d9ef      	bls.n	8004c0c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004c2c:	f3bf 8f5f 	dmb	sy
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20012f38 	.word	0x20012f38
 8004c3c:	0800794c 	.word	0x0800794c
 8004c40:	20012fe0 	.word	0x20012fe0
 8004c44:	200133e0 	.word	0x200133e0
 8004c48:	08007984 	.word	0x08007984

08004c4c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d905      	bls.n	8004c7c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7a:	e007      	b.n	8004c8c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	1acb      	subs	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c96:	4293      	cmp	r3, r2
 8004c98:	bf28      	it	cs
 8004c9a:	4613      	movcs	r3, r2
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bf28      	it	cs
 8004ca6:	4613      	movcs	r3, r2
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	6978      	ldr	r0, [r7, #20]
 8004cba:	f002 f91f 	bl	8006efc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004cbe:	6a3a      	ldr	r2, [r7, #32]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	4413      	add	r3, r2
 8004cc4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	4413      	add	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	4413      	add	r3, r2
 8004cdc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d101      	bne.n	8004cec <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004cec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1b2      	bne.n	8004c62 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3728      	adds	r7, #40	; 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b088      	sub	sp, #32
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d911      	bls.n	8004d4e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	6938      	ldr	r0, [r7, #16]
 8004d3a:	f002 f8df 	bl	8006efc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d3e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004d4c:	e01f      	b.n	8004d8e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	6938      	ldr	r0, [r7, #16]
 8004d62:	f002 f8cb 	bl	8006efc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	4413      	add	r3, r2
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6938      	ldr	r0, [r7, #16]
 8004d80:	f002 f8bc 	bl	8006efc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d84:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	60da      	str	r2, [r3, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d808      	bhi.n	8004dc4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad2      	subs	r2, r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e004      	b.n	8004dce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004dce:	697b      	ldr	r3, [r7, #20]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004de8:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004dea:	623b      	str	r3, [r7, #32]
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004df6:	f7ff fecf 	bl	8004b98 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	4613      	mov	r3, r2
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4a37      	ldr	r2, [pc, #220]	; (8004ee4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d92b      	bls.n	8004e80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4293      	cmp	r3, r2
 8004e38:	bf28      	it	cs
 8004e3a:	4613      	movcs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	4413      	add	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	6939      	ldr	r1, [r7, #16]
 8004e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e4e:	f002 f855 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 8004e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4413      	add	r3, r2
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4413      	add	r3, r2
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4413      	add	r3, r2
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d101      	bne.n	8004e80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	bf28      	it	cs
 8004e90:	4613      	movcs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d019      	beq.n	8004ece <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	4413      	add	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eaa:	f002 f827 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 8004eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3730      	adds	r7, #48	; 0x30
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20012f38 	.word	0x20012f38

08004ee8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	; 0x30
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ef4:	4b3e      	ldr	r3, [pc, #248]	; (8004ff0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ef6:	623b      	str	r3, [r7, #32]
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <SEGGER_RTT_ReadNoLock+0x1e>
 8004f02:	f7ff fe49 	bl	8004b98 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	3360      	adds	r3, #96	; 0x60
 8004f12:	4a37      	ldr	r2, [pc, #220]	; (8004ff0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f14:	4413      	add	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d92b      	bls.n	8004f8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4293      	cmp	r3, r2
 8004f44:	bf28      	it	cs
 8004f46:	4613      	movcs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	4413      	add	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f5a:	f001 ffcf 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 8004f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d101      	bne.n	8004f8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bf28      	it	cs
 8004f9c:	4613      	movcs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d019      	beq.n	8004fda <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	4413      	add	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fb6:	f001 ffa1 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 8004fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3730      	adds	r7, #48	; 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20012f38 	.word	0x20012f38

08004ff4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4613      	mov	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	3360      	adds	r3, #96	; 0x60
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005012:	4413      	add	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d029      	beq.n	8005072 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800501e:	2b02      	cmp	r3, #2
 8005020:	d82e      	bhi.n	8005080 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005026:	2b01      	cmp	r3, #1
 8005028:	d013      	beq.n	8005052 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800502a:	e029      	b.n	8005080 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800502c:	6978      	ldr	r0, [r7, #20]
 800502e:	f7ff feb2 	bl	8004d96 <_GetAvailWriteSpace>
 8005032:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d202      	bcs.n	8005042 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005040:	e021      	b.n	8005086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	69b9      	ldr	r1, [r7, #24]
 800504a:	6978      	ldr	r0, [r7, #20]
 800504c:	f7ff fe5b 	bl	8004d06 <_WriteNoCheck>
    break;
 8005050:	e019      	b.n	8005086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005052:	6978      	ldr	r0, [r7, #20]
 8005054:	f7ff fe9f 	bl	8004d96 <_GetAvailWriteSpace>
 8005058:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4293      	cmp	r3, r2
 8005060:	bf28      	it	cs
 8005062:	4613      	movcs	r3, r2
 8005064:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff fe4b 	bl	8004d06 <_WriteNoCheck>
    break;
 8005070:	e009      	b.n	8005086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f7ff fde8 	bl	8004c4c <_WriteBlocking>
 800507c:	61f8      	str	r0, [r7, #28]
    break;
 800507e:	e002      	b.n	8005086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
    break;
 8005084:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005086:	69fb      	ldr	r3, [r7, #28]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20012f38 	.word	0x20012f38

08005094 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80050ae:	f7ff fd73 	bl	8004b98 <_DoInit>
  SEGGER_RTT_LOCK();
 80050b2:	f3ef 8311 	mrs	r3, BASEPRI
 80050b6:	f04f 0120 	mov.w	r1, #32
 80050ba:	f381 8811 	msr	BASEPRI, r1
 80050be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ff95 	bl	8004ff4 <SEGGER_RTT_WriteDownBufferNoLock>
 80050ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80050d2:	697b      	ldr	r3, [r7, #20]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20012f38 	.word	0x20012f38

080050e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050ee:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <SEGGER_RTT_AllocUpBuffer+0x20>
 80050fc:	f7ff fd4c 	bl	8004b98 <_DoInit>
  SEGGER_RTT_LOCK();
 8005100:	f3ef 8311 	mrs	r3, BASEPRI
 8005104:	f04f 0120 	mov.w	r1, #32
 8005108:	f381 8811 	msr	BASEPRI, r1
 800510c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800510e:	4b35      	ldr	r3, [pc, #212]	; (80051e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005110:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	440b      	add	r3, r1
 8005126:	3304      	adds	r3, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	dbeb      	blt.n	8005116 <SEGGER_RTT_AllocUpBuffer+0x36>
 800513e:	e000      	b.n	8005142 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005140:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	da3f      	bge.n	80051cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800514c:	6939      	ldr	r1, [r7, #16]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	440b      	add	r3, r1
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	3304      	adds	r3, #4
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005176:	6939      	ldr	r1, [r7, #16]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	3320      	adds	r3, #32
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800518a:	6939      	ldr	r1, [r7, #16]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3328      	adds	r3, #40	; 0x28
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051b2:	6939      	ldr	r1, [r7, #16]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	332c      	adds	r3, #44	; 0x2c
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051c6:	f3bf 8f5f 	dmb	sy
 80051ca:	e002      	b.n	80051d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051d8:	69fb      	ldr	r3, [r7, #28]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20012f38 	.word	0x20012f38

080051e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005204:	f7ff fcc8 	bl	8004b98 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005208:	4b1c      	ldr	r3, [pc, #112]	; (800527c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800520a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d82c      	bhi.n	800526c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005212:	f3ef 8311 	mrs	r3, BASEPRI
 8005216:	f04f 0120 	mov.w	r1, #32
 800521a:	f381 8811 	msr	BASEPRI, r1
 800521e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4613      	mov	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	3360      	adds	r3, #96	; 0x60
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00e      	beq.n	8005256 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2200      	movs	r2, #0
 8005254:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800525c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
 800526a:	e002      	b.n	8005272 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005274:	4618      	mov	r0, r3
 8005276:	3728      	adds	r7, #40	; 0x28
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20012f38 	.word	0x20012f38

08005280 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00f      	beq.n	80052b6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005296:	e002      	b.n	800529e <_EncodeStr+0x1e>
      Len++;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	3301      	adds	r3, #1
 800529c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4413      	add	r3, r2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f6      	bne.n	8005298 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d901      	bls.n	80052b6 <_EncodeStr+0x36>
      Len = Limit;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2bfe      	cmp	r3, #254	; 0xfe
 80052ba:	d806      	bhi.n	80052ca <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	60fa      	str	r2, [r7, #12]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e011      	b.n	80052ee <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	60fa      	str	r2, [r7, #12]
 80052d0:	22ff      	movs	r2, #255	; 0xff
 80052d2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	60fa      	str	r2, [r7, #12]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	0a19      	lsrs	r1, r3, #8
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	60fa      	str	r2, [r7, #12]
 80052ea:	b2ca      	uxtb	r2, r1
 80052ec:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052f2:	e00a      	b.n	800530a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	1c53      	adds	r3, r2, #1
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	60f9      	str	r1, [r7, #12]
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	701a      	strb	r2, [r3, #0]
    n++;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3301      	adds	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	429a      	cmp	r2, r3
 8005310:	d3f0      	bcc.n	80052f4 <_EncodeStr+0x74>
  }
  return pPayload;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3307      	adds	r3, #7
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800533e:	4b35      	ldr	r3, [pc, #212]	; (8005414 <_HandleIncomingPacket+0xdc>)
 8005340:	7e1b      	ldrb	r3, [r3, #24]
 8005342:	4618      	mov	r0, r3
 8005344:	1cfb      	adds	r3, r7, #3
 8005346:	2201      	movs	r2, #1
 8005348:	4619      	mov	r1, r3
 800534a:	f7ff fdcd 	bl	8004ee8 <SEGGER_RTT_ReadNoLock>
 800534e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d052      	beq.n	80053fc <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d031      	beq.n	80053c0 <_HandleIncomingPacket+0x88>
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	dc40      	bgt.n	80053e2 <_HandleIncomingPacket+0xaa>
 8005360:	2b07      	cmp	r3, #7
 8005362:	dc15      	bgt.n	8005390 <_HandleIncomingPacket+0x58>
 8005364:	2b00      	cmp	r3, #0
 8005366:	dd3c      	ble.n	80053e2 <_HandleIncomingPacket+0xaa>
 8005368:	3b01      	subs	r3, #1
 800536a:	2b06      	cmp	r3, #6
 800536c:	d839      	bhi.n	80053e2 <_HandleIncomingPacket+0xaa>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <_HandleIncomingPacket+0x3c>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005397 	.word	0x08005397
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a3 	.word	0x080053a3
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053af 	.word	0x080053af
 8005388:	080053b5 	.word	0x080053b5
 800538c:	080053bb 	.word	0x080053bb
 8005390:	2b7f      	cmp	r3, #127	; 0x7f
 8005392:	d035      	beq.n	8005400 <_HandleIncomingPacket+0xc8>
 8005394:	e025      	b.n	80053e2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005396:	f000 ffcd 	bl	8006334 <SEGGER_SYSVIEW_Start>
      break;
 800539a:	e036      	b.n	800540a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800539c:	f001 f886 	bl	80064ac <SEGGER_SYSVIEW_Stop>
      break;
 80053a0:	e033      	b.n	800540a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053a2:	f001 fa5f 	bl	8006864 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053a6:	e030      	b.n	800540a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053a8:	f001 fa24 	bl	80067f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053ac:	e02d      	b.n	800540a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053ae:	f001 f8a3 	bl	80064f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053b2:	e02a      	b.n	800540a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80053b4:	f001 fc92 	bl	8006cdc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80053b8:	e027      	b.n	800540a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80053ba:	f001 fc71 	bl	8006ca0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80053be:	e024      	b.n	800540a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <_HandleIncomingPacket+0xdc>)
 80053c2:	7e1b      	ldrb	r3, [r3, #24]
 80053c4:	4618      	mov	r0, r3
 80053c6:	1cfb      	adds	r3, r7, #3
 80053c8:	2201      	movs	r2, #1
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7ff fd8c 	bl	8004ee8 <SEGGER_RTT_ReadNoLock>
 80053d0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d015      	beq.n	8005404 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 fbe0 	bl	8006ba0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053e0:	e010      	b.n	8005404 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da0e      	bge.n	8005408 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <_HandleIncomingPacket+0xdc>)
 80053ec:	7e1b      	ldrb	r3, [r3, #24]
 80053ee:	4618      	mov	r0, r3
 80053f0:	1cfb      	adds	r3, r7, #3
 80053f2:	2201      	movs	r2, #1
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7ff fd77 	bl	8004ee8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053fa:	e005      	b.n	8005408 <_HandleIncomingPacket+0xd0>
    }
  }
 80053fc:	bf00      	nop
 80053fe:	e004      	b.n	800540a <_HandleIncomingPacket+0xd2>
      break;
 8005400:	bf00      	nop
 8005402:	e002      	b.n	800540a <_HandleIncomingPacket+0xd2>
      break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <_HandleIncomingPacket+0xd2>
      break;
 8005408:	bf00      	nop
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200143f8 	.word	0x200143f8

08005418 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800541e:	2301      	movs	r3, #1
 8005420:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	3301      	adds	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542c:	4b32      	ldr	r3, [pc, #200]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
 8005432:	e00b      	b.n	800544c <_TrySendOverflowPacket+0x34>
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	b2da      	uxtb	r2, r3
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	1c59      	adds	r1, r3, #1
 800543c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800543e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	09db      	lsrs	r3, r3, #7
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	2b7f      	cmp	r3, #127	; 0x7f
 8005450:	d8f0      	bhi.n	8005434 <_TrySendOverflowPacket+0x1c>
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005462:	4b26      	ldr	r3, [pc, #152]	; (80054fc <_TrySendOverflowPacket+0xe4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005468:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	623b      	str	r3, [r7, #32]
 800547a:	e00b      	b.n	8005494 <_TrySendOverflowPacket+0x7c>
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	1c59      	adds	r1, r3, #1
 8005484:	6279      	str	r1, [r7, #36]	; 0x24
 8005486:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	09db      	lsrs	r3, r3, #7
 8005492:	623b      	str	r3, [r7, #32]
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b7f      	cmp	r3, #127	; 0x7f
 8005498:	d8f0      	bhi.n	800547c <_TrySendOverflowPacket+0x64>
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	627a      	str	r2, [r7, #36]	; 0x24
 80054a0:	6a3a      	ldr	r2, [r7, #32]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80054aa:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	4618      	mov	r0, r3
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	f7fa fe88 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054c0:	4603      	mov	r3, r0
 80054c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80054c4:	f7ff fade 	bl	8004a84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	3b01      	subs	r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e004      	b.n	80054ec <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	3301      	adds	r3, #1
 80054e8:	4a03      	ldr	r2, [pc, #12]	; (80054f8 <_TrySendOverflowPacket+0xe0>)
 80054ea:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054ec:	693b      	ldr	r3, [r7, #16]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3730      	adds	r7, #48	; 0x30
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200143f8 	.word	0x200143f8
 80054fc:	e0001004 	.word	0xe0001004

08005500 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800550c:	4b96      	ldr	r3, [pc, #600]	; (8005768 <_SendPacket+0x268>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d010      	beq.n	8005536 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005514:	4b94      	ldr	r3, [pc, #592]	; (8005768 <_SendPacket+0x268>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8130 	beq.w	800577e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800551e:	4b92      	ldr	r3, [pc, #584]	; (8005768 <_SendPacket+0x268>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d109      	bne.n	800553a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005526:	f7ff ff77 	bl	8005418 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800552a:	4b8f      	ldr	r3, [pc, #572]	; (8005768 <_SendPacket+0x268>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	f040 8127 	bne.w	8005782 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005534:	e001      	b.n	800553a <_SendPacket+0x3a>
    goto Send;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <_SendPacket+0x3c>
Send:
 800553a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b1f      	cmp	r3, #31
 8005540:	d809      	bhi.n	8005556 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005542:	4b89      	ldr	r3, [pc, #548]	; (8005768 <_SendPacket+0x268>)
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	f040 8118 	bne.w	8005786 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b17      	cmp	r3, #23
 800555a:	d807      	bhi.n	800556c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b01      	subs	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e0c4      	b.n	80056f6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	2b7f      	cmp	r3, #127	; 0x7f
 8005578:	d912      	bls.n	80055a0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	09da      	lsrs	r2, r3, #7
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3b01      	subs	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	3a01      	subs	r2, #1
 8005592:	60fa      	str	r2, [r7, #12]
 8005594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005598:	b2da      	uxtb	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e006      	b.n	80055ae <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b7e      	cmp	r3, #126	; 0x7e
 80055b2:	d807      	bhi.n	80055c4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e098      	b.n	80056f6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ca:	d212      	bcs.n	80055f2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	09da      	lsrs	r2, r3, #7
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	3a01      	subs	r2, #1
 80055e4:	60fa      	str	r2, [r7, #12]
 80055e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	e081      	b.n	80056f6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f8:	d21d      	bcs.n	8005636 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0b9a      	lsrs	r2, r3, #14
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3b01      	subs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	09db      	lsrs	r3, r3, #7
 800560e:	b2db      	uxtb	r3, r3
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	3a01      	subs	r2, #1
 8005614:	60fa      	str	r2, [r7, #12]
 8005616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	3a01      	subs	r2, #1
 8005628:	60fa      	str	r2, [r7, #12]
 800562a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e05f      	b.n	80056f6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800563c:	d228      	bcs.n	8005690 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0d5a      	lsrs	r2, r3, #21
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3b01      	subs	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	0b9b      	lsrs	r3, r3, #14
 8005652:	b2db      	uxtb	r3, r3
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	3a01      	subs	r2, #1
 8005658:	60fa      	str	r2, [r7, #12]
 800565a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800565e:	b2da      	uxtb	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	09db      	lsrs	r3, r3, #7
 8005668:	b2db      	uxtb	r3, r3
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	3a01      	subs	r2, #1
 800566e:	60fa      	str	r2, [r7, #12]
 8005670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005674:	b2da      	uxtb	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	3a01      	subs	r2, #1
 8005682:	60fa      	str	r2, [r7, #12]
 8005684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e032      	b.n	80056f6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0f1a      	lsrs	r2, r3, #28
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3b01      	subs	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0d5b      	lsrs	r3, r3, #21
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	3a01      	subs	r2, #1
 80056aa:	60fa      	str	r2, [r7, #12]
 80056ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0b9b      	lsrs	r3, r3, #14
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	3a01      	subs	r2, #1
 80056c0:	60fa      	str	r2, [r7, #12]
 80056c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	09db      	lsrs	r3, r3, #7
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	3a01      	subs	r2, #1
 80056d6:	60fa      	str	r2, [r7, #12]
 80056d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	3a01      	subs	r2, #1
 80056ea:	60fa      	str	r2, [r7, #12]
 80056ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <_SendPacket+0x26c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056fc:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <_SendPacket+0x268>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	e00b      	b.n	8005728 <_SendPacket+0x228>
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	6279      	str	r1, [r7, #36]	; 0x24
 800571a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2b7f      	cmp	r3, #127	; 0x7f
 800572c:	d8f0      	bhi.n	8005710 <_SendPacket+0x210>
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	627a      	str	r2, [r7, #36]	; 0x24
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <_SendPacket+0x268>)
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	4618      	mov	r0, r3
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	461a      	mov	r2, r3
 800574c:	68f9      	ldr	r1, [r7, #12]
 800574e:	f7fa fd3f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005752:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005754:	f7ff f996 	bl	8004a84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800575e:	4a02      	ldr	r2, [pc, #8]	; (8005768 <_SendPacket+0x268>)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	60d3      	str	r3, [r2, #12]
 8005764:	e010      	b.n	8005788 <_SendPacket+0x288>
 8005766:	bf00      	nop
 8005768:	200143f8 	.word	0x200143f8
 800576c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <_SendPacket+0x2d8>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	b2da      	uxtb	r2, r3
 8005778:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <_SendPacket+0x2d8>)
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	e004      	b.n	8005788 <_SendPacket+0x288>
    goto SendDone;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <_SendPacket+0x288>
      goto SendDone;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <_SendPacket+0x288>
      goto SendDone;
 8005786:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <_SendPacket+0x2d8>)
 800578a:	7e1b      	ldrb	r3, [r3, #24]
 800578c:	4619      	mov	r1, r3
 800578e:	4a13      	ldr	r2, [pc, #76]	; (80057dc <_SendPacket+0x2dc>)
 8005790:	460b      	mov	r3, r1
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	440b      	add	r3, r1
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	336c      	adds	r3, #108	; 0x6c
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <_SendPacket+0x2d8>)
 80057a0:	7e1b      	ldrb	r3, [r3, #24]
 80057a2:	4618      	mov	r0, r3
 80057a4:	490d      	ldr	r1, [pc, #52]	; (80057dc <_SendPacket+0x2dc>)
 80057a6:	4603      	mov	r3, r0
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4403      	add	r3, r0
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	440b      	add	r3, r1
 80057b0:	3370      	adds	r3, #112	; 0x70
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d00b      	beq.n	80057d0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <_SendPacket+0x2d8>)
 80057ba:	789b      	ldrb	r3, [r3, #2]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <_SendPacket+0x2d8>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057c6:	f7ff fdb7 	bl	8005338 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057ca:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <_SendPacket+0x2d8>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057d0:	bf00      	nop
 80057d2:	3728      	adds	r7, #40	; 0x28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	200143f8 	.word	0x200143f8
 80057dc:	20012f38 	.word	0x20012f38

080057e0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	; 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	3301      	adds	r3, #1
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	d80a      	bhi.n	8005810 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6051      	str	r1, [r2, #4]
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b80      	cmp	r3, #128	; 0x80
 8005816:	d15a      	bne.n	80058ce <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	623b      	str	r3, [r7, #32]
 8005838:	e00b      	b.n	8005852 <_StoreChar+0x72>
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	6279      	str	r1, [r7, #36]	; 0x24
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <_StoreChar+0x5a>
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	627a      	str	r2, [r7, #36]	; 0x24
 800585e:	6a3a      	ldr	r2, [r7, #32]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e00b      	b.n	800588a <_StoreChar+0xaa>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	61f9      	str	r1, [r7, #28]
 800587c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b7f      	cmp	r3, #127	; 0x7f
 800588e:	d8f0      	bhi.n	8005872 <_StoreChar+0x92>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	61fa      	str	r2, [r7, #28]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	221a      	movs	r2, #26
 80058a6:	6939      	ldr	r1, [r7, #16]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fe29 	bl	8005500 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fd34 	bl	8005320 <_PreparePacket>
 80058b8:	4602      	mov	r2, r0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
  }
}
 80058ce:	bf00      	nop
 80058d0:	3728      	adds	r7, #40	; 0x28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	; 0x28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80058ea:	2301      	movs	r3, #1
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80058ee:	2301      	movs	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058f2:	e007      	b.n	8005904 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80058f4:	6a3a      	ldr	r2, [r7, #32]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	623b      	str	r3, [r7, #32]
    Width++;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3301      	adds	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005904:	6a3a      	ldr	r2, [r7, #32]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d2f3      	bcs.n	80058f4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	429a      	cmp	r2, r3
 8005912:	d901      	bls.n	8005918 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11f      	bne.n	8005962 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <_PrintUnsigned+0x66>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <_PrintUnsigned+0x66>
        c = '0';
 8005938:	2330      	movs	r3, #48	; 0x30
 800593a:	76fb      	strb	r3, [r7, #27]
 800593c:	e001      	b.n	8005942 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800593e:	2320      	movs	r3, #32
 8005940:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005942:	e007      	b.n	8005954 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	3b01      	subs	r3, #1
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800594a:	7efb      	ldrb	r3, [r7, #27]
 800594c:	4619      	mov	r1, r3
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff ff46 	bl	80057e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <_PrintUnsigned+0x8a>
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	429a      	cmp	r2, r3
 8005960:	d3f0      	bcc.n	8005944 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d903      	bls.n	8005970 <_PrintUnsigned+0x98>
      NumDigits--;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	3b01      	subs	r3, #1
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	e009      	b.n	8005984 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d200      	bcs.n	8005984 <_PrintUnsigned+0xac>
        break;
 8005982:	e005      	b.n	8005990 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800598e:	e7e8      	b.n	8005962 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059a8:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <_PrintUnsigned+0x128>)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4413      	add	r3, r2
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	4619      	mov	r1, r3
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff14 	bl	80057e0 <_StoreChar>
    Digit /= Base;
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e3      	bne.n	8005990 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80059c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d011      	beq.n	80059f6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00e      	beq.n	80059f6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059d8:	e006      	b.n	80059e8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	3b01      	subs	r3, #1
 80059de:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80059e0:	2120      	movs	r1, #32
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fefc 	bl	80057e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <_PrintUnsigned+0x11e>
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3f1      	bcc.n	80059da <_PrintUnsigned+0x102>
      }
    }
  }
}
 80059f6:	bf00      	nop
 80059f8:	3728      	adds	r7, #40	; 0x28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	080079a4 	.word	0x080079a4

08005a04 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfb8      	it	lt
 8005a18:	425b      	neglt	r3, r3
 8005a1a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a20:	e007      	b.n	8005a32 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a2a:	613b      	str	r3, [r7, #16]
    Width++;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	daf3      	bge.n	8005a22 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d901      	bls.n	8005a46 <_PrintInt+0x42>
    Width = NumDigits;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <_PrintInt+0x5e>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	db04      	blt.n	8005a5c <_PrintInt+0x58>
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <_PrintInt+0x5e>
    FieldWidth--;
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <_PrintInt+0x6e>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d016      	beq.n	8005aa0 <_PrintInt+0x9c>
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d111      	bne.n	8005aa0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00e      	beq.n	8005aa0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a82:	e006      	b.n	8005a92 <_PrintInt+0x8e>
        FieldWidth--;
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff fea7 	bl	80057e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <_PrintInt+0x9c>
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d3f1      	bcc.n	8005a84 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da07      	bge.n	8005ab6 <_PrintInt+0xb2>
    v = -v;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	425b      	negs	r3, r3
 8005aaa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005aac:	212d      	movs	r1, #45	; 0x2d
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff fe96 	bl	80057e0 <_StoreChar>
 8005ab4:	e008      	b.n	8005ac8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005ac0:	212b      	movs	r1, #43	; 0x2b
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fe8c 	bl	80057e0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d019      	beq.n	8005b06 <_PrintInt+0x102>
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d114      	bne.n	8005b06 <_PrintInt+0x102>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d111      	bne.n	8005b06 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ae8:	e006      	b.n	8005af8 <_PrintInt+0xf4>
        FieldWidth--;
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005af0:	2130      	movs	r1, #48	; 0x30
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff fe74 	bl	80057e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <_PrintInt+0x102>
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d3f1      	bcc.n	8005aea <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff fedf 	bl	80058d8 <_PrintUnsigned>
}
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b098      	sub	sp, #96	; 0x60
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b30:	f3ef 8311 	mrs	r3, BASEPRI
 8005b34:	f04f 0120 	mov.w	r1, #32
 8005b38:	f381 8811 	msr	BASEPRI, r1
 8005b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3e:	48b7      	ldr	r0, [pc, #732]	; (8005e1c <_VPrintTarget+0x2f8>)
 8005b40:	f7ff fbee 	bl	8005320 <_PreparePacket>
 8005b44:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b46:	4bb5      	ldr	r3, [pc, #724]	; (8005e1c <_VPrintTarget+0x2f8>)
 8005b48:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3301      	adds	r3, #1
 8005b56:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8183 	beq.w	8005e7a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b78:	2b25      	cmp	r3, #37	; 0x25
 8005b7a:	f040 8170 	bne.w	8005e5e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b92:	3b23      	subs	r3, #35	; 0x23
 8005b94:	2b0d      	cmp	r3, #13
 8005b96:	d83f      	bhi.n	8005c18 <_VPrintTarget+0xf4>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <_VPrintTarget+0x7c>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005c09 	.word	0x08005c09
 8005ba4:	08005c19 	.word	0x08005c19
 8005ba8:	08005c19 	.word	0x08005c19
 8005bac:	08005c19 	.word	0x08005c19
 8005bb0:	08005c19 	.word	0x08005c19
 8005bb4:	08005c19 	.word	0x08005c19
 8005bb8:	08005c19 	.word	0x08005c19
 8005bbc:	08005c19 	.word	0x08005c19
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005c19 	.word	0x08005c19
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005c19 	.word	0x08005c19
 8005bd0:	08005c19 	.word	0x08005c19
 8005bd4:	08005be9 	.word	0x08005be9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e01a      	b.n	8005c1e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e012      	b.n	8005c1e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e00a      	b.n	8005c1e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0a:	f043 0308 	orr.w	r3, r3, #8
 8005c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e002      	b.n	8005c1e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c1c:	bf00      	nop
        }
      } while (v);
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1b0      	bne.n	8005b86 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c24:	2300      	movs	r3, #0
 8005c26:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c34:	2b2f      	cmp	r3, #47	; 0x2f
 8005c36:	d912      	bls.n	8005c5e <_VPrintTarget+0x13a>
 8005c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c3c:	2b39      	cmp	r3, #57	; 0x39
 8005c3e:	d80e      	bhi.n	8005c5e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	461a      	mov	r2, r3
 8005c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c56:	4413      	add	r3, r2
 8005c58:	3b30      	subs	r3, #48	; 0x30
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c5c:	e7e4      	b.n	8005c28 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c70:	d11d      	bne.n	8005cae <_VPrintTarget+0x18a>
        sFormat++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c84:	2b2f      	cmp	r3, #47	; 0x2f
 8005c86:	d912      	bls.n	8005cae <_VPrintTarget+0x18a>
 8005c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c8c:	2b39      	cmp	r3, #57	; 0x39
 8005c8e:	d80e      	bhi.n	8005cae <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3b30      	subs	r3, #48	; 0x30
 8005caa:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005cac:	e7e4      	b.n	8005c78 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cba:	2b6c      	cmp	r3, #108	; 0x6c
 8005cbc:	d003      	beq.n	8005cc6 <_VPrintTarget+0x1a2>
 8005cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cc2:	2b68      	cmp	r3, #104	; 0x68
 8005cc4:	d107      	bne.n	8005cd6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005cd4:	e7ef      	b.n	8005cb6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cda:	2b25      	cmp	r3, #37	; 0x25
 8005cdc:	f000 80b3 	beq.w	8005e46 <_VPrintTarget+0x322>
 8005ce0:	2b25      	cmp	r3, #37	; 0x25
 8005ce2:	f2c0 80b7 	blt.w	8005e54 <_VPrintTarget+0x330>
 8005ce6:	2b78      	cmp	r3, #120	; 0x78
 8005ce8:	f300 80b4 	bgt.w	8005e54 <_VPrintTarget+0x330>
 8005cec:	2b58      	cmp	r3, #88	; 0x58
 8005cee:	f2c0 80b1 	blt.w	8005e54 <_VPrintTarget+0x330>
 8005cf2:	3b58      	subs	r3, #88	; 0x58
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	f200 80ad 	bhi.w	8005e54 <_VPrintTarget+0x330>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <_VPrintTarget+0x1dc>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005df7 	.word	0x08005df7
 8005d04:	08005e55 	.word	0x08005e55
 8005d08:	08005e55 	.word	0x08005e55
 8005d0c:	08005e55 	.word	0x08005e55
 8005d10:	08005e55 	.word	0x08005e55
 8005d14:	08005e55 	.word	0x08005e55
 8005d18:	08005e55 	.word	0x08005e55
 8005d1c:	08005e55 	.word	0x08005e55
 8005d20:	08005e55 	.word	0x08005e55
 8005d24:	08005e55 	.word	0x08005e55
 8005d28:	08005e55 	.word	0x08005e55
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005dab 	.word	0x08005dab
 8005d34:	08005e55 	.word	0x08005e55
 8005d38:	08005e55 	.word	0x08005e55
 8005d3c:	08005e55 	.word	0x08005e55
 8005d40:	08005e55 	.word	0x08005e55
 8005d44:	08005e55 	.word	0x08005e55
 8005d48:	08005e55 	.word	0x08005e55
 8005d4c:	08005e55 	.word	0x08005e55
 8005d50:	08005e55 	.word	0x08005e55
 8005d54:	08005e55 	.word	0x08005e55
 8005d58:	08005e55 	.word	0x08005e55
 8005d5c:	08005e55 	.word	0x08005e55
 8005d60:	08005e21 	.word	0x08005e21
 8005d64:	08005e55 	.word	0x08005e55
 8005d68:	08005e55 	.word	0x08005e55
 8005d6c:	08005e55 	.word	0x08005e55
 8005d70:	08005e55 	.word	0x08005e55
 8005d74:	08005dd1 	.word	0x08005dd1
 8005d78:	08005e55 	.word	0x08005e55
 8005d7c:	08005e55 	.word	0x08005e55
 8005d80:	08005df7 	.word	0x08005df7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	1d19      	adds	r1, r3, #4
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6011      	str	r1, [r2, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d98:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fd1c 	bl	80057e0 <_StoreChar>
        break;
 8005da8:	e055      	b.n	8005e56 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	1d19      	adds	r1, r3, #4
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6011      	str	r1, [r2, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005db8:	f107 0014 	add.w	r0, r7, #20
 8005dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbe:	9301      	str	r3, [sp, #4]
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc6:	220a      	movs	r2, #10
 8005dc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dca:	f7ff fe1b 	bl	8005a04 <_PrintInt>
        break;
 8005dce:	e042      	b.n	8005e56 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005de0:	f107 0014 	add.w	r0, r7, #20
 8005de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dee:	220a      	movs	r2, #10
 8005df0:	f7ff fd72 	bl	80058d8 <_PrintUnsigned>
        break;
 8005df4:	e02f      	b.n	8005e56 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6011      	str	r1, [r2, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e06:	f107 0014 	add.w	r0, r7, #20
 8005e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e14:	2210      	movs	r2, #16
 8005e16:	f7ff fd5f 	bl	80058d8 <_PrintUnsigned>
        break;
 8005e1a:	e01c      	b.n	8005e56 <_VPrintTarget+0x332>
 8005e1c:	20014428 	.word	0x20014428
      case 'p':
        v = va_arg(*pParamList, int);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	1d19      	adds	r1, r3, #4
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6011      	str	r1, [r2, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e30:	f107 0014 	add.w	r0, r7, #20
 8005e34:	2300      	movs	r3, #0
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	2308      	movs	r3, #8
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	2210      	movs	r2, #16
 8005e40:	f7ff fd4a 	bl	80058d8 <_PrintUnsigned>
        break;
 8005e44:	e007      	b.n	8005e56 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e46:	f107 0314 	add.w	r3, r7, #20
 8005e4a:	2125      	movs	r1, #37	; 0x25
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fcc7 	bl	80057e0 <_StoreChar>
        break;
 8005e52:	e000      	b.n	8005e56 <_VPrintTarget+0x332>
      default:
        break;
 8005e54:	bf00      	nop
      }
      sFormat++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e007      	b.n	8005e6e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e5e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e62:	f107 0314 	add.w	r3, r7, #20
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fcb9 	bl	80057e0 <_StoreChar>
    }
  } while (*sFormat);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f47f ae72 	bne.w	8005b5c <_VPrintTarget+0x38>
 8005e78:	e000      	b.n	8005e7c <_VPrintTarget+0x358>
      break;
 8005e7a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d041      	beq.n	8005f06 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e92:	e00b      	b.n	8005eac <_VPrintTarget+0x388>
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	6439      	str	r1, [r7, #64]	; 0x40
 8005e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea8:	09db      	lsrs	r3, r3, #7
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eae:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb0:	d8f0      	bhi.n	8005e94 <_VPrintTarget+0x370>
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	643a      	str	r2, [r7, #64]	; 0x40
 8005eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	e00b      	b.n	8005ee4 <_VPrintTarget+0x3c0>
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	1c59      	adds	r1, r3, #1
 8005ed4:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	09db      	lsrs	r3, r3, #7
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee8:	d8f0      	bhi.n	8005ecc <_VPrintTarget+0x3a8>
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	69b9      	ldr	r1, [r7, #24]
 8005efe:	221a      	movs	r2, #26
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fafd 	bl	8005500 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f0c:	bf00      	nop
 8005f0e:	3758      	adds	r7, #88	; 0x58
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f22:	2300      	movs	r3, #0
 8005f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f28:	4917      	ldr	r1, [pc, #92]	; (8005f88 <SEGGER_SYSVIEW_Init+0x74>)
 8005f2a:	4818      	ldr	r0, [pc, #96]	; (8005f8c <SEGGER_SYSVIEW_Init+0x78>)
 8005f2c:	f7ff f8d8 	bl	80050e0 <SEGGER_RTT_AllocUpBuffer>
 8005f30:	4603      	mov	r3, r0
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f38:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f3a:	785a      	ldrb	r2, [r3, #1]
 8005f3c:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f40:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f42:	7e1b      	ldrb	r3, [r3, #24]
 8005f44:	4618      	mov	r0, r3
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <SEGGER_SYSVIEW_Init+0x80>)
 8005f4e:	490f      	ldr	r1, [pc, #60]	; (8005f8c <SEGGER_SYSVIEW_Init+0x78>)
 8005f50:	f7ff f94a 	bl	80051e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <SEGGER_SYSVIEW_Init+0x84>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f62:	4a0b      	ldr	r2, [pc, #44]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f68:	4a09      	ldr	r2, [pc, #36]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f6e:	4a08      	ldr	r2, [pc, #32]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f74:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	200133f0 	.word	0x200133f0
 8005f8c:	08007958 	.word	0x08007958
 8005f90:	200143f8 	.word	0x200143f8
 8005f94:	200143f0 	.word	0x200143f0
 8005f98:	e0001004 	.word	0xe0001004

08005f9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005fa4:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6113      	str	r3, [r2, #16]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	200143f8 	.word	0x200143f8

08005fbc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc8:	f04f 0120 	mov.w	r1, #32
 8005fcc:	f381 8811 	msr	BASEPRI, r1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4808      	ldr	r0, [pc, #32]	; (8005ff4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005fd4:	f7ff f9a4 	bl	8005320 <_PreparePacket>
 8005fd8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68b8      	ldr	r0, [r7, #8]
 8005fe0:	f7ff fa8e 	bl	8005500 <_SendPacket>
  RECORD_END();
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f383 8811 	msr	BASEPRI, r3
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20014428 	.word	0x20014428

08005ff8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006002:	f3ef 8311 	mrs	r3, BASEPRI
 8006006:	f04f 0120 	mov.w	r1, #32
 800600a:	f381 8811 	msr	BASEPRI, r1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	4816      	ldr	r0, [pc, #88]	; (800606c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006012:	f7ff f985 	bl	8005320 <_PreparePacket>
 8006016:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e00b      	b.n	800603e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	1c59      	adds	r1, r3, #1
 800602e:	61f9      	str	r1, [r7, #28]
 8006030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	09db      	lsrs	r3, r3, #7
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b7f      	cmp	r3, #127	; 0x7f
 8006042:	d8f0      	bhi.n	8006026 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	61fa      	str	r2, [r7, #28]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	6938      	ldr	r0, [r7, #16]
 800605a:	f7ff fa51 	bl	8005500 <_SendPacket>
  RECORD_END();
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f383 8811 	msr	BASEPRI, r3
}
 8006064:	bf00      	nop
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20014428 	.word	0x20014428

08006070 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b08c      	sub	sp, #48	; 0x30
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800607c:	f3ef 8311 	mrs	r3, BASEPRI
 8006080:	f04f 0120 	mov.w	r1, #32
 8006084:	f381 8811 	msr	BASEPRI, r1
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	4825      	ldr	r0, [pc, #148]	; (8006120 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800608c:	f7ff f948 	bl	8005320 <_PreparePacket>
 8006090:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
 800609e:	e00b      	b.n	80060b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	1c59      	adds	r1, r3, #1
 80060a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	09db      	lsrs	r3, r3, #7
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	2b7f      	cmp	r3, #127	; 0x7f
 80060bc:	d8f0      	bhi.n	80060a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	e00b      	b.n	80060f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	6279      	str	r1, [r7, #36]	; 0x24
 80060e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	09db      	lsrs	r3, r3, #7
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b7f      	cmp	r3, #127	; 0x7f
 80060f4:	d8f0      	bhi.n	80060d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	627a      	str	r2, [r7, #36]	; 0x24
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	6979      	ldr	r1, [r7, #20]
 800610a:	69b8      	ldr	r0, [r7, #24]
 800610c:	f7ff f9f8 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f383 8811 	msr	BASEPRI, r3
}
 8006116:	bf00      	nop
 8006118:	3730      	adds	r7, #48	; 0x30
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20014428 	.word	0x20014428

08006124 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b08e      	sub	sp, #56	; 0x38
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006132:	f3ef 8311 	mrs	r3, BASEPRI
 8006136:	f04f 0120 	mov.w	r1, #32
 800613a:	f381 8811 	msr	BASEPRI, r1
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	4832      	ldr	r0, [pc, #200]	; (800620c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006142:	f7ff f8ed 	bl	8005320 <_PreparePacket>
 8006146:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	633b      	str	r3, [r7, #48]	; 0x30
 8006154:	e00b      	b.n	800616e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	b2da      	uxtb	r2, r3
 800615a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615c:	1c59      	adds	r1, r3, #1
 800615e:	6379      	str	r1, [r7, #52]	; 0x34
 8006160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	09db      	lsrs	r3, r3, #7
 800616c:	633b      	str	r3, [r7, #48]	; 0x30
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	2b7f      	cmp	r3, #127	; 0x7f
 8006172:	d8f0      	bhi.n	8006156 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	637a      	str	r2, [r7, #52]	; 0x34
 800617a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
 800618c:	e00b      	b.n	80061a6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	1c59      	adds	r1, r3, #1
 8006196:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006198:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	09db      	lsrs	r3, r3, #7
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	2b7f      	cmp	r3, #127	; 0x7f
 80061aa:	d8f0      	bhi.n	800618e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	623b      	str	r3, [r7, #32]
 80061c4:	e00b      	b.n	80061de <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	1c59      	adds	r1, r3, #1
 80061ce:	6279      	str	r1, [r7, #36]	; 0x24
 80061d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	09db      	lsrs	r3, r3, #7
 80061dc:	623b      	str	r3, [r7, #32]
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	2b7f      	cmp	r3, #127	; 0x7f
 80061e2:	d8f0      	bhi.n	80061c6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	627a      	str	r2, [r7, #36]	; 0x24
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	69b8      	ldr	r0, [r7, #24]
 80061fa:	f7ff f981 	bl	8005500 <_SendPacket>
  RECORD_END();
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f383 8811 	msr	BASEPRI, r3
}
 8006204:	bf00      	nop
 8006206:	3738      	adds	r7, #56	; 0x38
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20014428 	.word	0x20014428

08006210 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b090      	sub	sp, #64	; 0x40
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800621e:	f3ef 8311 	mrs	r3, BASEPRI
 8006222:	f04f 0120 	mov.w	r1, #32
 8006226:	f381 8811 	msr	BASEPRI, r1
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	4840      	ldr	r0, [pc, #256]	; (8006330 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800622e:	f7ff f877 	bl	8005320 <_PreparePacket>
 8006232:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006240:	e00b      	b.n	800625a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	b2da      	uxtb	r2, r3
 8006246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006248:	1c59      	adds	r1, r3, #1
 800624a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800624c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	09db      	lsrs	r3, r3, #7
 8006258:	63bb      	str	r3, [r7, #56]	; 0x38
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	2b7f      	cmp	r3, #127	; 0x7f
 800625e:	d8f0      	bhi.n	8006242 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	633b      	str	r3, [r7, #48]	; 0x30
 8006278:	e00b      	b.n	8006292 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	b2da      	uxtb	r2, r3
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	1c59      	adds	r1, r3, #1
 8006282:	6379      	str	r1, [r7, #52]	; 0x34
 8006284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	09db      	lsrs	r3, r3, #7
 8006290:	633b      	str	r3, [r7, #48]	; 0x30
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2b7f      	cmp	r3, #127	; 0x7f
 8006296:	d8f0      	bhi.n	800627a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	637a      	str	r2, [r7, #52]	; 0x34
 800629e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b0:	e00b      	b.n	80062ca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	09db      	lsrs	r3, r3, #7
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	2b7f      	cmp	r3, #127	; 0x7f
 80062ce:	d8f0      	bhi.n	80062b2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	e00b      	b.n	8006302 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	6279      	str	r1, [r7, #36]	; 0x24
 80062f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	2b7f      	cmp	r3, #127	; 0x7f
 8006306:	d8f0      	bhi.n	80062ea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	627a      	str	r2, [r7, #36]	; 0x24
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	6979      	ldr	r1, [r7, #20]
 800631c:	69b8      	ldr	r0, [r7, #24]
 800631e:	f7ff f8ef 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f383 8811 	msr	BASEPRI, r3
}
 8006328:	bf00      	nop
 800632a:	3740      	adds	r7, #64	; 0x40
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20014428 	.word	0x20014428

08006334 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b08c      	sub	sp, #48	; 0x30
 8006338:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800633a:	4b59      	ldr	r3, [pc, #356]	; (80064a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	f04f 0120 	mov.w	r1, #32
 8006348:	f381 8811 	msr	BASEPRI, r1
 800634c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800634e:	4b54      	ldr	r3, [pc, #336]	; (80064a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	220a      	movs	r2, #10
 8006354:	4953      	ldr	r1, [pc, #332]	; (80064a4 <SEGGER_SYSVIEW_Start+0x170>)
 8006356:	4618      	mov	r0, r3
 8006358:	f7f9 ff3a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006362:	f7fe fb8f 	bl	8004a84 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006366:	200a      	movs	r0, #10
 8006368:	f7ff fe28 	bl	8005fbc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800636c:	f3ef 8311 	mrs	r3, BASEPRI
 8006370:	f04f 0120 	mov.w	r1, #32
 8006374:	f381 8811 	msr	BASEPRI, r1
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	484b      	ldr	r0, [pc, #300]	; (80064a8 <SEGGER_SYSVIEW_Start+0x174>)
 800637c:	f7fe ffd0 	bl	8005320 <_PreparePacket>
 8006380:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	4b45      	ldr	r3, [pc, #276]	; (80064a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006390:	e00b      	b.n	80063aa <SEGGER_SYSVIEW_Start+0x76>
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	b2da      	uxtb	r2, r3
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800639c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	09db      	lsrs	r3, r3, #7
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	2b7f      	cmp	r3, #127	; 0x7f
 80063ae:	d8f0      	bhi.n	8006392 <SEGGER_SYSVIEW_Start+0x5e>
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
 80063c4:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <SEGGER_SYSVIEW_Start+0x16c>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	623b      	str	r3, [r7, #32]
 80063ca:	e00b      	b.n	80063e4 <SEGGER_SYSVIEW_Start+0xb0>
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	6279      	str	r1, [r7, #36]	; 0x24
 80063d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	09db      	lsrs	r3, r3, #7
 80063e2:	623b      	str	r3, [r7, #32]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b7f      	cmp	r3, #127	; 0x7f
 80063e8:	d8f0      	bhi.n	80063cc <SEGGER_SYSVIEW_Start+0x98>
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	627a      	str	r2, [r7, #36]	; 0x24
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e00b      	b.n	800641e <SEGGER_SYSVIEW_Start+0xea>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	1c59      	adds	r1, r3, #1
 800640e:	61f9      	str	r1, [r7, #28]
 8006410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	09db      	lsrs	r3, r3, #7
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	2b7f      	cmp	r3, #127	; 0x7f
 8006422:	d8f0      	bhi.n	8006406 <SEGGER_SYSVIEW_Start+0xd2>
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	61fa      	str	r2, [r7, #28]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e00b      	b.n	8006456 <SEGGER_SYSVIEW_Start+0x122>
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	1c59      	adds	r1, r3, #1
 8006446:	6179      	str	r1, [r7, #20]
 8006448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	09db      	lsrs	r3, r3, #7
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b7f      	cmp	r3, #127	; 0x7f
 800645a:	d8f0      	bhi.n	800643e <SEGGER_SYSVIEW_Start+0x10a>
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	617a      	str	r2, [r7, #20]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800646c:	2218      	movs	r2, #24
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff f845 	bl	8005500 <_SendPacket>
      RECORD_END();
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800647c:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800648a:	f000 f9eb 	bl	8006864 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800648e:	f000 f9b1 	bl	80067f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006492:	f000 fc23 	bl	8006cdc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006496:	bf00      	nop
 8006498:	3730      	adds	r7, #48	; 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200143f8 	.word	0x200143f8
 80064a4:	08007998 	.word	0x08007998
 80064a8:	20014428 	.word	0x20014428

080064ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064b2:	f3ef 8311 	mrs	r3, BASEPRI
 80064b6:	f04f 0120 	mov.w	r1, #32
 80064ba:	f381 8811 	msr	BASEPRI, r1
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	480b      	ldr	r0, [pc, #44]	; (80064f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80064c2:	f7fe ff2d 	bl	8005320 <_PreparePacket>
 80064c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064d0:	220b      	movs	r2, #11
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6838      	ldr	r0, [r7, #0]
 80064d6:	f7ff f813 	bl	8005500 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80064dc:	2200      	movs	r2, #0
 80064de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f383 8811 	msr	BASEPRI, r3
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20014428 	.word	0x20014428
 80064f4:	200143f8 	.word	0x200143f8

080064f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	; 0x30
 80064fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006502:	f04f 0120 	mov.w	r1, #32
 8006506:	f381 8811 	msr	BASEPRI, r1
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	4845      	ldr	r0, [pc, #276]	; (8006624 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800650e:	f7fe ff07 	bl	8005320 <_PreparePacket>
 8006512:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651c:	4b42      	ldr	r3, [pc, #264]	; (8006628 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
 8006522:	e00b      	b.n	800653c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	b2da      	uxtb	r2, r3
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	1c59      	adds	r1, r3, #1
 800652c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800652e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	09db      	lsrs	r3, r3, #7
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b7f      	cmp	r3, #127	; 0x7f
 8006540:	d8f0      	bhi.n	8006524 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	4b34      	ldr	r3, [pc, #208]	; (8006628 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	e00b      	b.n	8006576 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	6279      	str	r1, [r7, #36]	; 0x24
 8006568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	09db      	lsrs	r3, r3, #7
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	2b7f      	cmp	r3, #127	; 0x7f
 800657a:	d8f0      	bhi.n	800655e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	627a      	str	r2, [r7, #36]	; 0x24
 8006582:	6a3a      	ldr	r2, [r7, #32]
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	4b25      	ldr	r3, [pc, #148]	; (8006628 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e00b      	b.n	80065b0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	b2da      	uxtb	r2, r3
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	1c59      	adds	r1, r3, #1
 80065a0:	61f9      	str	r1, [r7, #28]
 80065a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	09db      	lsrs	r3, r3, #7
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b7f      	cmp	r3, #127	; 0x7f
 80065b4:	d8f0      	bhi.n	8006598 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	61fa      	str	r2, [r7, #28]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e00b      	b.n	80065e8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	6179      	str	r1, [r7, #20]
 80065da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	09db      	lsrs	r3, r3, #7
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b7f      	cmp	r3, #127	; 0x7f
 80065ec:	d8f0      	bhi.n	80065d0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	617a      	str	r2, [r7, #20]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065fe:	2218      	movs	r2, #24
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	68b8      	ldr	r0, [r7, #8]
 8006604:	f7fe ff7c 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006616:	4b04      	ldr	r3, [pc, #16]	; (8006628 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	4798      	blx	r3
  }
}
 800661c:	bf00      	nop
 800661e:	3730      	adds	r7, #48	; 0x30
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20014428 	.word	0x20014428
 8006628:	200143f8 	.word	0x200143f8

0800662c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b092      	sub	sp, #72	; 0x48
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006634:	f3ef 8311 	mrs	r3, BASEPRI
 8006638:	f04f 0120 	mov.w	r1, #32
 800663c:	f381 8811 	msr	BASEPRI, r1
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	486a      	ldr	r0, [pc, #424]	; (80067ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006644:	f7fe fe6c 	bl	8005320 <_PreparePacket>
 8006648:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	647b      	str	r3, [r7, #68]	; 0x44
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b66      	ldr	r3, [pc, #408]	; (80067f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	643b      	str	r3, [r7, #64]	; 0x40
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	6479      	str	r1, [r7, #68]	; 0x44
 800666a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	2b7f      	cmp	r3, #127	; 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800667e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	647a      	str	r2, [r7, #68]	; 0x44
 8006684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38
 8006698:	e00b      	b.n	80066b2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	2b7f      	cmp	r3, #127	; 0x7f
 80066b6:	d8f0      	bhi.n	800669a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	4619      	mov	r1, r3
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7fe fdd5 	bl	8005280 <_EncodeStr>
 80066d6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80066d8:	2209      	movs	r2, #9
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	6938      	ldr	r0, [r7, #16]
 80066de:	f7fe ff0f 	bl	8005500 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b40      	ldr	r3, [pc, #256]	; (80067f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30
 80066f6:	e00b      	b.n	8006710 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	1c59      	adds	r1, r3, #1
 8006700:	6379      	str	r1, [r7, #52]	; 0x34
 8006702:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	09db      	lsrs	r3, r3, #7
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	2b7f      	cmp	r3, #127	; 0x7f
 8006714:	d8f0      	bhi.n	80066f8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	637a      	str	r2, [r7, #52]	; 0x34
 800671c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006730:	e00b      	b.n	800674a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800673c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	2b7f      	cmp	r3, #127	; 0x7f
 800674e:	d8f0      	bhi.n	8006732 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	e00b      	b.n	8006784 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1c59      	adds	r1, r3, #1
 8006774:	6279      	str	r1, [r7, #36]	; 0x24
 8006776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	09db      	lsrs	r3, r3, #7
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	2b7f      	cmp	r3, #127	; 0x7f
 8006788:	d8f0      	bhi.n	800676c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	627a      	str	r2, [r7, #36]	; 0x24
 8006790:	6a3a      	ldr	r2, [r7, #32]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	2300      	movs	r3, #0
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e00b      	b.n	80067bc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	61f9      	str	r1, [r7, #28]
 80067ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	09db      	lsrs	r3, r3, #7
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b7f      	cmp	r3, #127	; 0x7f
 80067c0:	d8f0      	bhi.n	80067a4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067d2:	2215      	movs	r2, #21
 80067d4:	68f9      	ldr	r1, [r7, #12]
 80067d6:	6938      	ldr	r0, [r7, #16]
 80067d8:	f7fe fe92 	bl	8005500 <_SendPacket>
  RECORD_END();
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f383 8811 	msr	BASEPRI, r3
}
 80067e2:	bf00      	nop
 80067e4:	3748      	adds	r7, #72	; 0x48
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20014428 	.word	0x20014428
 80067f0:	200143f8 	.word	0x200143f8

080067f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800680a:	4b03      	ldr	r3, [pc, #12]	; (8006818 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4798      	blx	r3
  }
}
 8006812:	bf00      	nop
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	200143f8 	.word	0x200143f8

0800681c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006824:	f3ef 8311 	mrs	r3, BASEPRI
 8006828:	f04f 0120 	mov.w	r1, #32
 800682c:	f381 8811 	msr	BASEPRI, r1
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	480b      	ldr	r0, [pc, #44]	; (8006860 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006834:	f7fe fd74 	bl	8005320 <_PreparePacket>
 8006838:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	6938      	ldr	r0, [r7, #16]
 8006840:	f7fe fd1e 	bl	8005280 <_EncodeStr>
 8006844:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006846:	220e      	movs	r2, #14
 8006848:	68f9      	ldr	r1, [r7, #12]
 800684a:	6938      	ldr	r0, [r7, #16]
 800684c:	f7fe fe58 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f383 8811 	msr	BASEPRI, r3
}
 8006856:	bf00      	nop
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20014428 	.word	0x20014428

08006864 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01a      	beq.n	80068a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006872:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d015      	beq.n	80068a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4798      	blx	r3
 8006884:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006888:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800688a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	000a      	movs	r2, r1
 8006898:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800689a:	4613      	mov	r3, r2
 800689c:	461a      	mov	r2, r3
 800689e:	4621      	mov	r1, r4
 80068a0:	200d      	movs	r0, #13
 80068a2:	f7ff fbe5 	bl	8006070 <SEGGER_SYSVIEW_RecordU32x2>
 80068a6:	e006      	b.n	80068b6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4619      	mov	r1, r3
 80068ae:	200c      	movs	r0, #12
 80068b0:	f7ff fba2 	bl	8005ff8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd90      	pop	{r4, r7, pc}
 80068be:	bf00      	nop
 80068c0:	200143f8 	.word	0x200143f8
 80068c4:	e0001004 	.word	0xe0001004

080068c8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068ce:	f3ef 8311 	mrs	r3, BASEPRI
 80068d2:	f04f 0120 	mov.w	r1, #32
 80068d6:	f381 8811 	msr	BASEPRI, r1
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	4819      	ldr	r0, [pc, #100]	; (8006944 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068de:	f7fe fd1f 	bl	8005320 <_PreparePacket>
 80068e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068e8:	4b17      	ldr	r3, [pc, #92]	; (8006948 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	e00b      	b.n	8006914 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1c59      	adds	r1, r3, #1
 8006904:	6179      	str	r1, [r7, #20]
 8006906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	09db      	lsrs	r3, r3, #7
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b7f      	cmp	r3, #127	; 0x7f
 8006918:	d8f0      	bhi.n	80068fc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	617a      	str	r2, [r7, #20]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800692a:	2202      	movs	r2, #2
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	68b8      	ldr	r0, [r7, #8]
 8006930:	f7fe fde6 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f383 8811 	msr	BASEPRI, r3
}
 800693a:	bf00      	nop
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20014428 	.word	0x20014428
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006952:	f3ef 8311 	mrs	r3, BASEPRI
 8006956:	f04f 0120 	mov.w	r1, #32
 800695a:	f381 8811 	msr	BASEPRI, r1
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	4807      	ldr	r0, [pc, #28]	; (8006980 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006962:	f7fe fcdd 	bl	8005320 <_PreparePacket>
 8006966:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006968:	2203      	movs	r2, #3
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6838      	ldr	r0, [r7, #0]
 800696e:	f7fe fdc7 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f383 8811 	msr	BASEPRI, r3
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20014428 	.word	0x20014428

08006984 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800698a:	f3ef 8311 	mrs	r3, BASEPRI
 800698e:	f04f 0120 	mov.w	r1, #32
 8006992:	f381 8811 	msr	BASEPRI, r1
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	4807      	ldr	r0, [pc, #28]	; (80069b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800699a:	f7fe fcc1 	bl	8005320 <_PreparePacket>
 800699e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069a0:	2212      	movs	r2, #18
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6838      	ldr	r0, [r7, #0]
 80069a6:	f7fe fdab 	bl	8005500 <_SendPacket>
  RECORD_END();
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f383 8811 	msr	BASEPRI, r3
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20014428 	.word	0x20014428

080069bc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069c2:	f3ef 8311 	mrs	r3, BASEPRI
 80069c6:	f04f 0120 	mov.w	r1, #32
 80069ca:	f381 8811 	msr	BASEPRI, r1
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	4807      	ldr	r0, [pc, #28]	; (80069f0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069d2:	f7fe fca5 	bl	8005320 <_PreparePacket>
 80069d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80069d8:	2211      	movs	r2, #17
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6838      	ldr	r0, [r7, #0]
 80069de:	f7fe fd8f 	bl	8005500 <_SendPacket>
  RECORD_END();
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f383 8811 	msr	BASEPRI, r3
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20014428 	.word	0x20014428

080069f4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006a00:	f04f 0120 	mov.w	r1, #32
 8006a04:	f381 8811 	msr	BASEPRI, r1
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	4819      	ldr	r0, [pc, #100]	; (8006a70 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a0c:	f7fe fc88 	bl	8005320 <_PreparePacket>
 8006a10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a16:	4b17      	ldr	r3, [pc, #92]	; (8006a74 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e00b      	b.n	8006a42 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	1c59      	adds	r1, r3, #1
 8006a32:	61f9      	str	r1, [r7, #28]
 8006a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	09db      	lsrs	r3, r3, #7
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b7f      	cmp	r3, #127	; 0x7f
 8006a46:	d8f0      	bhi.n	8006a2a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	61fa      	str	r2, [r7, #28]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a58:	2208      	movs	r2, #8
 8006a5a:	68f9      	ldr	r1, [r7, #12]
 8006a5c:	6938      	ldr	r0, [r7, #16]
 8006a5e:	f7fe fd4f 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f383 8811 	msr	BASEPRI, r3
}
 8006a68:	bf00      	nop
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20014428 	.word	0x20014428
 8006a74:	200143f8 	.word	0x200143f8

08006a78 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a80:	f3ef 8311 	mrs	r3, BASEPRI
 8006a84:	f04f 0120 	mov.w	r1, #32
 8006a88:	f381 8811 	msr	BASEPRI, r1
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	4819      	ldr	r0, [pc, #100]	; (8006af4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a90:	f7fe fc46 	bl	8005320 <_PreparePacket>
 8006a94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a9a:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	e00b      	b.n	8006ac6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	61f9      	str	r1, [r7, #28]
 8006ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	09db      	lsrs	r3, r3, #7
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aca:	d8f0      	bhi.n	8006aae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006adc:	2204      	movs	r2, #4
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	6938      	ldr	r0, [r7, #16]
 8006ae2:	f7fe fd0d 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f383 8811 	msr	BASEPRI, r3
}
 8006aec:	bf00      	nop
 8006aee:	3720      	adds	r7, #32
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20014428 	.word	0x20014428
 8006af8:	200143f8 	.word	0x200143f8

08006afc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b04:	f3ef 8311 	mrs	r3, BASEPRI
 8006b08:	f04f 0120 	mov.w	r1, #32
 8006b0c:	f381 8811 	msr	BASEPRI, r1
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	4819      	ldr	r0, [pc, #100]	; (8006b78 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b14:	f7fe fc04 	bl	8005320 <_PreparePacket>
 8006b18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b1e:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	e00b      	b.n	8006b4a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	61f9      	str	r1, [r7, #28]
 8006b3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	09db      	lsrs	r3, r3, #7
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4e:	d8f0      	bhi.n	8006b32 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	61fa      	str	r2, [r7, #28]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b60:	2206      	movs	r2, #6
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	6938      	ldr	r0, [r7, #16]
 8006b66:	f7fe fccb 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f383 8811 	msr	BASEPRI, r3
}
 8006b70:	bf00      	nop
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20014428 	.word	0x20014428
 8006b7c:	200143f8 	.word	0x200143f8

08006b80 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	1ad3      	subs	r3, r2, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	200143f8 	.word	0x200143f8

08006ba0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08c      	sub	sp, #48	; 0x30
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006baa:	4b3b      	ldr	r3, [pc, #236]	; (8006c98 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d06d      	beq.n	8006c8e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006bb2:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006bb8:	2300      	movs	r3, #0
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bbc:	e008      	b.n	8006bd0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	3301      	adds	r3, #1
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d3f2      	bcc.n	8006bbe <SEGGER_SYSVIEW_SendModule+0x1e>
 8006bd8:	e000      	b.n	8006bdc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006bda:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d055      	beq.n	8006c8e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006be2:	f3ef 8311 	mrs	r3, BASEPRI
 8006be6:	f04f 0120 	mov.w	r1, #32
 8006bea:	f381 8811 	msr	BASEPRI, r1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	482a      	ldr	r0, [pc, #168]	; (8006c9c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006bf2:	f7fe fb95 	bl	8005320 <_PreparePacket>
 8006bf6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	623b      	str	r3, [r7, #32]
 8006c04:	e00b      	b.n	8006c1e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	1c59      	adds	r1, r3, #1
 8006c0e:	6279      	str	r1, [r7, #36]	; 0x24
 8006c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	09db      	lsrs	r3, r3, #7
 8006c1c:	623b      	str	r3, [r7, #32]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	2b7f      	cmp	r3, #127	; 0x7f
 8006c22:	d8f0      	bhi.n	8006c06 <SEGGER_SYSVIEW_SendModule+0x66>
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	627a      	str	r2, [r7, #36]	; 0x24
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	e00b      	b.n	8006c58 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	1c59      	adds	r1, r3, #1
 8006c48:	61f9      	str	r1, [r7, #28]
 8006c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	09db      	lsrs	r3, r3, #7
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c5c:	d8f0      	bhi.n	8006c40 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	61fa      	str	r2, [r7, #28]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2280      	movs	r2, #128	; 0x80
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f7fe fb02 	bl	8005280 <_EncodeStr>
 8006c7c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c7e:	2216      	movs	r2, #22
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	6938      	ldr	r0, [r7, #16]
 8006c84:	f7fe fc3c 	bl	8005500 <_SendPacket>
      RECORD_END();
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c8e:	bf00      	nop
 8006c90:	3730      	adds	r7, #48	; 0x30
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20014420 	.word	0x20014420
 8006c9c:	20014428 	.word	0x20014428

08006ca0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00f      	beq.n	8006cce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f2      	bne.n	8006cb4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20014420 	.word	0x20014420

08006cdc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce6:	f04f 0120 	mov.w	r1, #32
 8006cea:	f381 8811 	msr	BASEPRI, r1
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	4817      	ldr	r0, [pc, #92]	; (8006d50 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006cf2:	f7fe fb15 	bl	8005320 <_PreparePacket>
 8006cf6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	e00b      	b.n	8006d20 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	1c59      	adds	r1, r3, #1
 8006d10:	6179      	str	r1, [r7, #20]
 8006d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	09db      	lsrs	r3, r3, #7
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b7f      	cmp	r3, #127	; 0x7f
 8006d24:	d8f0      	bhi.n	8006d08 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	617a      	str	r2, [r7, #20]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d36:	221b      	movs	r2, #27
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	68b8      	ldr	r0, [r7, #8]
 8006d3c:	f7fe fbe0 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f383 8811 	msr	BASEPRI, r3
}
 8006d46:	bf00      	nop
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20014428 	.word	0x20014428
 8006d54:	20014424 	.word	0x20014424

08006d58 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d58:	b40f      	push	{r0, r1, r2, r3}
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d60:	f107 0314 	add.w	r3, r7, #20
 8006d64:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d66:	1d3b      	adds	r3, r7, #4
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6938      	ldr	r0, [r7, #16]
 8006d6e:	f7fe fed9 	bl	8005b24 <_VPrintTarget>
  va_end(ParamList);
}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d7c:	b004      	add	sp, #16
 8006d7e:	4770      	bx	lr

08006d80 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	; 0x28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d88:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8c:	f04f 0120 	mov.w	r1, #32
 8006d90:	f381 8811 	msr	BASEPRI, r1
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	4827      	ldr	r0, [pc, #156]	; (8006e34 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d98:	f7fe fac2 	bl	8005320 <_PreparePacket>
 8006d9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d9e:	2280      	movs	r2, #128	; 0x80
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	6938      	ldr	r0, [r7, #16]
 8006da4:	f7fe fa6c 	bl	8005280 <_EncodeStr>
 8006da8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
 8006dae:	2301      	movs	r3, #1
 8006db0:	623b      	str	r3, [r7, #32]
 8006db2:	e00b      	b.n	8006dcc <SEGGER_SYSVIEW_Warn+0x4c>
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	6279      	str	r1, [r7, #36]	; 0x24
 8006dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	09db      	lsrs	r3, r3, #7
 8006dca:	623b      	str	r3, [r7, #32]
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd0:	d8f0      	bhi.n	8006db4 <SEGGER_SYSVIEW_Warn+0x34>
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e00b      	b.n	8006e04 <SEGGER_SYSVIEW_Warn+0x84>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	61f9      	str	r1, [r7, #28]
 8006df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	09db      	lsrs	r3, r3, #7
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b7f      	cmp	r3, #127	; 0x7f
 8006e08:	d8f0      	bhi.n	8006dec <SEGGER_SYSVIEW_Warn+0x6c>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	61fa      	str	r2, [r7, #28]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e1a:	221a      	movs	r2, #26
 8006e1c:	68f9      	ldr	r1, [r7, #12]
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f7fe fb6e 	bl	8005500 <_SendPacket>
  RECORD_END();
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f383 8811 	msr	BASEPRI, r3
}
 8006e2a:	bf00      	nop
 8006e2c:	3728      	adds	r7, #40	; 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20014428 	.word	0x20014428

08006e38 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006e3c:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e3e:	7e1b      	ldrb	r3, [r3, #24]
 8006e40:	4619      	mov	r1, r3
 8006e42:	4a13      	ldr	r2, [pc, #76]	; (8006e90 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e44:	460b      	mov	r3, r1
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	440b      	add	r3, r1
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	4413      	add	r3, r2
 8006e4e:	336c      	adds	r3, #108	; 0x6c
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e54:	7e1b      	ldrb	r3, [r3, #24]
 8006e56:	4618      	mov	r0, r3
 8006e58:	490d      	ldr	r1, [pc, #52]	; (8006e90 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4403      	add	r3, r0
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	440b      	add	r3, r1
 8006e64:	3370      	adds	r3, #112	; 0x70
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d00b      	beq.n	8006e84 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e6e:	789b      	ldrb	r3, [r3, #2]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006e7a:	f7fe fa5d 	bl	8005338 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006e7e:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006e84:	4b01      	ldr	r3, [pc, #4]	; (8006e8c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	200143f8 	.word	0x200143f8
 8006e90:	20012f38 	.word	0x20012f38

08006e94 <__libc_init_array>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	4d0d      	ldr	r5, [pc, #52]	; (8006ecc <__libc_init_array+0x38>)
 8006e98:	4c0d      	ldr	r4, [pc, #52]	; (8006ed0 <__libc_init_array+0x3c>)
 8006e9a:	1b64      	subs	r4, r4, r5
 8006e9c:	10a4      	asrs	r4, r4, #2
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	42a6      	cmp	r6, r4
 8006ea2:	d109      	bne.n	8006eb8 <__libc_init_array+0x24>
 8006ea4:	4d0b      	ldr	r5, [pc, #44]	; (8006ed4 <__libc_init_array+0x40>)
 8006ea6:	4c0c      	ldr	r4, [pc, #48]	; (8006ed8 <__libc_init_array+0x44>)
 8006ea8:	f000 fcc0 	bl	800782c <_init>
 8006eac:	1b64      	subs	r4, r4, r5
 8006eae:	10a4      	asrs	r4, r4, #2
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	42a6      	cmp	r6, r4
 8006eb4:	d105      	bne.n	8006ec2 <__libc_init_array+0x2e>
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebc:	4798      	blx	r3
 8006ebe:	3601      	adds	r6, #1
 8006ec0:	e7ee      	b.n	8006ea0 <__libc_init_array+0xc>
 8006ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec6:	4798      	blx	r3
 8006ec8:	3601      	adds	r6, #1
 8006eca:	e7f2      	b.n	8006eb2 <__libc_init_array+0x1e>
 8006ecc:	080079f0 	.word	0x080079f0
 8006ed0:	080079f0 	.word	0x080079f0
 8006ed4:	080079f0 	.word	0x080079f0
 8006ed8:	080079f4 	.word	0x080079f4

08006edc <memcmp>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	3901      	subs	r1, #1
 8006ee0:	4402      	add	r2, r0
 8006ee2:	4290      	cmp	r0, r2
 8006ee4:	d101      	bne.n	8006eea <memcmp+0xe>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e005      	b.n	8006ef6 <memcmp+0x1a>
 8006eea:	7803      	ldrb	r3, [r0, #0]
 8006eec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d001      	beq.n	8006ef8 <memcmp+0x1c>
 8006ef4:	1b18      	subs	r0, r3, r4
 8006ef6:	bd10      	pop	{r4, pc}
 8006ef8:	3001      	adds	r0, #1
 8006efa:	e7f2      	b.n	8006ee2 <memcmp+0x6>

08006efc <memcpy>:
 8006efc:	440a      	add	r2, r1
 8006efe:	4291      	cmp	r1, r2
 8006f00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f04:	d100      	bne.n	8006f08 <memcpy+0xc>
 8006f06:	4770      	bx	lr
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f12:	4291      	cmp	r1, r2
 8006f14:	d1f9      	bne.n	8006f0a <memcpy+0xe>
 8006f16:	bd10      	pop	{r4, pc}

08006f18 <memset>:
 8006f18:	4402      	add	r2, r0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d100      	bne.n	8006f22 <memset+0xa>
 8006f20:	4770      	bx	lr
 8006f22:	f803 1b01 	strb.w	r1, [r3], #1
 8006f26:	e7f9      	b.n	8006f1c <memset+0x4>

08006f28 <sniprintf>:
 8006f28:	b40c      	push	{r2, r3}
 8006f2a:	b530      	push	{r4, r5, lr}
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <sniprintf+0x64>)
 8006f2e:	1e0c      	subs	r4, r1, #0
 8006f30:	681d      	ldr	r5, [r3, #0]
 8006f32:	b09d      	sub	sp, #116	; 0x74
 8006f34:	da08      	bge.n	8006f48 <sniprintf+0x20>
 8006f36:	238b      	movs	r3, #139	; 0x8b
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f3e:	b01d      	add	sp, #116	; 0x74
 8006f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f44:	b002      	add	sp, #8
 8006f46:	4770      	bx	lr
 8006f48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f50:	bf14      	ite	ne
 8006f52:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006f56:	4623      	moveq	r3, r4
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	9307      	str	r3, [sp, #28]
 8006f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f60:	9002      	str	r0, [sp, #8]
 8006f62:	9006      	str	r0, [sp, #24]
 8006f64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f6a:	ab21      	add	r3, sp, #132	; 0x84
 8006f6c:	a902      	add	r1, sp, #8
 8006f6e:	4628      	mov	r0, r5
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	f000 f869 	bl	8007048 <_svfiprintf_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	bfbc      	itt	lt
 8006f7a:	238b      	movlt	r3, #139	; 0x8b
 8006f7c:	602b      	strlt	r3, [r5, #0]
 8006f7e:	2c00      	cmp	r4, #0
 8006f80:	d0dd      	beq.n	8006f3e <sniprintf+0x16>
 8006f82:	9b02      	ldr	r3, [sp, #8]
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	e7d9      	b.n	8006f3e <sniprintf+0x16>
 8006f8a:	bf00      	nop
 8006f8c:	2000001c 	.word	0x2000001c

08006f90 <__ssputs_r>:
 8006f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	688e      	ldr	r6, [r1, #8]
 8006f96:	429e      	cmp	r6, r3
 8006f98:	4682      	mov	sl, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	4690      	mov	r8, r2
 8006f9e:	461f      	mov	r7, r3
 8006fa0:	d838      	bhi.n	8007014 <__ssputs_r+0x84>
 8006fa2:	898a      	ldrh	r2, [r1, #12]
 8006fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fa8:	d032      	beq.n	8007010 <__ssputs_r+0x80>
 8006faa:	6825      	ldr	r5, [r4, #0]
 8006fac:	6909      	ldr	r1, [r1, #16]
 8006fae:	eba5 0901 	sub.w	r9, r5, r1
 8006fb2:	6965      	ldr	r5, [r4, #20]
 8006fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	444b      	add	r3, r9
 8006fc0:	106d      	asrs	r5, r5, #1
 8006fc2:	429d      	cmp	r5, r3
 8006fc4:	bf38      	it	cc
 8006fc6:	461d      	movcc	r5, r3
 8006fc8:	0553      	lsls	r3, r2, #21
 8006fca:	d531      	bpl.n	8007030 <__ssputs_r+0xa0>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f000 fb55 	bl	800767c <_malloc_r>
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	b950      	cbnz	r0, 8006fec <__ssputs_r+0x5c>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	f8ca 3000 	str.w	r3, [sl]
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fec:	6921      	ldr	r1, [r4, #16]
 8006fee:	464a      	mov	r2, r9
 8006ff0:	f7ff ff84 	bl	8006efc <memcpy>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	6126      	str	r6, [r4, #16]
 8007002:	6165      	str	r5, [r4, #20]
 8007004:	444e      	add	r6, r9
 8007006:	eba5 0509 	sub.w	r5, r5, r9
 800700a:	6026      	str	r6, [r4, #0]
 800700c:	60a5      	str	r5, [r4, #8]
 800700e:	463e      	mov	r6, r7
 8007010:	42be      	cmp	r6, r7
 8007012:	d900      	bls.n	8007016 <__ssputs_r+0x86>
 8007014:	463e      	mov	r6, r7
 8007016:	6820      	ldr	r0, [r4, #0]
 8007018:	4632      	mov	r2, r6
 800701a:	4641      	mov	r1, r8
 800701c:	f000 faa8 	bl	8007570 <memmove>
 8007020:	68a3      	ldr	r3, [r4, #8]
 8007022:	1b9b      	subs	r3, r3, r6
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	4433      	add	r3, r6
 800702a:	6023      	str	r3, [r4, #0]
 800702c:	2000      	movs	r0, #0
 800702e:	e7db      	b.n	8006fe8 <__ssputs_r+0x58>
 8007030:	462a      	mov	r2, r5
 8007032:	f000 fb97 	bl	8007764 <_realloc_r>
 8007036:	4606      	mov	r6, r0
 8007038:	2800      	cmp	r0, #0
 800703a:	d1e1      	bne.n	8007000 <__ssputs_r+0x70>
 800703c:	6921      	ldr	r1, [r4, #16]
 800703e:	4650      	mov	r0, sl
 8007040:	f000 fab0 	bl	80075a4 <_free_r>
 8007044:	e7c7      	b.n	8006fd6 <__ssputs_r+0x46>
	...

08007048 <_svfiprintf_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4698      	mov	r8, r3
 800704e:	898b      	ldrh	r3, [r1, #12]
 8007050:	061b      	lsls	r3, r3, #24
 8007052:	b09d      	sub	sp, #116	; 0x74
 8007054:	4607      	mov	r7, r0
 8007056:	460d      	mov	r5, r1
 8007058:	4614      	mov	r4, r2
 800705a:	d50e      	bpl.n	800707a <_svfiprintf_r+0x32>
 800705c:	690b      	ldr	r3, [r1, #16]
 800705e:	b963      	cbnz	r3, 800707a <_svfiprintf_r+0x32>
 8007060:	2140      	movs	r1, #64	; 0x40
 8007062:	f000 fb0b 	bl	800767c <_malloc_r>
 8007066:	6028      	str	r0, [r5, #0]
 8007068:	6128      	str	r0, [r5, #16]
 800706a:	b920      	cbnz	r0, 8007076 <_svfiprintf_r+0x2e>
 800706c:	230c      	movs	r3, #12
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007074:	e0d1      	b.n	800721a <_svfiprintf_r+0x1d2>
 8007076:	2340      	movs	r3, #64	; 0x40
 8007078:	616b      	str	r3, [r5, #20]
 800707a:	2300      	movs	r3, #0
 800707c:	9309      	str	r3, [sp, #36]	; 0x24
 800707e:	2320      	movs	r3, #32
 8007080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007084:	f8cd 800c 	str.w	r8, [sp, #12]
 8007088:	2330      	movs	r3, #48	; 0x30
 800708a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007234 <_svfiprintf_r+0x1ec>
 800708e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007092:	f04f 0901 	mov.w	r9, #1
 8007096:	4623      	mov	r3, r4
 8007098:	469a      	mov	sl, r3
 800709a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800709e:	b10a      	cbz	r2, 80070a4 <_svfiprintf_r+0x5c>
 80070a0:	2a25      	cmp	r2, #37	; 0x25
 80070a2:	d1f9      	bne.n	8007098 <_svfiprintf_r+0x50>
 80070a4:	ebba 0b04 	subs.w	fp, sl, r4
 80070a8:	d00b      	beq.n	80070c2 <_svfiprintf_r+0x7a>
 80070aa:	465b      	mov	r3, fp
 80070ac:	4622      	mov	r2, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff ff6d 	bl	8006f90 <__ssputs_r>
 80070b6:	3001      	adds	r0, #1
 80070b8:	f000 80aa 	beq.w	8007210 <_svfiprintf_r+0x1c8>
 80070bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070be:	445a      	add	r2, fp
 80070c0:	9209      	str	r2, [sp, #36]	; 0x24
 80070c2:	f89a 3000 	ldrb.w	r3, [sl]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80a2 	beq.w	8007210 <_svfiprintf_r+0x1c8>
 80070cc:	2300      	movs	r3, #0
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d6:	f10a 0a01 	add.w	sl, sl, #1
 80070da:	9304      	str	r3, [sp, #16]
 80070dc:	9307      	str	r3, [sp, #28]
 80070de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070e2:	931a      	str	r3, [sp, #104]	; 0x68
 80070e4:	4654      	mov	r4, sl
 80070e6:	2205      	movs	r2, #5
 80070e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ec:	4851      	ldr	r0, [pc, #324]	; (8007234 <_svfiprintf_r+0x1ec>)
 80070ee:	f7f9 f8bf 	bl	8000270 <memchr>
 80070f2:	9a04      	ldr	r2, [sp, #16]
 80070f4:	b9d8      	cbnz	r0, 800712e <_svfiprintf_r+0xe6>
 80070f6:	06d0      	lsls	r0, r2, #27
 80070f8:	bf44      	itt	mi
 80070fa:	2320      	movmi	r3, #32
 80070fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007100:	0711      	lsls	r1, r2, #28
 8007102:	bf44      	itt	mi
 8007104:	232b      	movmi	r3, #43	; 0x2b
 8007106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710a:	f89a 3000 	ldrb.w	r3, [sl]
 800710e:	2b2a      	cmp	r3, #42	; 0x2a
 8007110:	d015      	beq.n	800713e <_svfiprintf_r+0xf6>
 8007112:	9a07      	ldr	r2, [sp, #28]
 8007114:	4654      	mov	r4, sl
 8007116:	2000      	movs	r0, #0
 8007118:	f04f 0c0a 	mov.w	ip, #10
 800711c:	4621      	mov	r1, r4
 800711e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007122:	3b30      	subs	r3, #48	; 0x30
 8007124:	2b09      	cmp	r3, #9
 8007126:	d94e      	bls.n	80071c6 <_svfiprintf_r+0x17e>
 8007128:	b1b0      	cbz	r0, 8007158 <_svfiprintf_r+0x110>
 800712a:	9207      	str	r2, [sp, #28]
 800712c:	e014      	b.n	8007158 <_svfiprintf_r+0x110>
 800712e:	eba0 0308 	sub.w	r3, r0, r8
 8007132:	fa09 f303 	lsl.w	r3, r9, r3
 8007136:	4313      	orrs	r3, r2
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	46a2      	mov	sl, r4
 800713c:	e7d2      	b.n	80070e4 <_svfiprintf_r+0x9c>
 800713e:	9b03      	ldr	r3, [sp, #12]
 8007140:	1d19      	adds	r1, r3, #4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	9103      	str	r1, [sp, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	bfbb      	ittet	lt
 800714a:	425b      	neglt	r3, r3
 800714c:	f042 0202 	orrlt.w	r2, r2, #2
 8007150:	9307      	strge	r3, [sp, #28]
 8007152:	9307      	strlt	r3, [sp, #28]
 8007154:	bfb8      	it	lt
 8007156:	9204      	strlt	r2, [sp, #16]
 8007158:	7823      	ldrb	r3, [r4, #0]
 800715a:	2b2e      	cmp	r3, #46	; 0x2e
 800715c:	d10c      	bne.n	8007178 <_svfiprintf_r+0x130>
 800715e:	7863      	ldrb	r3, [r4, #1]
 8007160:	2b2a      	cmp	r3, #42	; 0x2a
 8007162:	d135      	bne.n	80071d0 <_svfiprintf_r+0x188>
 8007164:	9b03      	ldr	r3, [sp, #12]
 8007166:	1d1a      	adds	r2, r3, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	9203      	str	r2, [sp, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	bfb8      	it	lt
 8007170:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007174:	3402      	adds	r4, #2
 8007176:	9305      	str	r3, [sp, #20]
 8007178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007244 <_svfiprintf_r+0x1fc>
 800717c:	7821      	ldrb	r1, [r4, #0]
 800717e:	2203      	movs	r2, #3
 8007180:	4650      	mov	r0, sl
 8007182:	f7f9 f875 	bl	8000270 <memchr>
 8007186:	b140      	cbz	r0, 800719a <_svfiprintf_r+0x152>
 8007188:	2340      	movs	r3, #64	; 0x40
 800718a:	eba0 000a 	sub.w	r0, r0, sl
 800718e:	fa03 f000 	lsl.w	r0, r3, r0
 8007192:	9b04      	ldr	r3, [sp, #16]
 8007194:	4303      	orrs	r3, r0
 8007196:	3401      	adds	r4, #1
 8007198:	9304      	str	r3, [sp, #16]
 800719a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719e:	4826      	ldr	r0, [pc, #152]	; (8007238 <_svfiprintf_r+0x1f0>)
 80071a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071a4:	2206      	movs	r2, #6
 80071a6:	f7f9 f863 	bl	8000270 <memchr>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d038      	beq.n	8007220 <_svfiprintf_r+0x1d8>
 80071ae:	4b23      	ldr	r3, [pc, #140]	; (800723c <_svfiprintf_r+0x1f4>)
 80071b0:	bb1b      	cbnz	r3, 80071fa <_svfiprintf_r+0x1b2>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	3307      	adds	r3, #7
 80071b6:	f023 0307 	bic.w	r3, r3, #7
 80071ba:	3308      	adds	r3, #8
 80071bc:	9303      	str	r3, [sp, #12]
 80071be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c0:	4433      	add	r3, r6
 80071c2:	9309      	str	r3, [sp, #36]	; 0x24
 80071c4:	e767      	b.n	8007096 <_svfiprintf_r+0x4e>
 80071c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ca:	460c      	mov	r4, r1
 80071cc:	2001      	movs	r0, #1
 80071ce:	e7a5      	b.n	800711c <_svfiprintf_r+0xd4>
 80071d0:	2300      	movs	r3, #0
 80071d2:	3401      	adds	r4, #1
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	4619      	mov	r1, r3
 80071d8:	f04f 0c0a 	mov.w	ip, #10
 80071dc:	4620      	mov	r0, r4
 80071de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071e2:	3a30      	subs	r2, #48	; 0x30
 80071e4:	2a09      	cmp	r2, #9
 80071e6:	d903      	bls.n	80071f0 <_svfiprintf_r+0x1a8>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0c5      	beq.n	8007178 <_svfiprintf_r+0x130>
 80071ec:	9105      	str	r1, [sp, #20]
 80071ee:	e7c3      	b.n	8007178 <_svfiprintf_r+0x130>
 80071f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80071f4:	4604      	mov	r4, r0
 80071f6:	2301      	movs	r3, #1
 80071f8:	e7f0      	b.n	80071dc <_svfiprintf_r+0x194>
 80071fa:	ab03      	add	r3, sp, #12
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	462a      	mov	r2, r5
 8007200:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <_svfiprintf_r+0x1f8>)
 8007202:	a904      	add	r1, sp, #16
 8007204:	4638      	mov	r0, r7
 8007206:	f3af 8000 	nop.w
 800720a:	1c42      	adds	r2, r0, #1
 800720c:	4606      	mov	r6, r0
 800720e:	d1d6      	bne.n	80071be <_svfiprintf_r+0x176>
 8007210:	89ab      	ldrh	r3, [r5, #12]
 8007212:	065b      	lsls	r3, r3, #25
 8007214:	f53f af2c 	bmi.w	8007070 <_svfiprintf_r+0x28>
 8007218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800721a:	b01d      	add	sp, #116	; 0x74
 800721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007220:	ab03      	add	r3, sp, #12
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	462a      	mov	r2, r5
 8007226:	4b06      	ldr	r3, [pc, #24]	; (8007240 <_svfiprintf_r+0x1f8>)
 8007228:	a904      	add	r1, sp, #16
 800722a:	4638      	mov	r0, r7
 800722c:	f000 f87a 	bl	8007324 <_printf_i>
 8007230:	e7eb      	b.n	800720a <_svfiprintf_r+0x1c2>
 8007232:	bf00      	nop
 8007234:	080079b4 	.word	0x080079b4
 8007238:	080079be 	.word	0x080079be
 800723c:	00000000 	.word	0x00000000
 8007240:	08006f91 	.word	0x08006f91
 8007244:	080079ba 	.word	0x080079ba

08007248 <_printf_common>:
 8007248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800724c:	4616      	mov	r6, r2
 800724e:	4699      	mov	r9, r3
 8007250:	688a      	ldr	r2, [r1, #8]
 8007252:	690b      	ldr	r3, [r1, #16]
 8007254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007258:	4293      	cmp	r3, r2
 800725a:	bfb8      	it	lt
 800725c:	4613      	movlt	r3, r2
 800725e:	6033      	str	r3, [r6, #0]
 8007260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007264:	4607      	mov	r7, r0
 8007266:	460c      	mov	r4, r1
 8007268:	b10a      	cbz	r2, 800726e <_printf_common+0x26>
 800726a:	3301      	adds	r3, #1
 800726c:	6033      	str	r3, [r6, #0]
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	0699      	lsls	r1, r3, #26
 8007272:	bf42      	ittt	mi
 8007274:	6833      	ldrmi	r3, [r6, #0]
 8007276:	3302      	addmi	r3, #2
 8007278:	6033      	strmi	r3, [r6, #0]
 800727a:	6825      	ldr	r5, [r4, #0]
 800727c:	f015 0506 	ands.w	r5, r5, #6
 8007280:	d106      	bne.n	8007290 <_printf_common+0x48>
 8007282:	f104 0a19 	add.w	sl, r4, #25
 8007286:	68e3      	ldr	r3, [r4, #12]
 8007288:	6832      	ldr	r2, [r6, #0]
 800728a:	1a9b      	subs	r3, r3, r2
 800728c:	42ab      	cmp	r3, r5
 800728e:	dc26      	bgt.n	80072de <_printf_common+0x96>
 8007290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007294:	1e13      	subs	r3, r2, #0
 8007296:	6822      	ldr	r2, [r4, #0]
 8007298:	bf18      	it	ne
 800729a:	2301      	movne	r3, #1
 800729c:	0692      	lsls	r2, r2, #26
 800729e:	d42b      	bmi.n	80072f8 <_printf_common+0xb0>
 80072a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a4:	4649      	mov	r1, r9
 80072a6:	4638      	mov	r0, r7
 80072a8:	47c0      	blx	r8
 80072aa:	3001      	adds	r0, #1
 80072ac:	d01e      	beq.n	80072ec <_printf_common+0xa4>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	68e5      	ldr	r5, [r4, #12]
 80072b2:	6832      	ldr	r2, [r6, #0]
 80072b4:	f003 0306 	and.w	r3, r3, #6
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	bf08      	it	eq
 80072bc:	1aad      	subeq	r5, r5, r2
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	bf0c      	ite	eq
 80072c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c8:	2500      	movne	r5, #0
 80072ca:	4293      	cmp	r3, r2
 80072cc:	bfc4      	itt	gt
 80072ce:	1a9b      	subgt	r3, r3, r2
 80072d0:	18ed      	addgt	r5, r5, r3
 80072d2:	2600      	movs	r6, #0
 80072d4:	341a      	adds	r4, #26
 80072d6:	42b5      	cmp	r5, r6
 80072d8:	d11a      	bne.n	8007310 <_printf_common+0xc8>
 80072da:	2000      	movs	r0, #0
 80072dc:	e008      	b.n	80072f0 <_printf_common+0xa8>
 80072de:	2301      	movs	r3, #1
 80072e0:	4652      	mov	r2, sl
 80072e2:	4649      	mov	r1, r9
 80072e4:	4638      	mov	r0, r7
 80072e6:	47c0      	blx	r8
 80072e8:	3001      	adds	r0, #1
 80072ea:	d103      	bne.n	80072f4 <_printf_common+0xac>
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f4:	3501      	adds	r5, #1
 80072f6:	e7c6      	b.n	8007286 <_printf_common+0x3e>
 80072f8:	18e1      	adds	r1, r4, r3
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	2030      	movs	r0, #48	; 0x30
 80072fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007302:	4422      	add	r2, r4
 8007304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800730c:	3302      	adds	r3, #2
 800730e:	e7c7      	b.n	80072a0 <_printf_common+0x58>
 8007310:	2301      	movs	r3, #1
 8007312:	4622      	mov	r2, r4
 8007314:	4649      	mov	r1, r9
 8007316:	4638      	mov	r0, r7
 8007318:	47c0      	blx	r8
 800731a:	3001      	adds	r0, #1
 800731c:	d0e6      	beq.n	80072ec <_printf_common+0xa4>
 800731e:	3601      	adds	r6, #1
 8007320:	e7d9      	b.n	80072d6 <_printf_common+0x8e>
	...

08007324 <_printf_i>:
 8007324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	7e0f      	ldrb	r7, [r1, #24]
 800732a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800732c:	2f78      	cmp	r7, #120	; 0x78
 800732e:	4691      	mov	r9, r2
 8007330:	4680      	mov	r8, r0
 8007332:	460c      	mov	r4, r1
 8007334:	469a      	mov	sl, r3
 8007336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800733a:	d807      	bhi.n	800734c <_printf_i+0x28>
 800733c:	2f62      	cmp	r7, #98	; 0x62
 800733e:	d80a      	bhi.n	8007356 <_printf_i+0x32>
 8007340:	2f00      	cmp	r7, #0
 8007342:	f000 80d8 	beq.w	80074f6 <_printf_i+0x1d2>
 8007346:	2f58      	cmp	r7, #88	; 0x58
 8007348:	f000 80a3 	beq.w	8007492 <_printf_i+0x16e>
 800734c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007354:	e03a      	b.n	80073cc <_printf_i+0xa8>
 8007356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800735a:	2b15      	cmp	r3, #21
 800735c:	d8f6      	bhi.n	800734c <_printf_i+0x28>
 800735e:	a101      	add	r1, pc, #4	; (adr r1, 8007364 <_printf_i+0x40>)
 8007360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007364:	080073bd 	.word	0x080073bd
 8007368:	080073d1 	.word	0x080073d1
 800736c:	0800734d 	.word	0x0800734d
 8007370:	0800734d 	.word	0x0800734d
 8007374:	0800734d 	.word	0x0800734d
 8007378:	0800734d 	.word	0x0800734d
 800737c:	080073d1 	.word	0x080073d1
 8007380:	0800734d 	.word	0x0800734d
 8007384:	0800734d 	.word	0x0800734d
 8007388:	0800734d 	.word	0x0800734d
 800738c:	0800734d 	.word	0x0800734d
 8007390:	080074dd 	.word	0x080074dd
 8007394:	08007401 	.word	0x08007401
 8007398:	080074bf 	.word	0x080074bf
 800739c:	0800734d 	.word	0x0800734d
 80073a0:	0800734d 	.word	0x0800734d
 80073a4:	080074ff 	.word	0x080074ff
 80073a8:	0800734d 	.word	0x0800734d
 80073ac:	08007401 	.word	0x08007401
 80073b0:	0800734d 	.word	0x0800734d
 80073b4:	0800734d 	.word	0x0800734d
 80073b8:	080074c7 	.word	0x080074c7
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	1d1a      	adds	r2, r3, #4
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0a3      	b.n	8007518 <_printf_i+0x1f4>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	6829      	ldr	r1, [r5, #0]
 80073d4:	0606      	lsls	r6, r0, #24
 80073d6:	f101 0304 	add.w	r3, r1, #4
 80073da:	d50a      	bpl.n	80073f2 <_printf_i+0xce>
 80073dc:	680e      	ldr	r6, [r1, #0]
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	2e00      	cmp	r6, #0
 80073e2:	da03      	bge.n	80073ec <_printf_i+0xc8>
 80073e4:	232d      	movs	r3, #45	; 0x2d
 80073e6:	4276      	negs	r6, r6
 80073e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ec:	485e      	ldr	r0, [pc, #376]	; (8007568 <_printf_i+0x244>)
 80073ee:	230a      	movs	r3, #10
 80073f0:	e019      	b.n	8007426 <_printf_i+0x102>
 80073f2:	680e      	ldr	r6, [r1, #0]
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073fa:	bf18      	it	ne
 80073fc:	b236      	sxthne	r6, r6
 80073fe:	e7ef      	b.n	80073e0 <_printf_i+0xbc>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	6820      	ldr	r0, [r4, #0]
 8007404:	1d19      	adds	r1, r3, #4
 8007406:	6029      	str	r1, [r5, #0]
 8007408:	0601      	lsls	r1, r0, #24
 800740a:	d501      	bpl.n	8007410 <_printf_i+0xec>
 800740c:	681e      	ldr	r6, [r3, #0]
 800740e:	e002      	b.n	8007416 <_printf_i+0xf2>
 8007410:	0646      	lsls	r6, r0, #25
 8007412:	d5fb      	bpl.n	800740c <_printf_i+0xe8>
 8007414:	881e      	ldrh	r6, [r3, #0]
 8007416:	4854      	ldr	r0, [pc, #336]	; (8007568 <_printf_i+0x244>)
 8007418:	2f6f      	cmp	r7, #111	; 0x6f
 800741a:	bf0c      	ite	eq
 800741c:	2308      	moveq	r3, #8
 800741e:	230a      	movne	r3, #10
 8007420:	2100      	movs	r1, #0
 8007422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007426:	6865      	ldr	r5, [r4, #4]
 8007428:	60a5      	str	r5, [r4, #8]
 800742a:	2d00      	cmp	r5, #0
 800742c:	bfa2      	ittt	ge
 800742e:	6821      	ldrge	r1, [r4, #0]
 8007430:	f021 0104 	bicge.w	r1, r1, #4
 8007434:	6021      	strge	r1, [r4, #0]
 8007436:	b90e      	cbnz	r6, 800743c <_printf_i+0x118>
 8007438:	2d00      	cmp	r5, #0
 800743a:	d04d      	beq.n	80074d8 <_printf_i+0x1b4>
 800743c:	4615      	mov	r5, r2
 800743e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007442:	fb03 6711 	mls	r7, r3, r1, r6
 8007446:	5dc7      	ldrb	r7, [r0, r7]
 8007448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800744c:	4637      	mov	r7, r6
 800744e:	42bb      	cmp	r3, r7
 8007450:	460e      	mov	r6, r1
 8007452:	d9f4      	bls.n	800743e <_printf_i+0x11a>
 8007454:	2b08      	cmp	r3, #8
 8007456:	d10b      	bne.n	8007470 <_printf_i+0x14c>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	07de      	lsls	r6, r3, #31
 800745c:	d508      	bpl.n	8007470 <_printf_i+0x14c>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	6861      	ldr	r1, [r4, #4]
 8007462:	4299      	cmp	r1, r3
 8007464:	bfde      	ittt	le
 8007466:	2330      	movle	r3, #48	; 0x30
 8007468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800746c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007470:	1b52      	subs	r2, r2, r5
 8007472:	6122      	str	r2, [r4, #16]
 8007474:	f8cd a000 	str.w	sl, [sp]
 8007478:	464b      	mov	r3, r9
 800747a:	aa03      	add	r2, sp, #12
 800747c:	4621      	mov	r1, r4
 800747e:	4640      	mov	r0, r8
 8007480:	f7ff fee2 	bl	8007248 <_printf_common>
 8007484:	3001      	adds	r0, #1
 8007486:	d14c      	bne.n	8007522 <_printf_i+0x1fe>
 8007488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800748c:	b004      	add	sp, #16
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	4835      	ldr	r0, [pc, #212]	; (8007568 <_printf_i+0x244>)
 8007494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007498:	6829      	ldr	r1, [r5, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f851 6b04 	ldr.w	r6, [r1], #4
 80074a0:	6029      	str	r1, [r5, #0]
 80074a2:	061d      	lsls	r5, r3, #24
 80074a4:	d514      	bpl.n	80074d0 <_printf_i+0x1ac>
 80074a6:	07df      	lsls	r7, r3, #31
 80074a8:	bf44      	itt	mi
 80074aa:	f043 0320 	orrmi.w	r3, r3, #32
 80074ae:	6023      	strmi	r3, [r4, #0]
 80074b0:	b91e      	cbnz	r6, 80074ba <_printf_i+0x196>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	f023 0320 	bic.w	r3, r3, #32
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	2310      	movs	r3, #16
 80074bc:	e7b0      	b.n	8007420 <_printf_i+0xfc>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	2378      	movs	r3, #120	; 0x78
 80074c8:	4828      	ldr	r0, [pc, #160]	; (800756c <_printf_i+0x248>)
 80074ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ce:	e7e3      	b.n	8007498 <_printf_i+0x174>
 80074d0:	0659      	lsls	r1, r3, #25
 80074d2:	bf48      	it	mi
 80074d4:	b2b6      	uxthmi	r6, r6
 80074d6:	e7e6      	b.n	80074a6 <_printf_i+0x182>
 80074d8:	4615      	mov	r5, r2
 80074da:	e7bb      	b.n	8007454 <_printf_i+0x130>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	6826      	ldr	r6, [r4, #0]
 80074e0:	6961      	ldr	r1, [r4, #20]
 80074e2:	1d18      	adds	r0, r3, #4
 80074e4:	6028      	str	r0, [r5, #0]
 80074e6:	0635      	lsls	r5, r6, #24
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	d501      	bpl.n	80074f0 <_printf_i+0x1cc>
 80074ec:	6019      	str	r1, [r3, #0]
 80074ee:	e002      	b.n	80074f6 <_printf_i+0x1d2>
 80074f0:	0670      	lsls	r0, r6, #25
 80074f2:	d5fb      	bpl.n	80074ec <_printf_i+0x1c8>
 80074f4:	8019      	strh	r1, [r3, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	4615      	mov	r5, r2
 80074fc:	e7ba      	b.n	8007474 <_printf_i+0x150>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	1d1a      	adds	r2, r3, #4
 8007502:	602a      	str	r2, [r5, #0]
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	6862      	ldr	r2, [r4, #4]
 8007508:	2100      	movs	r1, #0
 800750a:	4628      	mov	r0, r5
 800750c:	f7f8 feb0 	bl	8000270 <memchr>
 8007510:	b108      	cbz	r0, 8007516 <_printf_i+0x1f2>
 8007512:	1b40      	subs	r0, r0, r5
 8007514:	6060      	str	r0, [r4, #4]
 8007516:	6863      	ldr	r3, [r4, #4]
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	2300      	movs	r3, #0
 800751c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007520:	e7a8      	b.n	8007474 <_printf_i+0x150>
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	462a      	mov	r2, r5
 8007526:	4649      	mov	r1, r9
 8007528:	4640      	mov	r0, r8
 800752a:	47d0      	blx	sl
 800752c:	3001      	adds	r0, #1
 800752e:	d0ab      	beq.n	8007488 <_printf_i+0x164>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	079b      	lsls	r3, r3, #30
 8007534:	d413      	bmi.n	800755e <_printf_i+0x23a>
 8007536:	68e0      	ldr	r0, [r4, #12]
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	4298      	cmp	r0, r3
 800753c:	bfb8      	it	lt
 800753e:	4618      	movlt	r0, r3
 8007540:	e7a4      	b.n	800748c <_printf_i+0x168>
 8007542:	2301      	movs	r3, #1
 8007544:	4632      	mov	r2, r6
 8007546:	4649      	mov	r1, r9
 8007548:	4640      	mov	r0, r8
 800754a:	47d0      	blx	sl
 800754c:	3001      	adds	r0, #1
 800754e:	d09b      	beq.n	8007488 <_printf_i+0x164>
 8007550:	3501      	adds	r5, #1
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	9903      	ldr	r1, [sp, #12]
 8007556:	1a5b      	subs	r3, r3, r1
 8007558:	42ab      	cmp	r3, r5
 800755a:	dcf2      	bgt.n	8007542 <_printf_i+0x21e>
 800755c:	e7eb      	b.n	8007536 <_printf_i+0x212>
 800755e:	2500      	movs	r5, #0
 8007560:	f104 0619 	add.w	r6, r4, #25
 8007564:	e7f5      	b.n	8007552 <_printf_i+0x22e>
 8007566:	bf00      	nop
 8007568:	080079c5 	.word	0x080079c5
 800756c:	080079d6 	.word	0x080079d6

08007570 <memmove>:
 8007570:	4288      	cmp	r0, r1
 8007572:	b510      	push	{r4, lr}
 8007574:	eb01 0402 	add.w	r4, r1, r2
 8007578:	d902      	bls.n	8007580 <memmove+0x10>
 800757a:	4284      	cmp	r4, r0
 800757c:	4623      	mov	r3, r4
 800757e:	d807      	bhi.n	8007590 <memmove+0x20>
 8007580:	1e43      	subs	r3, r0, #1
 8007582:	42a1      	cmp	r1, r4
 8007584:	d008      	beq.n	8007598 <memmove+0x28>
 8007586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800758a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800758e:	e7f8      	b.n	8007582 <memmove+0x12>
 8007590:	4402      	add	r2, r0
 8007592:	4601      	mov	r1, r0
 8007594:	428a      	cmp	r2, r1
 8007596:	d100      	bne.n	800759a <memmove+0x2a>
 8007598:	bd10      	pop	{r4, pc}
 800759a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800759e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075a2:	e7f7      	b.n	8007594 <memmove+0x24>

080075a4 <_free_r>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d044      	beq.n	8007634 <_free_r+0x90>
 80075aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ae:	9001      	str	r0, [sp, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f1a1 0404 	sub.w	r4, r1, #4
 80075b6:	bfb8      	it	lt
 80075b8:	18e4      	addlt	r4, r4, r3
 80075ba:	f000 f913 	bl	80077e4 <__malloc_lock>
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <_free_r+0x94>)
 80075c0:	9801      	ldr	r0, [sp, #4]
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	b933      	cbnz	r3, 80075d4 <_free_r+0x30>
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	6014      	str	r4, [r2, #0]
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075d0:	f000 b90e 	b.w	80077f0 <__malloc_unlock>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d908      	bls.n	80075ea <_free_r+0x46>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf01      	itttt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	1949      	addeq	r1, r1, r5
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	e7ed      	b.n	80075c6 <_free_r+0x22>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x50>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x46>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1855      	adds	r5, r2, r1
 80075f8:	42a5      	cmp	r5, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x70>
 80075fc:	6824      	ldr	r4, [r4, #0]
 80075fe:	4421      	add	r1, r4
 8007600:	1854      	adds	r4, r2, r1
 8007602:	42a3      	cmp	r3, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1e0      	bne.n	80075ca <_free_r+0x26>
 8007608:	681c      	ldr	r4, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6053      	str	r3, [r2, #4]
 800760e:	4421      	add	r1, r4
 8007610:	6011      	str	r1, [r2, #0]
 8007612:	e7da      	b.n	80075ca <_free_r+0x26>
 8007614:	d902      	bls.n	800761c <_free_r+0x78>
 8007616:	230c      	movs	r3, #12
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	e7d6      	b.n	80075ca <_free_r+0x26>
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1961      	adds	r1, r4, r5
 8007620:	428b      	cmp	r3, r1
 8007622:	bf04      	itt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	6054      	str	r4, [r2, #4]
 8007632:	e7ca      	b.n	80075ca <_free_r+0x26>
 8007634:	b003      	add	sp, #12
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	2001450c 	.word	0x2001450c

0800763c <sbrk_aligned>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4e0e      	ldr	r6, [pc, #56]	; (8007678 <sbrk_aligned+0x3c>)
 8007640:	460c      	mov	r4, r1
 8007642:	6831      	ldr	r1, [r6, #0]
 8007644:	4605      	mov	r5, r0
 8007646:	b911      	cbnz	r1, 800764e <sbrk_aligned+0x12>
 8007648:	f000 f8bc 	bl	80077c4 <_sbrk_r>
 800764c:	6030      	str	r0, [r6, #0]
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	f000 f8b7 	bl	80077c4 <_sbrk_r>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d00a      	beq.n	8007670 <sbrk_aligned+0x34>
 800765a:	1cc4      	adds	r4, r0, #3
 800765c:	f024 0403 	bic.w	r4, r4, #3
 8007660:	42a0      	cmp	r0, r4
 8007662:	d007      	beq.n	8007674 <sbrk_aligned+0x38>
 8007664:	1a21      	subs	r1, r4, r0
 8007666:	4628      	mov	r0, r5
 8007668:	f000 f8ac 	bl	80077c4 <_sbrk_r>
 800766c:	3001      	adds	r0, #1
 800766e:	d101      	bne.n	8007674 <sbrk_aligned+0x38>
 8007670:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007674:	4620      	mov	r0, r4
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	20014510 	.word	0x20014510

0800767c <_malloc_r>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	1ccd      	adds	r5, r1, #3
 8007682:	f025 0503 	bic.w	r5, r5, #3
 8007686:	3508      	adds	r5, #8
 8007688:	2d0c      	cmp	r5, #12
 800768a:	bf38      	it	cc
 800768c:	250c      	movcc	r5, #12
 800768e:	2d00      	cmp	r5, #0
 8007690:	4607      	mov	r7, r0
 8007692:	db01      	blt.n	8007698 <_malloc_r+0x1c>
 8007694:	42a9      	cmp	r1, r5
 8007696:	d905      	bls.n	80076a4 <_malloc_r+0x28>
 8007698:	230c      	movs	r3, #12
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	2600      	movs	r6, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	4e2e      	ldr	r6, [pc, #184]	; (8007760 <_malloc_r+0xe4>)
 80076a6:	f000 f89d 	bl	80077e4 <__malloc_lock>
 80076aa:	6833      	ldr	r3, [r6, #0]
 80076ac:	461c      	mov	r4, r3
 80076ae:	bb34      	cbnz	r4, 80076fe <_malloc_r+0x82>
 80076b0:	4629      	mov	r1, r5
 80076b2:	4638      	mov	r0, r7
 80076b4:	f7ff ffc2 	bl	800763c <sbrk_aligned>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	4604      	mov	r4, r0
 80076bc:	d14d      	bne.n	800775a <_malloc_r+0xde>
 80076be:	6834      	ldr	r4, [r6, #0]
 80076c0:	4626      	mov	r6, r4
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	d140      	bne.n	8007748 <_malloc_r+0xcc>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	4631      	mov	r1, r6
 80076ca:	4638      	mov	r0, r7
 80076cc:	eb04 0803 	add.w	r8, r4, r3
 80076d0:	f000 f878 	bl	80077c4 <_sbrk_r>
 80076d4:	4580      	cmp	r8, r0
 80076d6:	d13a      	bne.n	800774e <_malloc_r+0xd2>
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	3503      	adds	r5, #3
 80076dc:	1a6d      	subs	r5, r5, r1
 80076de:	f025 0503 	bic.w	r5, r5, #3
 80076e2:	3508      	adds	r5, #8
 80076e4:	2d0c      	cmp	r5, #12
 80076e6:	bf38      	it	cc
 80076e8:	250c      	movcc	r5, #12
 80076ea:	4629      	mov	r1, r5
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff ffa5 	bl	800763c <sbrk_aligned>
 80076f2:	3001      	adds	r0, #1
 80076f4:	d02b      	beq.n	800774e <_malloc_r+0xd2>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	442b      	add	r3, r5
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	e00e      	b.n	800771c <_malloc_r+0xa0>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	1b52      	subs	r2, r2, r5
 8007702:	d41e      	bmi.n	8007742 <_malloc_r+0xc6>
 8007704:	2a0b      	cmp	r2, #11
 8007706:	d916      	bls.n	8007736 <_malloc_r+0xba>
 8007708:	1961      	adds	r1, r4, r5
 800770a:	42a3      	cmp	r3, r4
 800770c:	6025      	str	r5, [r4, #0]
 800770e:	bf18      	it	ne
 8007710:	6059      	strne	r1, [r3, #4]
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	bf08      	it	eq
 8007716:	6031      	streq	r1, [r6, #0]
 8007718:	5162      	str	r2, [r4, r5]
 800771a:	604b      	str	r3, [r1, #4]
 800771c:	4638      	mov	r0, r7
 800771e:	f104 060b 	add.w	r6, r4, #11
 8007722:	f000 f865 	bl	80077f0 <__malloc_unlock>
 8007726:	f026 0607 	bic.w	r6, r6, #7
 800772a:	1d23      	adds	r3, r4, #4
 800772c:	1af2      	subs	r2, r6, r3
 800772e:	d0b6      	beq.n	800769e <_malloc_r+0x22>
 8007730:	1b9b      	subs	r3, r3, r6
 8007732:	50a3      	str	r3, [r4, r2]
 8007734:	e7b3      	b.n	800769e <_malloc_r+0x22>
 8007736:	6862      	ldr	r2, [r4, #4]
 8007738:	42a3      	cmp	r3, r4
 800773a:	bf0c      	ite	eq
 800773c:	6032      	streq	r2, [r6, #0]
 800773e:	605a      	strne	r2, [r3, #4]
 8007740:	e7ec      	b.n	800771c <_malloc_r+0xa0>
 8007742:	4623      	mov	r3, r4
 8007744:	6864      	ldr	r4, [r4, #4]
 8007746:	e7b2      	b.n	80076ae <_malloc_r+0x32>
 8007748:	4634      	mov	r4, r6
 800774a:	6876      	ldr	r6, [r6, #4]
 800774c:	e7b9      	b.n	80076c2 <_malloc_r+0x46>
 800774e:	230c      	movs	r3, #12
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4638      	mov	r0, r7
 8007754:	f000 f84c 	bl	80077f0 <__malloc_unlock>
 8007758:	e7a1      	b.n	800769e <_malloc_r+0x22>
 800775a:	6025      	str	r5, [r4, #0]
 800775c:	e7de      	b.n	800771c <_malloc_r+0xa0>
 800775e:	bf00      	nop
 8007760:	2001450c 	.word	0x2001450c

08007764 <_realloc_r>:
 8007764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007768:	4680      	mov	r8, r0
 800776a:	4614      	mov	r4, r2
 800776c:	460e      	mov	r6, r1
 800776e:	b921      	cbnz	r1, 800777a <_realloc_r+0x16>
 8007770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	4611      	mov	r1, r2
 8007776:	f7ff bf81 	b.w	800767c <_malloc_r>
 800777a:	b92a      	cbnz	r2, 8007788 <_realloc_r+0x24>
 800777c:	f7ff ff12 	bl	80075a4 <_free_r>
 8007780:	4625      	mov	r5, r4
 8007782:	4628      	mov	r0, r5
 8007784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007788:	f000 f838 	bl	80077fc <_malloc_usable_size_r>
 800778c:	4284      	cmp	r4, r0
 800778e:	4607      	mov	r7, r0
 8007790:	d802      	bhi.n	8007798 <_realloc_r+0x34>
 8007792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007796:	d812      	bhi.n	80077be <_realloc_r+0x5a>
 8007798:	4621      	mov	r1, r4
 800779a:	4640      	mov	r0, r8
 800779c:	f7ff ff6e 	bl	800767c <_malloc_r>
 80077a0:	4605      	mov	r5, r0
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d0ed      	beq.n	8007782 <_realloc_r+0x1e>
 80077a6:	42bc      	cmp	r4, r7
 80077a8:	4622      	mov	r2, r4
 80077aa:	4631      	mov	r1, r6
 80077ac:	bf28      	it	cs
 80077ae:	463a      	movcs	r2, r7
 80077b0:	f7ff fba4 	bl	8006efc <memcpy>
 80077b4:	4631      	mov	r1, r6
 80077b6:	4640      	mov	r0, r8
 80077b8:	f7ff fef4 	bl	80075a4 <_free_r>
 80077bc:	e7e1      	b.n	8007782 <_realloc_r+0x1e>
 80077be:	4635      	mov	r5, r6
 80077c0:	e7df      	b.n	8007782 <_realloc_r+0x1e>
	...

080077c4 <_sbrk_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d06      	ldr	r5, [pc, #24]	; (80077e0 <_sbrk_r+0x1c>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f000 f81e 	bl	8007810 <_sbrk>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_sbrk_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_sbrk_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20014514 	.word	0x20014514

080077e4 <__malloc_lock>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__malloc_lock+0x8>)
 80077e6:	f000 b811 	b.w	800780c <__retarget_lock_acquire_recursive>
 80077ea:	bf00      	nop
 80077ec:	20014518 	.word	0x20014518

080077f0 <__malloc_unlock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	; (80077f8 <__malloc_unlock+0x8>)
 80077f2:	f000 b80c 	b.w	800780e <__retarget_lock_release_recursive>
 80077f6:	bf00      	nop
 80077f8:	20014518 	.word	0x20014518

080077fc <_malloc_usable_size_r>:
 80077fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007800:	1f18      	subs	r0, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	bfbc      	itt	lt
 8007806:	580b      	ldrlt	r3, [r1, r0]
 8007808:	18c0      	addlt	r0, r0, r3
 800780a:	4770      	bx	lr

0800780c <__retarget_lock_acquire_recursive>:
 800780c:	4770      	bx	lr

0800780e <__retarget_lock_release_recursive>:
 800780e:	4770      	bx	lr

08007810 <_sbrk>:
 8007810:	4a04      	ldr	r2, [pc, #16]	; (8007824 <_sbrk+0x14>)
 8007812:	6811      	ldr	r1, [r2, #0]
 8007814:	4603      	mov	r3, r0
 8007816:	b909      	cbnz	r1, 800781c <_sbrk+0xc>
 8007818:	4903      	ldr	r1, [pc, #12]	; (8007828 <_sbrk+0x18>)
 800781a:	6011      	str	r1, [r2, #0]
 800781c:	6810      	ldr	r0, [r2, #0]
 800781e:	4403      	add	r3, r0
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	4770      	bx	lr
 8007824:	2001451c 	.word	0x2001451c
 8007828:	20014520 	.word	0x20014520

0800782c <_init>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr

08007838 <_fini>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr
